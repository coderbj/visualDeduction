import { IUIEvent, ILeafList, ILeaf, IPointData, IPointerEvent, PointerType, IDragEvent, IObject, IBoundsData, IDropEvent, IMoveEvent, IRotateEvent, ISwipeEvent, IZoomEvent, IKeyEvent } from '@leafer/interface';
import { Event } from '@leafer/core';

declare class UIEvent extends Event implements IUIEvent {
    readonly x: number;
    readonly y: number;
    readonly path: ILeafList;
    readonly throughPath?: ILeafList;
    readonly altKey: boolean;
    readonly ctrlKey: boolean;
    readonly shiftKey: boolean;
    readonly metaKey: boolean;
    get spaceKey(): boolean;
    get left(): boolean;
    get right(): boolean;
    get middle(): boolean;
    readonly buttons: number;
    readonly target: ILeaf;
    readonly current: ILeaf;
    readonly bubbles: boolean;
    constructor(params: IUIEvent);
    getBoxPoint(relative?: ILeaf): IPointData;
    getInnerPoint(relative?: ILeaf): IPointData;
    getLocalPoint(relative?: ILeaf): IPointData;
    getPagePoint(): IPointData;
    getInner(relative?: ILeaf): IPointData;
    getLocal(relative?: ILeaf): IPointData;
    getPage(): IPointData;
    static changeName(oldName: string, newName: string): void;
}

declare class PointerEvent extends UIEvent implements IPointerEvent {
    static POINTER: string;
    static BEFORE_DOWN: string;
    static BEFORE_MOVE: string;
    static BEFORE_UP: string;
    static DOWN: string;
    static MOVE: string;
    static UP: string;
    static OVER: string;
    static OUT: string;
    static ENTER: string;
    static LEAVE: string;
    static TAP: string;
    static DOUBLE_TAP: string;
    static CLICK: string;
    static DOUBLE_CLICK: string;
    static LONG_PRESS: string;
    static LONG_TAP: string;
    static MENU: string;
    static MENU_TAP: string;
    readonly width: number;
    readonly height: number;
    readonly pointerType: PointerType;
    readonly multiTouch?: boolean;
    readonly pressure: number;
    readonly tangentialPressure?: number;
    readonly tiltX?: number;
    readonly tiltY?: number;
    readonly twist?: number;
}
declare const MyPointerEvent: typeof PointerEvent;

declare class DragEvent extends PointerEvent implements IDragEvent {
    static BEFORE_DRAG: string;
    static START: string;
    static DRAG: string;
    static END: string;
    static OVER: string;
    static OUT: string;
    static ENTER: string;
    static LEAVE: string;
    readonly moveX: number;
    readonly moveY: number;
    readonly totalX: number;
    readonly totalY: number;
    static list: ILeafList;
    static data: IObject;
    static setList(data: ILeaf | ILeaf[] | ILeafList): void;
    static setData(data: IObject): void;
    static getValidMove(leaf: ILeaf, start: IPointData, total: IPointData): IPointData;
    static getMoveInDragBounds(childBox: IBoundsData, dragBounds: IBoundsData, move: IPointData, change?: boolean): IPointData;
    getPageMove(total?: boolean): IPointData;
    getInnerMove(relative?: ILeaf, total?: boolean): IPointData;
    getLocalMove(relative?: ILeaf, total?: boolean): IPointData;
    getPageTotal(): IPointData;
    getInnerTotal(relative?: ILeaf): IPointData;
    getLocalTotal(relative?: ILeaf): IPointData;
    getPageBounds(): IBoundsData;
    protected assignMove(total: boolean): void;
}
declare const MyDragEvent: typeof DragEvent;

declare class DropEvent extends PointerEvent implements IDropEvent {
    static DROP: string;
    readonly list: ILeafList;
    readonly data: IObject;
    static setList(data: ILeaf | ILeaf[] | ILeafList): void;
    static setData(data: IObject): void;
}

declare class MoveEvent extends DragEvent implements IMoveEvent {
    static BEFORE_MOVE: string;
    static START: string;
    static MOVE: string;
    static END: string;
    readonly moveType: 'drag' | 'move';
}

declare class RotateEvent extends UIEvent implements IRotateEvent {
    static BEFORE_ROTATE: string;
    static START: string;
    static ROTATE: string;
    static END: string;
    readonly rotation: number;
}

declare class SwipeEvent extends DragEvent implements ISwipeEvent {
    static SWIPE: string;
    static LEFT: string;
    static RIGHT: string;
    static UP: string;
    static DOWN: string;
    readonly speed: number;
    readonly direction: string;
}

declare class ZoomEvent extends UIEvent implements IZoomEvent {
    static BEFORE_ZOOM: string;
    static START: string;
    static ZOOM: string;
    static END: string;
    readonly scale: number;
}

declare class KeyEvent extends UIEvent implements IKeyEvent {
    static DOWN: string;
    static HOLD: string;
    static UP: string;
    readonly code: string;
    readonly key: string;
}

declare const Keyboard: {
    isHoldSpaceKey(): boolean;
    isHold(code: string): boolean;
    setDownCode(code: string): void;
    setUpCode(code: string): void;
};

declare const PointerButton: {
    LEFT: number;
    RIGHT: number;
    MIDDLE: number;
    defaultLeft(event: IUIEvent): void;
    left(event: IUIEvent): boolean;
    right(event: IUIEvent): boolean;
    middle(event: IUIEvent): boolean;
};

export { DragEvent, DropEvent, KeyEvent, Keyboard, MoveEvent, MyDragEvent, MyPointerEvent, PointerButton, PointerEvent, RotateEvent, SwipeEvent, UIEvent, ZoomEvent };
