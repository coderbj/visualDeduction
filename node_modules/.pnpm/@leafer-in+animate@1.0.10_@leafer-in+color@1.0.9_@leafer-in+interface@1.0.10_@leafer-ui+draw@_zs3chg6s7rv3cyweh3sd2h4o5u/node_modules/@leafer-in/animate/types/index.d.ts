import { IAnimate, IUI, IKeyframe, IAnimateOptions, IUIInputData, IAnimateEasing, IAnimateEnding, IComputedKeyframe, IFunction, ITimer, IBooleanMap, ITransition, IPercentData, IObject, ICustomEasingFunction } from '@leafer-ui/interface';
import { Eventer } from '@leafer-ui/draw';

declare class Animate extends Eventer implements IAnimate {
    target: IUI;
    keyframes: IKeyframe[];
    config?: IAnimateOptions;
    fromStyle: IUIInputData;
    toStyle: IUIInputData;
    get endingStyle(): IUIInputData;
    get started(): boolean;
    running: boolean;
    get completed(): boolean;
    destroyed: boolean;
    time: number;
    looped: number;
    easing: IAnimateEasing;
    delay: number;
    duration: number;
    ending: IAnimateEnding;
    reverse?: boolean;
    swing?: boolean;
    loop: boolean | number;
    loopDelay: number;
    speed: number;
    autoplay: boolean;
    join: boolean;
    attrs: string[];
    isTemp: boolean;
    frames: IComputedKeyframe[];
    protected nowIndex: number;
    protected get frame(): IComputedKeyframe;
    protected get frameTotalTime(): number;
    protected easingFn: IFunction;
    protected requestAnimateTime: number;
    protected playedTotalTime: number;
    protected nowReverse: boolean;
    protected timer: ITimer;
    protected attrsMap: IBooleanMap;
    get realEnding(): IAnimateEnding;
    constructor(target: IUI, keyframe: IUIInputData | IKeyframe[], options?: ITransition, isTemp?: boolean);
    init(target: IUI, keyframe: IUIInputData | IKeyframe[], options?: ITransition, isTemp?: boolean): void;
    play(): void;
    pause(): void;
    stop(): void;
    seek(time: number | IPercentData): void;
    kill(): void;
    protected create(): void;
    changeDuration(duration: number): void;
    setBefore(item: IComputedKeyframe, data: IObject, before: IObject): void;
    allocateTime(partTime: number): void;
    protected requestAnimate(): void;
    protected animate(_runtime?: number, seek?: boolean): void;
    protected start(seek?: boolean): void;
    protected begin(seek?: boolean): void;
    protected end(): void;
    protected complete(): void;
    protected setFrom(): void;
    protected setTo(): void;
    protected nextFrame(): void;
    protected reverseNextFrame(): void;
    protected transition(t: number): void;
    setStyle(style: IObject): void;
    protected clearTimer(fn?: IFunction): void;
    destroy(complete?: boolean): void;
}

declare const AnimateEasing: {
    get(easing: IAnimateEasing): any;
    register(name: string, value: ICustomEasingFunction): void;
    list: IObject;
};

declare class AnimateEvent {
    static CREATED: string;
    static PLAY: string;
    static PAUSE: string;
    static STOP: string;
    static SEEK: string;
    static UPDATE: string;
    static COMPLETED: string;
}

export { Animate, AnimateEasing, AnimateEvent };
