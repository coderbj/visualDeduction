import { ColorConvert, Text, PointerEvent, Matrix } from '@leafer-ui/core';
import { registerInnerEditor, InnerEditor } from '@leafer-in/editor';

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

const textCaseMap = {
    'none': 'none',
    'title': 'capitalize',
    'upper': 'uppercase',
    'lower': 'lowercase',
    'small-caps': 'small-caps'
};
const verticalAlignMap = {
    'top': 'flex-start',
    'middle': 'center',
    'bottom': 'flex-end'
};
function updateStyle(textDom, text, textScale) {
    const { style } = textDom;
    const { fill, padding, textWrap, textOverflow, textDecoration } = text;
    style.fontFamily = text.fontFamily;
    style.fontSize = text.fontSize * textScale + 'px';
    setFill(style, fill);
    style.fontStyle = text.italic ? 'italic' : 'normal';
    style.fontWeight = text.fontWeight;
    style.textDecoration = textDecoration === 'delete' ? 'line-through' : textDecoration;
    style.textTransform = textCaseMap[text.textCase];
    style.textAlign = text.textAlign;
    style.display = 'flex';
    style.flexDirection = 'column';
    style.justifyContent = verticalAlignMap[text.verticalAlign];
    style.lineHeight = (text.__.__lineHeight || 0) * textScale + 'px';
    style.letterSpacing = (text.__.__letterSpacing || 0) * textScale + 'px';
    if (textWrap === 'none') {
        style.whiteSpace = 'nowrap';
    }
    else if (textWrap === 'break') {
        style.wordBreak = 'break-all';
    }
    style.textIndent = (text.paraIndent || 0) * textScale + 'px';
    style.padding = padding instanceof Array ? padding.map(item => item * textScale + 'px').join(' ') : (padding || 0) * textScale + 'px';
    style.textOverflow = textOverflow === 'show' ? '' : (textOverflow === 'hide' ? 'clip' : textOverflow);
}
function setFill(style, fill) {
    let color = 'black';
    if (fill instanceof Array)
        fill = fill[0];
    if (typeof fill === 'object') {
        switch (fill.type) {
            case 'solid':
                color = ColorConvert.string(fill.color);
                break;
            case 'image':
                break;
            case 'linear':
            case 'radial':
            case 'angular':
                const stop = fill.stops[0];
                color = ColorConvert.string(typeof stop === 'string' ? stop : stop.color);
                break;
            default:
                if (fill.r !== undefined)
                    color = ColorConvert.string(fill);
        }
    }
    else {
        color = fill;
    }
    style.color = color;
}

let TextEditor = class TextEditor extends InnerEditor {
    constructor() {
        super(...arguments);
        this.config = {
            selectAll: true
        };
        this.eventIds = [];
    }
    get tag() { return 'TextEditor'; }
    onLoad() {
        const { editor } = this;
        const { config } = editor.app;
        const text = this.editTarget;
        text.visible = false;
        this.isHTMLText = !(text instanceof Text);
        this._keyEvent = config.keyEvent;
        config.keyEvent = false;
        const div = this.editDom = document.createElement('div');
        const { style } = div;
        div.contentEditable = 'true';
        style.position = 'fixed';
        style.transformOrigin = 'left top';
        style.boxSizing = 'border-box';
        this.isHTMLText ? div.innerHTML = text.text : div.innerText = text.text;
        const { view } = editor.app;
        (this.inBody = view instanceof HTMLCanvasElement) ? document.body.appendChild(div) : view.appendChild(div);
        this.eventIds = [
            editor.app.on_(PointerEvent.DOWN, (e) => {
                let { target } = e.origin, find;
                while (target) {
                    if (target === div)
                        find = true;
                    target = target.parentElement;
                }
                if (!find)
                    editor.closeInnerEditor();
            })
        ];
        this.onFocus = this.onFocus.bind(this);
        this.onInput = this.onInput.bind(this);
        this.onUpdate = this.onUpdate.bind(this);
        this.onEscape = this.onEscape.bind(this);
        div.addEventListener("focus", this.onFocus);
        div.addEventListener("input", this.onInput);
        window.addEventListener('keydown', this.onEscape);
        window.addEventListener('scroll', this.onUpdate);
        const selection = window.getSelection();
        const range = document.createRange();
        if (this.config.selectAll) {
            range.selectNodeContents(div);
        }
        else {
            const node = div.childNodes[0];
            range.setStartAfter(node);
            range.setEndAfter(node);
            range.collapse(true);
        }
        selection.removeAllRanges();
        selection.addRange(range);
    }
    onInput() {
        const { editDom } = this;
        this.editTarget.text = this.isHTMLText ? editDom.innerHTML : editDom.innerText.replace(/\n\n/, '\n');
    }
    onFocus() {
        this.editDom.style.outline = 'none';
    }
    onEscape(e) {
        if (e.code === 'Escape')
            this.editor.closeInnerEditor();
    }
    onUpdate() {
        const { editTarget: text } = this;
        let textScale = 1;
        if (!this.isHTMLText) {
            const { scaleX, scaleY } = text.worldTransform;
            textScale = Math.max(Math.abs(scaleX), Math.abs(scaleY));
            const fontSize = text.fontSize * textScale;
            if (fontSize < 12)
                textScale *= 12 / text.fontSize;
        }
        this.textScale = textScale;
        const { a, b, c, d, e, f } = new Matrix(text.worldTransform).scale(1 / textScale);
        let { x, y } = this.inBody ? text.app.clientBounds : text.app.tree.clientBounds;
        let { width, height } = text;
        x -= window.scrollX, y -= window.scrollY, width *= textScale, height *= textScale;
        const data = text.__;
        if (data.__autoWidth && data.autoSizeAlign) {
            width += 20;
            switch (data.textAlign) {
                case 'center':
                    x -= width / 2;
                    break;
                case 'right': x -= width;
            }
        }
        if (data.__autoHeight && data.autoSizeAlign) {
            height += 20;
            switch (data.verticalAlign) {
                case 'middle':
                    y -= height / 2;
                    break;
                case 'bottom': y -= height;
            }
        }
        const { style } = this.editDom;
        style.transform = `matrix(${a},${b},${c},${d},${e},${f})`;
        style.left = x + 'px';
        style.top = y + 'px';
        style.width = width + 'px';
        style.height = height + 'px';
        this.isHTMLText || updateStyle(this.editDom, text, textScale);
    }
    onUnload() {
        const { editTarget: text, editor, editDom: dom } = this;
        if (text) {
            this.onInput();
            text.visible = true;
            if (editor.app)
                editor.app.config.keyEvent = this._keyEvent;
            editor.off_(this.eventIds);
            dom.removeEventListener("focus", this.onFocus);
            dom.removeEventListener("input", this.onInput);
            window.removeEventListener('keydown', this.onEscape);
            window.removeEventListener('scroll', this.onUpdate);
            dom.remove();
            this.editDom = this.eventIds = undefined;
        }
    }
};
TextEditor = __decorate([
    registerInnerEditor()
], TextEditor);

export { TextEditor };
