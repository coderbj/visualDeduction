import { INumber, IPointData, IBoolean, IValue, IPathCommandData, IPathCommandObject, IPathString } from '@leafer/interface';
import { LeafData } from '@leafer/core';
import { IUIData, IUI, IGroupData, IBoxData, ILeaferData, IObject, IJSONOptions, IFrameData, ILineData, IRectData, IEllipseData, IPolygonData, IStarData, IPathData, IPenData, ITextData, IFontWeight, IImageData, IImage, ICanvasData } from '@leafer-ui/interface';

declare class UIData extends LeafData implements IUIData {
    __leaf: IUI;
    get scale(): INumber | IPointData;
    __blendLayer?: boolean;
    __isFills?: boolean;
    __isStrokes?: boolean;
    get __strokeWidth(): number;
    get __hasStroke(): boolean;
    get __hasMultiPaint(): boolean;
    __pixelFill?: boolean;
    __pixelStroke?: boolean;
    get __clipAfterFill(): boolean;
    __needComputePaint: boolean;
    protected _visible?: IBoolean;
    protected _width?: INumber;
    protected _height?: INumber;
    protected _fill?: IValue;
    protected _stroke?: IValue;
    protected _path: IPathCommandData;
    protected _shadow?: IValue;
    protected _innerShadow?: IValue;
    get __autoWidth(): boolean;
    get __autoHeight(): boolean;
    get __autoSide(): boolean;
    get __autoSize(): boolean;
    protected setVisible(value: IBoolean): void;
    protected setWidth(value: INumber): void;
    protected setHeight(value: INumber): void;
    protected setFill(value: IValue): void;
    protected setStroke(value: IValue): void;
    protected setPath(value: IPathCommandData | IPathCommandObject[] | IPathString): void;
    protected setShadow(value: IValue): void;
    protected setInnerShadow(value: IValue): void;
    __computePaint(): void;
}

declare class GroupData extends UIData implements IGroupData {
}

declare class BoxData extends GroupData implements IBoxData {
    get __boxStroke(): boolean;
    get __drawAfterFill(): boolean;
    get __clipAfterFill(): boolean;
}

declare class LeaferData extends GroupData implements ILeaferData {
    __getInputData(names?: string[] | IObject, options?: IJSONOptions): IObject;
}

declare class FrameData extends BoxData implements IFrameData {
}

declare class LineData extends UIData implements ILineData {
}

declare class RectData extends UIData implements IRectData {
    get __boxStroke(): boolean;
}

declare class EllipseData extends UIData implements IEllipseData {
    get __boxStroke(): boolean;
}

declare class PolygonData extends UIData implements IPolygonData {
}

declare class StarData extends UIData implements IStarData {
}

declare class PathData extends UIData implements IPathData {
    get __pathInputed(): number;
}

declare class PenData extends GroupData implements IPenData {
}

declare class TextData extends UIData implements ITextData {
    get __useNaturalRatio(): boolean;
    protected _fontWeight?: number;
    setFontWeight(value: IFontWeight): void;
}

declare class ImageData extends RectData implements IImageData {
    __leaf: IImage;
    protected _url: string;
    protected setUrl(value: string): void;
    __setImageFill(value: string): void;
    __getData(): IObject;
    __getInputData(names?: string[] | IObject, options?: IJSONOptions): IObject;
}

declare class CanvasData extends RectData implements ICanvasData {
    get __isCanvas(): boolean;
    get __drawAfterFill(): boolean;
    __getInputData(names?: string[] | IObject, options?: IJSONOptions): IObject;
}

export { BoxData, CanvasData, EllipseData, FrameData, GroupData, ImageData, LeaferData, LineData, PathData, PenData, PolygonData, RectData, StarData, TextData, UIData };
