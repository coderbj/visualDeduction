import { decorateLeafAttr, attr, State } from '@leafer-ui/draw';
import { MathHelper, State as State$1, isNull, PointerEvent, UI, dataType } from '@leafer-ui/core';

function stateType(defaultValue, styleName) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value);
            this.waitLeafer(() => styleName ? State.setStyleName(this, styleName, value) : State.set(this, value));
        }
    }));
}
function stateStyleType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value);
            this.__layout.stateStyleChanged = true;
        }
    }));
}

function findParentButton(leaf, button) {
    if (button && button !== true)
        return button;
    if (!leaf.button) {
        let { parent } = leaf;
        for (let i = 0; i < 2; i++) {
            if (parent) {
                if (parent.button)
                    return parent;
                parent = parent.parent;
            }
        }
    }
    return null;
}

function setStyle(leaf, style) {
    if (typeof style !== 'object')
        style = undefined;
    updateStyle(leaf, style, 'in');
}
function unsetStyle(leaf, style) {
    const { normalStyle } = leaf;
    if (typeof style !== 'object')
        style = undefined;
    if (normalStyle) {
        if (!style)
            style = normalStyle;
        updateStyle(leaf, style, 'out');
    }
}
const emprtyStyle = {};
function updateStyle(leaf, style, type) {
    const { normalStyle } = leaf;
    if (!style)
        style = emprtyStyle;
    if (style.scale) {
        MathHelper.assignScale(style, style.scale);
        delete style.scale;
    }
    if (style === emprtyStyle || !State$1.canAnimate)
        type = null;
    let transition = type ? getTransition(type, style, leaf) : false;
    const fromStyle = transition ? getFromStyle(leaf, style) : undefined;
    leaf.killAnimate('transition');
    if (normalStyle)
        leaf.set(normalStyle, true);
    const statesStyle = getStyle(leaf);
    if (statesStyle) {
        const { animation } = statesStyle;
        if (animation) {
            const animate = leaf.animate(animation, undefined, 'animation', true);
            Object.assign(statesStyle, animate.endingStyle);
            if (type !== 'in' || style.animation !== animation)
                animate.kill();
            else
                transition = false;
            delete statesStyle.animation;
        }
        leaf.normalStyle = filterStyle(statesStyle, leaf);
        leaf.set(statesStyle, true);
    }
    else {
        leaf.normalStyle = undefined;
    }
    if (transition) {
        const toStyle = filterStyle(fromStyle, leaf);
        leaf.set(fromStyle, true);
        leaf.animate([fromStyle, toStyle], transition, 'transition', true);
    }
    leaf.__layout.stateStyleChanged = false;
}
function getStyle(leaf) {
    let exist;
    const style = {}, { state } = leaf, button = findParentButton(leaf);
    const stateStyle = state && leaf.states[state];
    if (stateStyle && State$1.isState(state, leaf, button))
        exist = assign(style, stateStyle);
    const selectedStyle = style.selectedStyle || leaf.selectedStyle;
    if (selectedStyle && State$1.isSelected(leaf, button))
        exist = assign(style, selectedStyle);
    if (State$1.isDisabled(leaf, button)) {
        const disabledStyle = style.disabledStyle || leaf.disabledStyle;
        if (disabledStyle)
            exist = assign(style, disabledStyle);
    }
    else {
        const focusStyle = style.focusStyle || leaf.focusStyle;
        if (focusStyle && State$1.isFocus(leaf, button))
            exist = assign(style, focusStyle);
        const hoverStyle = style.hoverStyle || leaf.hoverStyle;
        if (hoverStyle && State$1.isHover(leaf, button))
            exist = assign(style, hoverStyle);
        const pressStyle = style.pressStyle || leaf.pressStyle;
        if (pressStyle && State$1.isPress(leaf, button))
            exist = assign(style, pressStyle);
    }
    return exist ? style : undefined;
}
function filterStyle(style, data, addStyle, useAnimateExcludes) {
    const to = addStyle ? style : {}, forStyle = addStyle || style;
    for (let key in forStyle) {
        if (useAnimateExcludes) {
            if (!State$1.animateExcludes[key])
                to[key] = data[key];
        }
        else
            to[key] = data[key];
    }
    return to;
}
function filterAnimateStyle(style, data, addStyle) {
    return filterStyle(style, data, addStyle, true);
}
function getFromStyle(leaf, style) {
    const fromStyle = filterAnimateStyle(style, leaf), animate = leaf.animate();
    if (animate)
        filterAnimateStyle(fromStyle, leaf, animate.fromStyle);
    return fromStyle;
}
function getTransition(type, style, data) {
    let name = type === 'in' ? 'transition' : 'transitionOut';
    if (type === 'out' && isNull(data[name]) && isNull(style[name]))
        name = 'transition';
    return isNull(style[name]) ? data[name] : style[name];
}
function assign(style, stateStyle) {
    Object.assign(style, stateStyle);
    return true;
}

function setPointerState(leaf, stateName) {
    const style = leaf[stateName];
    if (style)
        setStyle(leaf, style);
    if (leaf.button)
        setChildrenState(leaf.children, stateName);
}
function setState(leaf, stateName, stateStyle) {
    if (!stateStyle)
        stateStyle = leaf.states[stateName];
    setStyle(leaf, stateStyle);
    if (leaf.button)
        setChildrenState(leaf.children, null, stateName);
}
function setChildrenState(children, stateType, state) {
    if (!children)
        return;
    let leaf, update;
    for (let i = 0, len = children.length; i < len; i++) {
        leaf = children[i];
        if (stateType) {
            update = true;
            switch (stateType) {
                case 'hoverStyle':
                    if (State$1.isHover(leaf))
                        update = false;
                    break;
                case 'pressStyle':
                    if (State$1.isPress(leaf))
                        update = false;
                    break;
                case 'focusStyle':
                    if (State$1.isFocus(leaf))
                        update = false;
            }
            if (update)
                setPointerState(leaf, stateType);
        }
        else if (state)
            setState(leaf, state);
        if (leaf.isBranch)
            setChildrenState(leaf.children, stateType, state);
    }
}

function unsetPointerState(leaf, stateName) {
    const style = leaf[stateName];
    if (style)
        unsetStyle(leaf, style);
    if (leaf.button)
        unsetChildrenState(leaf.children, stateName);
}
function unsetState(leaf, stateName, stateStyle) {
    unsetStyle(leaf, stateStyle);
    if (leaf.button)
        unsetChildrenState(leaf.children, null, stateName);
}
function unsetChildrenState(children, stateType, state) {
    if (!children)
        return;
    let leaf;
    for (let i = 0, len = children.length; i < len; i++) {
        leaf = children[i];
        if (stateType)
            unsetPointerState(leaf, stateType);
        else if (state)
            unsetState(leaf, state);
        if (leaf.isBranch)
            unsetChildrenState(leaf.children, stateType, state);
    }
}

function updateEventStyle(leaf, eventType) {
    switch (eventType) {
        case PointerEvent.ENTER:
            setPointerState(leaf, 'hoverStyle');
            break;
        case PointerEvent.LEAVE:
            unsetPointerState(leaf, 'hoverStyle');
            break;
        case PointerEvent.DOWN:
            setPointerState(leaf, 'pressStyle');
            break;
        case PointerEvent.UP:
            unsetPointerState(leaf, 'pressStyle');
            break;
    }
}

function checkPointerState(fnName, leaf, button) {
    let find;
    const interaction = leaf.leafer ? leaf.leafer.interaction : null;
    if (interaction) {
        find = interaction[fnName](leaf);
        if (!find && button) {
            const parentButton = findParentButton(leaf, button);
            if (parentButton)
                find = interaction[fnName](parentButton);
        }
    }
    return find;
}
function checkFixedState(attrName, leaf, button) {
    let find = leaf[attrName];
    if (!find && button) {
        const parentButton = findParentButton(leaf, button);
        if (parentButton)
            find = parentButton[attrName];
    }
    return find;
}
function checkState(stateName, leaf, button) {
    let find = leaf.states[stateName];
    if (!find && button) {
        const parentButton = findParentButton(leaf, button);
        if (parentButton)
            find = parentButton.states[stateName];
    }
    return !!find;
}

State$1.animateExcludes = {
    animation: 1,
    animationOut: 1,
    transition: 1,
    transitionOut: 1,
    states: 1,
    state: 1,
    normalStyle: 1,
    hoverStyle: 1,
    pressStyle: 1,
    focusStyle: 1,
    selectedStyle: 1,
    disabledStyle: 1
};
State$1.isState = function (state, leaf, button) { return checkState(state, leaf, button); };
State$1.isSelected = function (leaf, button) { return checkFixedState('selected', leaf, button); };
State$1.isDisabled = function (leaf, button) { return checkFixedState('disabled', leaf, button); };
State$1.isFocus = function (leaf, button) { return checkPointerState('isFocus', leaf, button); };
State$1.isHover = function (leaf, button) { return checkPointerState('isHover', leaf, button); };
State$1.isPress = function (leaf, button) { return checkPointerState('isPress', leaf, button); };
State$1.isDrag = function (leaf, button) { return checkPointerState('isDrag', leaf, button); };
State$1.setStyleName = function (leaf, stateType, value) { value ? setState(leaf, stateType, leaf[stateType]) : unsetState(leaf, stateType, leaf[stateType]); };
State$1.set = function (leaf, stateName) { const style = leaf.states[stateName]; style ? setState(leaf, stateName, style) : unsetState(leaf, stateName, style); };
State$1.getStyle = getStyle;
State$1.updateStyle = updateStyle;
State$1.updateEventStyle = updateEventStyle;
const ui = UI.prototype;
stateType(false, 'selectedStyle')(ui, 'selected');
stateType(false, 'disabledStyle')(ui, 'disabled');
stateStyleType({})(ui, 'states');
stateType('')(ui, 'state');
dataType()(ui, 'normalStyle');
stateStyleType()(ui, 'hoverStyle');
stateStyleType()(ui, 'pressStyle');
stateStyleType()(ui, 'focusStyle');
stateStyleType()(ui, 'selectedStyle');
stateStyleType()(ui, 'disabledStyle');
dataType(false)(ui, 'button');
ui.focus = function (value = true) {
    this.waitLeafer(() => {
        let { focusData } = this.app.interaction;
        if (value) {
            if (focusData)
                focusData.focus(false);
            focusData = this;
        }
        else
            focusData = null;
        this.app.interaction.focusData = focusData;
        value ? setPointerState(this, 'focusStyle') : unsetPointerState(this, 'focusStyle');
    });
};
ui.updateState = function () {
    State$1.updateStyle(this, undefined, 'in');
};

export { stateStyleType, stateType };
