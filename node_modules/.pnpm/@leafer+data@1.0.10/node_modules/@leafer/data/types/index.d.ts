import { IObject, IBooleanMap, ILeafData, ILeaf, IPathCommandData, IJSONOptions } from '@leafer/interface';

declare const DataHelper: {
    default<T>(t: T, defaultData: IObject): T;
    assign(t: IObject, merge: IObject): void;
    copyAttrs(t: IObject, from: IObject, include: string[]): IObject;
    clone(data: unknown): IObject;
    toMap(list: string[]): IBooleanMap;
};

declare class LeafData implements ILeafData {
    __leaf: ILeaf;
    __input: IObject;
    __middle: IObject;
    __single: boolean;
    __naturalWidth?: number;
    __naturalHeight?: number;
    __pathForRender?: IPathCommandData;
    get __useNaturalRatio(): boolean;
    get __isLinePath(): boolean;
    get __blendMode(): string;
    constructor(leaf: ILeaf);
    __get(name: string): any;
    __getData(): IObject;
    __setInput(name: string, value: any): void;
    __getInput(name: string): any;
    __removeInput(name: string): void;
    __getInputData(names?: string[] | IObject, options?: IJSONOptions): IObject;
    __setMiddle(name: string, value: any): void;
    __getMiddle(name: string): any;
    __checkSingle(): void;
    __removeNaturalSize(): void;
    destroy(): void;
}

declare enum Answer {
    No = 0,
    Yes = 1,
    NoAndSkip = 2,
    YesAndSkip = 3
}
declare const emptyData: IObject;
declare function isNull(value: any): boolean;

export { Answer, DataHelper, LeafData, emptyData, isNull };
