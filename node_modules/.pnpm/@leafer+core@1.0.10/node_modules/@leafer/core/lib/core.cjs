'use strict';

const Platform = {
    toURL(text, fileType) {
        let url = encodeURIComponent(text);
        if (fileType === 'text')
            url = 'data:text/plain;charset=utf-8,' + url;
        else if (fileType === 'svg')
            url = 'data:image/svg+xml,' + url;
        return url;
    },
    image: {
        hitCanvasSize: 100,
        maxCacheSize: 2560 * 1600,
        maxPatternSize: 4096 * 2160,
        crossOrigin: 'anonymous',
        getRealURL(url) {
            const { prefix, suffix } = Platform.image;
            if (suffix && !url.startsWith('data:') && !url.startsWith('blob:'))
                url += (url.includes("?") ? "&" : "?") + suffix;
            if (prefix && url[0] === '/')
                url = prefix + url;
            return url;
        }
    }
};

const Creator = {};

const IncrementId = {
    RUNTIME: 'runtime',
    LEAF: 'leaf',
    TASK: 'task',
    CNAVAS: 'canvas',
    IMAGE: 'image',
    types: {},
    create(typeName) {
        const { types } = I$1;
        if (types[typeName]) {
            return types[typeName]++;
        }
        else {
            types[typeName] = 1;
            return 0;
        }
    }
};
const I$1 = IncrementId;

const { round, pow: pow$1, PI: PI$2 } = Math;
const MathHelper = {
    within(value, min, max) {
        if (typeof min === 'object')
            max = min.max, min = min.min;
        if (min !== undefined && value < min)
            value = min;
        if (max !== undefined && value > max)
            value = max;
        return value;
    },
    fourNumber(num, maxValue) {
        let data;
        if (num instanceof Array) {
            switch (num.length) {
                case 4:
                    data = maxValue === undefined ? num : [...num];
                    break;
                case 2:
                    data = [num[0], num[1], num[0], num[1]];
                    break;
                case 3:
                    data = [num[0], num[1], num[2], num[1]];
                    break;
                case 1:
                    num = num[0];
                    break;
                default:
                    num = 0;
            }
        }
        if (!data)
            data = [num, num, num, num];
        if (maxValue)
            for (let i = 0; i < 4; i++)
                if (data[i] > maxValue)
                    data[i] = maxValue;
        return data;
    },
    formatRotation(rotation, unsign) {
        rotation %= 360;
        if (unsign) {
            if (rotation < 0)
                rotation += 360;
        }
        else {
            if (rotation > 180)
                rotation -= 360;
            if (rotation < -180)
                rotation += 360;
        }
        return MathHelper.float(rotation);
    },
    getGapRotation(addRotation, gap, oldRotation = 0) {
        let rotation = addRotation + oldRotation;
        if (gap > 1) {
            const r = Math.abs(rotation % gap);
            if (r < 1 || r > gap - 1)
                rotation = Math.round(rotation / gap) * gap;
        }
        return rotation - oldRotation;
    },
    float(num, maxLength) {
        const a = maxLength ? pow$1(10, maxLength) : 1000000000000;
        num = round(num * a) / a;
        return num === -0 ? 0 : num;
    },
    getScaleData(scale, size, originSize, scaleData) {
        if (!scaleData)
            scaleData = {};
        if (size) {
            scaleData.scaleX = (typeof size === 'number' ? size : size.width) / originSize.width;
            scaleData.scaleY = (typeof size === 'number' ? size : size.height) / originSize.height;
        }
        else if (scale)
            MathHelper.assignScale(scaleData, scale);
        return scaleData;
    },
    assignScale(scaleData, scale) {
        if (typeof scale === 'number') {
            scaleData.scaleX = scaleData.scaleY = scale;
        }
        else {
            scaleData.scaleX = scale.x;
            scaleData.scaleY = scale.y;
        }
    }
};
const OneRadian = PI$2 / 180;
const PI2 = PI$2 * 2;
const PI_2 = PI$2 / 2;
function getPointData() { return { x: 0, y: 0 }; }
function getBoundsData() { return { x: 0, y: 0, width: 0, height: 0 }; }
function getMatrixData() { return { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0 }; }

const { sin: sin$3, cos: cos$3, acos, sqrt: sqrt$3 } = Math;
const { float: float$1 } = MathHelper;
const tempPoint$3 = {};
function getWorld() {
    return Object.assign(Object.assign(Object.assign({}, getMatrixData()), getBoundsData()), { scaleX: 1, scaleY: 1, rotation: 0, skewX: 0, skewY: 0 });
}
const MatrixHelper = {
    defaultMatrix: getMatrixData(),
    defaultWorld: getWorld(),
    tempMatrix: {},
    set(t, a = 1, b = 0, c = 0, d = 1, e = 0, f = 0) {
        t.a = a;
        t.b = b;
        t.c = c;
        t.d = d;
        t.e = e;
        t.f = f;
    },
    get: getMatrixData,
    getWorld,
    copy(t, matrix) {
        t.a = matrix.a;
        t.b = matrix.b;
        t.c = matrix.c;
        t.d = matrix.d;
        t.e = matrix.e;
        t.f = matrix.f;
    },
    translate(t, x, y) {
        t.e += x;
        t.f += y;
    },
    translateInner(t, x, y, hasOrigin) {
        t.e += t.a * x + t.c * y;
        t.f += t.b * x + t.d * y;
        if (hasOrigin)
            t.e -= x, t.f -= y;
    },
    scale(t, scaleX, scaleY = scaleX) {
        t.a *= scaleX;
        t.b *= scaleX;
        t.c *= scaleY;
        t.d *= scaleY;
    },
    scaleOfOuter(t, origin, scaleX, scaleY) {
        M$6.toInnerPoint(t, origin, tempPoint$3);
        M$6.scaleOfInner(t, tempPoint$3, scaleX, scaleY);
    },
    scaleOfInner(t, origin, scaleX, scaleY = scaleX) {
        M$6.translateInner(t, origin.x, origin.y);
        M$6.scale(t, scaleX, scaleY);
        M$6.translateInner(t, -origin.x, -origin.y);
    },
    rotate(t, rotation) {
        const { a, b, c, d } = t;
        rotation *= OneRadian;
        const cosR = cos$3(rotation);
        const sinR = sin$3(rotation);
        t.a = a * cosR - b * sinR;
        t.b = a * sinR + b * cosR;
        t.c = c * cosR - d * sinR;
        t.d = c * sinR + d * cosR;
    },
    rotateOfOuter(t, origin, rotation) {
        M$6.toInnerPoint(t, origin, tempPoint$3);
        M$6.rotateOfInner(t, tempPoint$3, rotation);
    },
    rotateOfInner(t, origin, rotation) {
        M$6.translateInner(t, origin.x, origin.y);
        M$6.rotate(t, rotation);
        M$6.translateInner(t, -origin.x, -origin.y);
    },
    skew(t, skewX, skewY) {
        const { a, b, c, d } = t;
        if (skewY) {
            skewY *= OneRadian;
            t.a = a + c * skewY;
            t.b = b + d * skewY;
        }
        if (skewX) {
            skewX *= OneRadian;
            t.c = c + a * skewX;
            t.d = d + b * skewX;
        }
    },
    skewOfOuter(t, origin, skewX, skewY) {
        M$6.toInnerPoint(t, origin, tempPoint$3);
        M$6.skewOfInner(t, tempPoint$3, skewX, skewY);
    },
    skewOfInner(t, origin, skewX, skewY = 0) {
        M$6.translateInner(t, origin.x, origin.y);
        M$6.skew(t, skewX, skewY);
        M$6.translateInner(t, -origin.x, -origin.y);
    },
    multiply(t, child) {
        const { a, b, c, d, e, f } = t;
        t.a = child.a * a + child.b * c;
        t.b = child.a * b + child.b * d;
        t.c = child.c * a + child.d * c;
        t.d = child.c * b + child.d * d;
        t.e = child.e * a + child.f * c + e;
        t.f = child.e * b + child.f * d + f;
    },
    multiplyParent(t, parent, to, abcdChanged, childScaleData, scrollData) {
        let { e, f } = t;
        if (scrollData)
            e += scrollData.scrollX, f += scrollData.scrollY;
        to || (to = t);
        if (abcdChanged === undefined)
            abcdChanged = t.a !== 1 || t.b || t.c || t.d !== 1;
        if (abcdChanged) {
            const { a, b, c, d } = t;
            to.a = a * parent.a + b * parent.c;
            to.b = a * parent.b + b * parent.d;
            to.c = c * parent.a + d * parent.c;
            to.d = c * parent.b + d * parent.d;
            if (childScaleData) {
                to.scaleX = parent.scaleX * childScaleData.scaleX;
                to.scaleY = parent.scaleY * childScaleData.scaleY;
            }
        }
        else {
            to.a = parent.a;
            to.b = parent.b;
            to.c = parent.c;
            to.d = parent.d;
            if (childScaleData) {
                to.scaleX = parent.scaleX;
                to.scaleY = parent.scaleY;
            }
        }
        to.e = e * parent.a + f * parent.c + parent.e;
        to.f = e * parent.b + f * parent.d + parent.f;
    },
    divide(t, child) {
        M$6.multiply(t, M$6.tempInvert(child));
    },
    divideParent(t, parent) {
        M$6.multiplyParent(t, M$6.tempInvert(parent));
    },
    tempInvert(t) {
        const { tempMatrix } = M$6;
        M$6.copy(tempMatrix, t);
        M$6.invert(tempMatrix);
        return tempMatrix;
    },
    invert(t) {
        const { a, b, c, d, e, f } = t;
        if (!b && !c) {
            if (a === 1 && d === 1) {
                t.e = -e;
                t.f = -f;
            }
            else {
                const s = 1 / (a * d);
                t.a = d * s;
                t.d = a * s;
                t.e = -e * d * s;
                t.f = -f * a * s;
            }
        }
        else {
            const s = 1 / (a * d - b * c);
            t.a = d * s;
            t.b = -b * s;
            t.c = -c * s;
            t.d = a * s;
            t.e = -(e * d - f * c) * s;
            t.f = -(f * a - e * b) * s;
        }
    },
    toOuterPoint(t, inner, to, distance) {
        const { x, y } = inner;
        to || (to = inner);
        to.x = x * t.a + y * t.c;
        to.y = x * t.b + y * t.d;
        if (!distance) {
            to.x += t.e;
            to.y += t.f;
        }
    },
    toInnerPoint(t, outer, to, distance) {
        const { a, b, c, d } = t;
        const s = 1 / (a * d - b * c);
        const { x, y } = outer;
        to || (to = outer);
        to.x = (x * d - y * c) * s;
        to.y = (y * a - x * b) * s;
        if (!distance) {
            const { e, f } = t;
            to.x -= (e * d - f * c) * s;
            to.y -= (f * a - e * b) * s;
        }
    },
    setLayout(t, layout, origin, around, bcChanged) {
        const { x, y, scaleX, scaleY } = layout;
        if (bcChanged === undefined)
            bcChanged = layout.rotation || layout.skewX || layout.skewY;
        if (bcChanged) {
            const { rotation, skewX, skewY } = layout;
            const r = rotation * OneRadian;
            const cosR = cos$3(r);
            const sinR = sin$3(r);
            if (skewX || skewY) {
                const sx = skewX * OneRadian;
                const sy = skewY * OneRadian;
                t.a = (cosR + sy * -sinR) * scaleX;
                t.b = (sinR + sy * cosR) * scaleX;
                t.c = (-sinR + sx * cosR) * scaleY;
                t.d = (cosR + sx * sinR) * scaleY;
            }
            else {
                t.a = cosR * scaleX;
                t.b = sinR * scaleX;
                t.c = -sinR * scaleY;
                t.d = cosR * scaleY;
            }
        }
        else {
            t.a = scaleX;
            t.b = 0;
            t.c = 0;
            t.d = scaleY;
        }
        t.e = x;
        t.f = y;
        if (origin = origin || around)
            M$6.translateInner(t, -origin.x, -origin.y, !around);
    },
    getLayout(t, origin, around, firstSkewY) {
        const { a, b, c, d, e, f } = t;
        let x = e, y = f, scaleX, scaleY, rotation, skewX, skewY;
        if (b || c) {
            const s = a * d - b * c;
            if (c && !firstSkewY) {
                scaleX = sqrt$3(a * a + b * b);
                scaleY = s / scaleX;
                const cosR = a / scaleX;
                rotation = b > 0 ? acos(cosR) : -acos(cosR);
            }
            else {
                scaleY = sqrt$3(c * c + d * d);
                scaleX = s / scaleY;
                const cosR = c / scaleY;
                rotation = PI_2 - (d > 0 ? acos(-cosR) : -acos(cosR));
            }
            const cosR = float$1(cos$3(rotation));
            const sinR = sin$3(rotation);
            scaleX = float$1(scaleX), scaleY = float$1(scaleY);
            skewX = cosR ? float$1((c / scaleY + sinR) / cosR / OneRadian, 9) : 0;
            skewY = cosR ? float$1((b / scaleX - sinR) / cosR / OneRadian, 9) : 0;
            rotation = float$1(rotation / OneRadian);
        }
        else {
            scaleX = a;
            scaleY = d;
            rotation = skewX = skewY = 0;
        }
        if (origin = around || origin) {
            x += origin.x * a + origin.y * c;
            y += origin.x * b + origin.y * d;
            if (!around)
                x -= origin.x, y -= origin.y;
        }
        return { x, y, scaleX, scaleY, rotation, skewX, skewY };
    },
    withScale(t, scaleX, scaleY = scaleX) {
        const world = t;
        if (!scaleX || !scaleY) {
            const { a, b, c, d } = t;
            if (b || c) {
                scaleX = sqrt$3(a * a + b * b);
                scaleY = (a * d - b * c) / scaleX;
            }
            else {
                scaleX = a;
                scaleY = d;
            }
        }
        world.scaleX = scaleX;
        world.scaleY = scaleY;
        return world;
    },
    reset(t) {
        M$6.set(t);
    }
};
const M$6 = MatrixHelper;

const { toInnerPoint: toInnerPoint$2, toOuterPoint: toOuterPoint$3 } = MatrixHelper;
const { sin: sin$2, cos: cos$2, abs: abs$2, sqrt: sqrt$2, atan2: atan2$2, min: min$1, PI: PI$1 } = Math;
const PointHelper = {
    defaultPoint: getPointData(),
    tempPoint: {},
    tempRadiusPoint: {},
    set(t, x = 0, y = 0) {
        t.x = x;
        t.y = y;
    },
    setRadius(t, x, y) {
        t.radiusX = x;
        t.radiusY = y === undefined ? x : y;
    },
    copy(t, point) {
        t.x = point.x;
        t.y = point.y;
    },
    copyFrom(t, x, y) {
        t.x = x;
        t.y = y;
    },
    move(t, x, y) {
        t.x += x;
        t.y += y;
    },
    scale(t, scaleX, scaleY = scaleX) {
        if (t.x)
            t.x *= scaleX;
        if (t.y)
            t.y *= scaleY;
    },
    scaleOf(t, origin, scaleX, scaleY = scaleX) {
        t.x += (t.x - origin.x) * (scaleX - 1);
        t.y += (t.y - origin.y) * (scaleY - 1);
    },
    rotate(t, rotation, origin) {
        if (!origin)
            origin = P$5.defaultPoint;
        rotation *= OneRadian;
        const cosR = cos$2(rotation);
        const sinR = sin$2(rotation);
        const rx = t.x - origin.x;
        const ry = t.y - origin.y;
        t.x = origin.x + rx * cosR - ry * sinR;
        t.y = origin.y + rx * sinR + ry * cosR;
    },
    tempToInnerOf(t, matrix) {
        const { tempPoint: temp } = P$5;
        copy$7(temp, t);
        toInnerPoint$2(matrix, temp, temp);
        return temp;
    },
    tempToOuterOf(t, matrix) {
        const { tempPoint: temp } = P$5;
        copy$7(temp, t);
        toOuterPoint$3(matrix, temp, temp);
        return temp;
    },
    tempToInnerRadiusPointOf(t, matrix) {
        const { tempRadiusPoint: temp } = P$5;
        copy$7(temp, t);
        P$5.toInnerRadiusPointOf(t, matrix, temp);
        return temp;
    },
    toInnerRadiusPointOf(t, matrix, to) {
        to || (to = t);
        toInnerPoint$2(matrix, t, to);
        to.radiusX = Math.abs(t.radiusX / matrix.scaleX);
        to.radiusY = Math.abs(t.radiusY / matrix.scaleY);
    },
    toInnerOf(t, matrix, to) {
        toInnerPoint$2(matrix, t, to);
    },
    toOuterOf(t, matrix, to) {
        toOuterPoint$3(matrix, t, to);
    },
    getCenter(t, to) {
        return { x: t.x + (to.x - t.x) / 2, y: t.y + (to.y - t.y) / 2 };
    },
    getCenterX(x1, x2) {
        return x1 + (x2 - x1) / 2;
    },
    getCenterY(y1, y2) {
        return y1 + (y2 - y1) / 2;
    },
    getDistance(t, point) {
        return getDistanceFrom(t.x, t.y, point.x, point.y);
    },
    getDistanceFrom(x1, y1, x2, y2) {
        const x = abs$2(x2 - x1);
        const y = abs$2(y2 - y1);
        return sqrt$2(x * x + y * y);
    },
    getMinDistanceFrom(x1, y1, x2, y2, x3, y3) {
        return min$1(getDistanceFrom(x1, y1, x2, y2), getDistanceFrom(x2, y2, x3, y3));
    },
    getAngle(t, to) {
        return getAtan2(t, to) / OneRadian;
    },
    getRotation(t, origin, to, toOrigin) {
        if (!toOrigin)
            toOrigin = origin;
        return P$5.getRadianFrom(t.x, t.y, origin.x, origin.y, to.x, to.y, toOrigin.x, toOrigin.y) / OneRadian;
    },
    getRadianFrom(fromX, fromY, originX, originY, toX, toY, toOriginX, toOriginY) {
        if (toOriginX === undefined)
            toOriginX = originX, toOriginY = originY;
        let fromAngle = atan2$2(fromY - originY, fromX - originX);
        let toAngle = atan2$2(toY - toOriginY, toX - toOriginX);
        const radian = toAngle - fromAngle;
        return radian < -PI$1 ? radian + PI2 : radian;
    },
    getAtan2(t, to) {
        return atan2$2(to.y - t.y, to.x - t.x);
    },
    getDistancePoint(t, to, distance, changeTo) {
        const r = getAtan2(t, to);
        to = changeTo ? to : {};
        to.x = t.x + cos$2(r) * distance;
        to.y = t.y + sin$2(r) * distance;
        return to;
    },
    toNumberPoints(originPoints) {
        let points = originPoints;
        if (typeof originPoints[0] === 'object')
            points = [], originPoints.forEach(p => points.push(p.x, p.y));
        return points;
    },
    reset(t) {
        P$5.reset(t);
    }
};
const P$5 = PointHelper;
const { getDistanceFrom, copy: copy$7, getAtan2 } = P$5;

class Point {
    constructor(x, y) {
        this.set(x, y);
    }
    set(x, y) {
        typeof x === 'object' ? PointHelper.copy(this, x) : PointHelper.set(this, x, y);
        return this;
    }
    get() {
        const { x, y } = this;
        return { x, y };
    }
    clone() {
        return new Point(this);
    }
    move(x, y) {
        PointHelper.move(this, x, y);
        return this;
    }
    scale(scaleX, scaleY) {
        PointHelper.scale(this, scaleX, scaleY);
        return this;
    }
    scaleOf(origin, scaleX, scaleY) {
        PointHelper.scaleOf(this, origin, scaleX, scaleY);
        return this;
    }
    rotate(rotation, origin) {
        PointHelper.rotate(this, rotation, origin);
        return this;
    }
    rotateOf(origin, rotation) {
        PointHelper.rotate(this, rotation, origin);
        return this;
    }
    getRotation(origin, to, toOrigin) {
        return PointHelper.getRotation(this, origin, to, toOrigin);
    }
    toInnerOf(matrix, to) {
        PointHelper.toInnerOf(this, matrix, to);
        return this;
    }
    toOuterOf(matrix, to) {
        PointHelper.toOuterOf(this, matrix, to);
        return this;
    }
    getCenter(to) {
        return new Point(PointHelper.getCenter(this, to));
    }
    getDistance(to) {
        return PointHelper.getDistance(this, to);
    }
    getDistancePoint(to, distance, changeTo) {
        return new Point(PointHelper.getDistancePoint(this, to, distance, changeTo));
    }
    getAngle(to) {
        return PointHelper.getAngle(this, to);
    }
    getAtan2(to) {
        return PointHelper.getAtan2(this, to);
    }
    reset() {
        PointHelper.reset(this);
        return this;
    }
}
const tempPoint$2 = new Point();

class Matrix {
    constructor(a, b, c, d, e, f) {
        this.set(a, b, c, d, e, f);
    }
    set(a, b, c, d, e, f) {
        typeof a === 'object' ? MatrixHelper.copy(this, a) : MatrixHelper.set(this, a, b, c, d, e, f);
        return this;
    }
    setWith(dataWithScale) {
        MatrixHelper.copy(this, dataWithScale);
        this.scaleX = dataWithScale.scaleX;
        this.scaleY = dataWithScale.scaleY;
        return this;
    }
    get() {
        const { a, b, c, d, e, f } = this;
        return { a, b, c, d, e, f };
    }
    clone() {
        return new Matrix(this);
    }
    translate(x, y) {
        MatrixHelper.translate(this, x, y);
        return this;
    }
    translateInner(x, y) {
        MatrixHelper.translateInner(this, x, y);
        return this;
    }
    scale(x, y) {
        MatrixHelper.scale(this, x, y);
        return this;
    }
    scaleWith(x, y) {
        MatrixHelper.scale(this, x, y);
        this.scaleX *= x;
        this.scaleY *= y || x;
        return this;
    }
    scaleOfOuter(origin, x, y) {
        MatrixHelper.scaleOfOuter(this, origin, x, y);
        return this;
    }
    scaleOfInner(origin, x, y) {
        MatrixHelper.scaleOfInner(this, origin, x, y);
        return this;
    }
    rotate(angle) {
        MatrixHelper.rotate(this, angle);
        return this;
    }
    rotateOfOuter(origin, angle) {
        MatrixHelper.rotateOfOuter(this, origin, angle);
        return this;
    }
    rotateOfInner(origin, angle) {
        MatrixHelper.rotateOfInner(this, origin, angle);
        return this;
    }
    skew(x, y) {
        MatrixHelper.skew(this, x, y);
        return this;
    }
    skewOfOuter(origin, x, y) {
        MatrixHelper.skewOfOuter(this, origin, x, y);
        return this;
    }
    skewOfInner(origin, x, y) {
        MatrixHelper.skewOfInner(this, origin, x, y);
        return this;
    }
    multiply(child) {
        MatrixHelper.multiply(this, child);
        return this;
    }
    multiplyParent(parent) {
        MatrixHelper.multiplyParent(this, parent);
        return this;
    }
    divide(child) {
        MatrixHelper.divide(this, child);
        return this;
    }
    divideParent(parent) {
        MatrixHelper.divideParent(this, parent);
        return this;
    }
    invert() {
        MatrixHelper.invert(this);
        return this;
    }
    invertWith() {
        MatrixHelper.invert(this);
        this.scaleX = 1 / this.scaleX;
        this.scaleY = 1 / this.scaleY;
        return this;
    }
    toOuterPoint(inner, to, distance) {
        MatrixHelper.toOuterPoint(this, inner, to, distance);
    }
    toInnerPoint(outer, to, distance) {
        MatrixHelper.toInnerPoint(this, outer, to, distance);
    }
    setLayout(data, origin, around) {
        MatrixHelper.setLayout(this, data, origin, around);
        return this;
    }
    getLayout(origin, around, firstSkewY) {
        return MatrixHelper.getLayout(this, origin, around, firstSkewY);
    }
    withScale(scaleX, scaleY) {
        return MatrixHelper.withScale(this, scaleX, scaleY);
    }
    reset() {
        MatrixHelper.reset(this);
    }
}
const tempMatrix = new Matrix();

const TwoPointBoundsHelper = {
    tempPointBounds: {},
    setPoint(t, minX, minY) {
        t.minX = t.maxX = minX;
        t.minY = t.maxY = minY;
    },
    addPoint(t, x, y) {
        t.minX = x < t.minX ? x : t.minX;
        t.minY = y < t.minY ? y : t.minY;
        t.maxX = x > t.maxX ? x : t.maxX;
        t.maxY = y > t.maxY ? y : t.maxY;
    },
    addBounds(t, x, y, width, height) {
        addPoint$3(t, x, y);
        addPoint$3(t, x + width, y + height);
    },
    copy(t, pb) {
        t.minX = pb.minX;
        t.minY = pb.minY;
        t.maxX = pb.maxX;
        t.maxY = pb.maxY;
    },
    addPointBounds(t, pb) {
        t.minX = pb.minX < t.minX ? pb.minX : t.minX;
        t.minY = pb.minY < t.minY ? pb.minY : t.minY;
        t.maxX = pb.maxX > t.maxX ? pb.maxX : t.maxX;
        t.maxY = pb.maxY > t.maxY ? pb.maxY : t.maxY;
    },
    toBounds(t, setBounds) {
        setBounds.x = t.minX;
        setBounds.y = t.minY;
        setBounds.width = t.maxX - t.minX;
        setBounds.height = t.maxY - t.minY;
    }
};
const { addPoint: addPoint$3 } = TwoPointBoundsHelper;

const { tempPointBounds: tempPointBounds$1, setPoint: setPoint$2, addPoint: addPoint$2, toBounds: toBounds$2 } = TwoPointBoundsHelper;
const { toOuterPoint: toOuterPoint$2 } = MatrixHelper;
const { float, fourNumber } = MathHelper;
const { floor, ceil: ceil$1 } = Math;
let right, bottom, boundsRight, boundsBottom;
const point = {};
const toPoint$2 = {};
const BoundsHelper = {
    tempBounds: {},
    set(t, x = 0, y = 0, width = 0, height = 0) {
        t.x = x;
        t.y = y;
        t.width = width;
        t.height = height;
    },
    copy(t, bounds) {
        t.x = bounds.x;
        t.y = bounds.y;
        t.width = bounds.width;
        t.height = bounds.height;
    },
    copyAndSpread(t, bounds, spread, isShrink, side) {
        const { x, y, width, height } = bounds;
        if (spread instanceof Array) {
            const four = fourNumber(spread);
            isShrink
                ? B.set(t, x + four[3], y + four[0], width - four[1] - four[3], height - four[2] - four[0])
                : B.set(t, x - four[3], y - four[0], width + four[1] + four[3], height + four[2] + four[0]);
        }
        else {
            if (isShrink)
                spread = -spread;
            B.set(t, x - spread, y - spread, width + spread * 2, height + spread * 2);
        }
        if (side) {
            if (side === 'width')
                t.y = y, t.height = height;
            else
                t.x = x, t.width = width;
        }
    },
    minX(t) { return t.width > 0 ? t.x : t.x + t.width; },
    minY(t) { return t.height > 0 ? t.y : t.y + t.height; },
    maxX(t) { return t.width > 0 ? t.x + t.width : t.x; },
    maxY(t) { return t.height > 0 ? t.y + t.height : t.y; },
    move(t, x, y) {
        t.x += x;
        t.y += y;
    },
    getByMove(t, x, y) {
        t = Object.assign({}, t);
        B.move(t, x, y);
        return t;
    },
    toOffsetOutBounds(t, to, parent) {
        if (!to) {
            to = t;
        }
        else {
            copy$6(to, t);
        }
        if (parent) {
            to.offsetX = -(B.maxX(parent) - t.x);
            to.offsetY = -(B.maxY(parent) - t.y);
        }
        else {
            to.offsetX = t.x + t.width;
            to.offsetY = t.y + t.height;
        }
        B.move(to, -to.offsetX, -to.offsetY);
    },
    scale(t, scaleX, scaleY = scaleX) {
        PointHelper.scale(t, scaleX, scaleY);
        t.width *= scaleX;
        t.height *= scaleY;
    },
    scaleOf(t, origin, scaleX, scaleY = scaleX) {
        PointHelper.scaleOf(t, origin, scaleX, scaleY);
        t.width *= scaleX;
        t.height *= scaleY;
    },
    tempToOuterOf(t, matrix) {
        B.copy(B.tempBounds, t);
        B.toOuterOf(B.tempBounds, matrix);
        return B.tempBounds;
    },
    getOuterOf(t, matrix) {
        t = Object.assign({}, t);
        B.toOuterOf(t, matrix);
        return t;
    },
    toOuterOf(t, matrix, to) {
        to || (to = t);
        if (matrix.b === 0 && matrix.c === 0) {
            const { a, d } = matrix;
            if (a > 0) {
                to.width = t.width * a;
                to.x = matrix.e + t.x * a;
            }
            else {
                to.width = t.width * -a;
                to.x = matrix.e + t.x * a - to.width;
            }
            if (d > 0) {
                to.height = t.height * d;
                to.y = matrix.f + t.y * d;
            }
            else {
                to.height = t.height * -d;
                to.y = matrix.f + t.y * d - to.height;
            }
        }
        else {
            point.x = t.x;
            point.y = t.y;
            toOuterPoint$2(matrix, point, toPoint$2);
            setPoint$2(tempPointBounds$1, toPoint$2.x, toPoint$2.y);
            point.x = t.x + t.width;
            toOuterPoint$2(matrix, point, toPoint$2);
            addPoint$2(tempPointBounds$1, toPoint$2.x, toPoint$2.y);
            point.y = t.y + t.height;
            toOuterPoint$2(matrix, point, toPoint$2);
            addPoint$2(tempPointBounds$1, toPoint$2.x, toPoint$2.y);
            point.x = t.x;
            toOuterPoint$2(matrix, point, toPoint$2);
            addPoint$2(tempPointBounds$1, toPoint$2.x, toPoint$2.y);
            toBounds$2(tempPointBounds$1, to);
        }
    },
    toInnerOf(t, matrix, to) {
        to || (to = t);
        B.move(to, -matrix.e, -matrix.f);
        B.scale(to, 1 / matrix.a, 1 / matrix.d);
    },
    getFitMatrix(t, put, baseScale = 1) {
        const scale = Math.min(baseScale, Math.min(t.width / put.width, t.height / put.height));
        return new Matrix(scale, 0, 0, scale, -put.x * scale, -put.y * scale);
    },
    getSpread(t, spread, side) {
        const n = {};
        B.copyAndSpread(n, t, spread, false, side);
        return n;
    },
    spread(t, spread, side) {
        B.copyAndSpread(t, t, spread, false, side);
    },
    shrink(t, shrink, side) {
        B.copyAndSpread(t, t, shrink, true, side);
    },
    ceil(t) {
        const { x, y } = t;
        t.x = floor(t.x);
        t.y = floor(t.y);
        t.width = x > t.x ? ceil$1(t.width + x - t.x) : ceil$1(t.width);
        t.height = y > t.y ? ceil$1(t.height + y - t.y) : ceil$1(t.height);
    },
    unsign(t) {
        if (t.width < 0) {
            t.x += t.width;
            t.width = -t.width;
        }
        if (t.height < 0) {
            t.y += t.height;
            t.height = -t.height;
        }
    },
    float(t, maxLength) {
        t.x = float(t.x, maxLength);
        t.y = float(t.y, maxLength);
        t.width = float(t.width, maxLength);
        t.height = float(t.height, maxLength);
    },
    add(t, bounds, isPoint) {
        right = t.x + t.width;
        bottom = t.y + t.height;
        boundsRight = bounds.x;
        boundsBottom = bounds.y;
        if (!isPoint) {
            boundsRight += bounds.width;
            boundsBottom += bounds.height;
        }
        right = right > boundsRight ? right : boundsRight;
        bottom = bottom > boundsBottom ? bottom : boundsBottom;
        t.x = t.x < bounds.x ? t.x : bounds.x;
        t.y = t.y < bounds.y ? t.y : bounds.y;
        t.width = right - t.x;
        t.height = bottom - t.y;
    },
    addList(t, list) {
        B.setListWithFn(t, list, undefined, true);
    },
    setList(t, list, addMode = false) {
        B.setListWithFn(t, list, undefined, addMode);
    },
    addListWithFn(t, list, boundsDataFn) {
        B.setListWithFn(t, list, boundsDataFn, true);
    },
    setListWithFn(t, list, boundsDataFn, addMode = false) {
        let bounds, first = true;
        for (let i = 0, len = list.length; i < len; i++) {
            bounds = boundsDataFn ? boundsDataFn(list[i]) : list[i];
            if (bounds && (bounds.width || bounds.height)) {
                if (first) {
                    first = false;
                    if (!addMode)
                        copy$6(t, bounds);
                }
                else {
                    add(t, bounds);
                }
            }
        }
        if (first)
            B.reset(t);
    },
    setPoints(t, points) {
        points.forEach((point, index) => index === 0 ? setPoint$2(tempPointBounds$1, point.x, point.y) : addPoint$2(tempPointBounds$1, point.x, point.y));
        toBounds$2(tempPointBounds$1, t);
    },
    setPoint(t, point) {
        B.set(t, point.x, point.y);
    },
    addPoint(t, point) {
        add(t, point, true);
    },
    getPoints(t) {
        const { x, y, width, height } = t;
        return [
            { x, y },
            { x: x + width, y },
            { x: x + width, y: y + height },
            { x, y: y + height }
        ];
    },
    hitRadiusPoint(t, point, pointMatrix) {
        if (pointMatrix)
            point = PointHelper.tempToInnerRadiusPointOf(point, pointMatrix);
        return (point.x >= t.x - point.radiusX && point.x <= t.x + t.width + point.radiusX) && (point.y >= t.y - point.radiusY && point.y <= t.y + t.height + point.radiusY);
    },
    hitPoint(t, point, pointMatrix) {
        if (pointMatrix)
            point = PointHelper.tempToInnerOf(point, pointMatrix);
        return (point.x >= t.x && point.x <= t.x + t.width) && (point.y >= t.y && point.y <= t.y + t.height);
    },
    hit(t, other, otherMatrix) {
        if (otherMatrix)
            other = B.tempToOuterOf(other, otherMatrix);
        return !((t.y + t.height < other.y) || (other.y + other.height < t.y) || (t.x + t.width < other.x) || (other.x + other.width < t.x));
    },
    includes(t, other, otherMatrix) {
        if (otherMatrix)
            other = B.tempToOuterOf(other, otherMatrix);
        return (t.x <= other.x) && (t.y <= other.y) && (t.x + t.width >= other.x + other.width) && (t.y + t.height >= other.y + other.height);
    },
    getIntersectData(t, other, otherMatrix) {
        if (otherMatrix)
            other = B.tempToOuterOf(other, otherMatrix);
        if (!B.hit(t, other))
            return getBoundsData();
        let { x, y, width, height } = other;
        right = x + width;
        bottom = y + height;
        boundsRight = t.x + t.width;
        boundsBottom = t.y + t.height;
        x = x > t.x ? x : t.x;
        y = y > t.y ? y : t.y;
        right = right < boundsRight ? right : boundsRight;
        bottom = bottom < boundsBottom ? bottom : boundsBottom;
        width = right - x;
        height = bottom - y;
        return { x, y, width, height };
    },
    intersect(t, other, otherMatrix) {
        B.copy(t, B.getIntersectData(t, other, otherMatrix));
    },
    isSame(t, bounds) {
        return t.x === bounds.x && t.y === bounds.y && t.width === bounds.width && t.height === bounds.height;
    },
    isEmpty(t) {
        return t.x === 0 && t.y === 0 && t.width === 0 && t.height === 0;
    },
    reset(t) {
        B.set(t);
    }
};
const B = BoundsHelper;
const { add, copy: copy$6 } = B;

class Bounds {
    get minX() { return BoundsHelper.minX(this); }
    get minY() { return BoundsHelper.minY(this); }
    get maxX() { return BoundsHelper.maxX(this); }
    get maxY() { return BoundsHelper.maxY(this); }
    constructor(x, y, width, height) {
        this.set(x, y, width, height);
    }
    set(x, y, width, height) {
        typeof x === 'object' ? BoundsHelper.copy(this, x) : BoundsHelper.set(this, x, y, width, height);
        return this;
    }
    get() {
        const { x, y, width, height } = this;
        return { x, y, width, height };
    }
    clone() {
        return new Bounds(this);
    }
    move(x, y) {
        BoundsHelper.move(this, x, y);
        return this;
    }
    scale(scaleX, scaleY) {
        BoundsHelper.scale(this, scaleX, scaleY);
        return this;
    }
    scaleOf(origin, scaleX, scaleY) {
        BoundsHelper.scaleOf(this, origin, scaleX, scaleY);
        return this;
    }
    toOuterOf(matrix, to) {
        BoundsHelper.toOuterOf(this, matrix, to);
        return this;
    }
    toInnerOf(matrix, to) {
        BoundsHelper.toInnerOf(this, matrix, to);
        return this;
    }
    getFitMatrix(put, baseScale) {
        return BoundsHelper.getFitMatrix(this, put, baseScale);
    }
    spread(fourNumber, side) {
        BoundsHelper.spread(this, fourNumber, side);
        return this;
    }
    shrink(fourNumber, side) {
        BoundsHelper.shrink(this, fourNumber, side);
        return this;
    }
    ceil() {
        BoundsHelper.ceil(this);
        return this;
    }
    unsign() {
        BoundsHelper.unsign(this);
        return this;
    }
    float(maxLength) {
        BoundsHelper.float(this, maxLength);
        return this;
    }
    add(bounds) {
        BoundsHelper.add(this, bounds);
        return this;
    }
    addList(boundsList) {
        BoundsHelper.setList(this, boundsList, true);
        return this;
    }
    setList(boundsList) {
        BoundsHelper.setList(this, boundsList);
        return this;
    }
    addListWithFn(list, boundsDataFn) {
        BoundsHelper.setListWithFn(this, list, boundsDataFn, true);
        return this;
    }
    setListWithFn(list, boundsDataFn) {
        BoundsHelper.setListWithFn(this, list, boundsDataFn);
        return this;
    }
    setPoint(point) {
        BoundsHelper.setPoint(this, point);
        return this;
    }
    setPoints(points) {
        BoundsHelper.setPoints(this, points);
        return this;
    }
    addPoint(point) {
        BoundsHelper.addPoint(this, point);
        return this;
    }
    getPoints() {
        return BoundsHelper.getPoints(this);
    }
    hitPoint(point, pointMatrix) {
        return BoundsHelper.hitPoint(this, point, pointMatrix);
    }
    hitRadiusPoint(point, pointMatrix) {
        return BoundsHelper.hitRadiusPoint(this, point, pointMatrix);
    }
    hit(bounds, boundsMatrix) {
        return BoundsHelper.hit(this, bounds, boundsMatrix);
    }
    includes(bounds, boundsMatrix) {
        return BoundsHelper.includes(this, bounds, boundsMatrix);
    }
    intersect(bounds, boundsMatrix) {
        BoundsHelper.intersect(this, bounds, boundsMatrix);
        return this;
    }
    getIntersect(bounds, boundsMatrix) {
        return new Bounds(BoundsHelper.getIntersectData(this, bounds, boundsMatrix));
    }
    isSame(bounds) {
        return BoundsHelper.isSame(this, bounds);
    }
    isEmpty() {
        return BoundsHelper.isEmpty(this);
    }
    reset() {
        BoundsHelper.reset(this);
    }
}
const tempBounds = new Bounds();

class AutoBounds {
    constructor(top, right, bottom, left, width, height) {
        typeof top === 'object' ? this.copy(top) : this.set(top, right, bottom, left, width, height);
    }
    set(top = 0, right = 0, bottom = 0, left = 0, width = 0, height = 0) {
        this.top = top;
        this.right = right;
        this.bottom = bottom;
        this.left = left;
        this.width = width;
        this.height = height;
    }
    copy(autoSize) {
        const { top, right, bottom, left, width, height } = autoSize;
        this.set(top, right, bottom, left, width, height);
    }
    getBoundsFrom(parent) {
        const { top, right, bottom, left, width, height } = this;
        return new Bounds(left, top, width ? width : parent.width - left - right, height ? height : parent.height - top - bottom);
    }
}

exports.Direction4 = void 0;
(function (Direction4) {
    Direction4[Direction4["top"] = 0] = "top";
    Direction4[Direction4["right"] = 1] = "right";
    Direction4[Direction4["bottom"] = 2] = "bottom";
    Direction4[Direction4["left"] = 3] = "left";
})(exports.Direction4 || (exports.Direction4 = {}));
exports.Direction9 = void 0;
(function (Direction9) {
    Direction9[Direction9["topLeft"] = 0] = "topLeft";
    Direction9[Direction9["top"] = 1] = "top";
    Direction9[Direction9["topRight"] = 2] = "topRight";
    Direction9[Direction9["right"] = 3] = "right";
    Direction9[Direction9["bottomRight"] = 4] = "bottomRight";
    Direction9[Direction9["bottom"] = 5] = "bottom";
    Direction9[Direction9["bottomLeft"] = 6] = "bottomLeft";
    Direction9[Direction9["left"] = 7] = "left";
    Direction9[Direction9["center"] = 8] = "center";
    Direction9[Direction9["top-left"] = 0] = "top-left";
    Direction9[Direction9["top-right"] = 2] = "top-right";
    Direction9[Direction9["bottom-right"] = 4] = "bottom-right";
    Direction9[Direction9["bottom-left"] = 6] = "bottom-left";
})(exports.Direction9 || (exports.Direction9 = {}));

const directionData = [
    { x: 0, y: 0 },
    { x: 0.5, y: 0 },
    { x: 1, y: 0 },
    { x: 1, y: 0.5 },
    { x: 1, y: 1 },
    { x: 0.5, y: 1 },
    { x: 0, y: 1 },
    { x: 0, y: 0.5 },
    { x: 0.5, y: 0.5 }
];
directionData.forEach(item => item.type = 'percent');
const AroundHelper = {
    directionData,
    tempPoint: {},
    get,
    toPoint(around, bounds, to, onlySize, pointBounds) {
        const point = get(around);
        to.x = point.x;
        to.y = point.y;
        if (point.type === 'percent') {
            to.x *= bounds.width;
            to.y *= bounds.height;
            if (pointBounds) {
                to.x -= pointBounds.x;
                to.y -= pointBounds.y;
                if (point.x)
                    to.x -= (point.x === 1) ? pointBounds.width : (point.x === 0.5 ? point.x * pointBounds.width : 0);
                if (point.y)
                    to.y -= (point.y === 1) ? pointBounds.height : (point.y === 0.5 ? point.y * pointBounds.height : 0);
            }
        }
        if (!onlySize) {
            to.x += bounds.x;
            to.y += bounds.y;
        }
    }
};
function get(around) {
    return typeof around === 'string' ? directionData[exports.Direction9[around]] : around;
}

const { toPoint: toPoint$1 } = AroundHelper;
const AlignHelper = {
    toPoint(align, contentBounds, bounds, to, onlySize) {
        toPoint$1(align, bounds, to, onlySize, contentBounds);
    }
};

const StringNumberMap = {
    '0': 1,
    '1': 1,
    '2': 1,
    '3': 1,
    '4': 1,
    '5': 1,
    '6': 1,
    '7': 1,
    '8': 1,
    '9': 1,
    '.': 1,
    'e': 1,
    'E': 1
};

class Debug {
    constructor(name) {
        this.repeatMap = {};
        this.name = name;
    }
    static get(name) {
        return new Debug(name);
    }
    static set filter(name) {
        this.filterList = getNameList(name);
    }
    static set exclude(name) {
        this.excludeList = getNameList(name);
    }
    log(...messages) {
        if (D$4.enable) {
            if (D$4.filterList.length && D$4.filterList.every(name => name !== this.name))
                return;
            if (D$4.excludeList.length && D$4.excludeList.some(name => name === this.name))
                return;
            console.log('%c' + this.name, 'color:#21ae62', ...messages);
        }
    }
    tip(...messages) {
        if (D$4.enable)
            this.warn(...messages);
    }
    warn(...messages) {
        if (D$4.showWarn)
            console.warn(this.name, ...messages);
    }
    repeat(name, ...messages) {
        if (!this.repeatMap[name]) {
            this.warn('repeat:' + name, ...messages);
            this.repeatMap[name] = true;
        }
    }
    error(...messages) {
        try {
            throw new Error();
        }
        catch (e) {
            console.error(this.name, ...messages, e);
        }
    }
}
Debug.filterList = [];
Debug.excludeList = [];
Debug.showWarn = true;
function getNameList(name) {
    if (!name)
        name = [];
    else if (typeof name === 'string')
        name = [name];
    return name;
}
const D$4 = Debug;

const debug$8 = Debug.get('RunTime');
const Run = {
    currentId: 0,
    currentName: '',
    idMap: {},
    nameMap: {},
    nameToIdMap: {},
    start(name, microsecond) {
        const id = IncrementId.create(IncrementId.RUNTIME);
        R.currentId = R.idMap[id] = microsecond ? performance.now() : Date.now();
        R.currentName = R.nameMap[id] = name;
        R.nameToIdMap[name] = id;
        return id;
    },
    end(id, microsecond) {
        const time = R.idMap[id], name = R.nameMap[id];
        const duration = microsecond ? (performance.now() - time) / 1000 : Date.now() - time;
        R.idMap[id] = R.nameMap[id] = R.nameToIdMap[name] = undefined;
        debug$8.log(name, duration, 'ms');
    },
    endOfName(name, microsecond) {
        const id = R.nameToIdMap[name];
        if (id !== undefined)
            R.end(id, microsecond);
    }
};
const R = Run;

function needPlugin(name) {
    console.error('need plugin: @leafer-in/' + name);
}

const debug$7 = Debug.get('UICreator');
const UICreator = {
    list: {},
    register(UI) {
        const { __tag: tag } = UI.prototype;
        if (list$1[tag])
            debug$7.repeat(tag);
        list$1[tag] = UI;
    },
    get(tag, data, x, y, width, height) {
        if (!list$1[tag])
            debug$7.error('not register ' + tag);
        const ui = new list$1[tag](data);
        if (x !== undefined) {
            ui.x = x;
            if (y)
                ui.y = y;
            if (width)
                ui.width = width;
            if (height)
                ui.height = height;
        }
        return ui;
    }
};
const { list: list$1 } = UICreator;

const debug$6 = Debug.get('EventCreator');
const EventCreator = {
    nameList: {},
    register(Event) {
        let name;
        Object.keys(Event).forEach(key => {
            name = Event[key];
            if (typeof name === 'string')
                nameList[name] && debug$6.repeat(name), nameList[name] = Event;
        });
    },
    changeName(oldName, newName) {
        const Event = nameList[oldName];
        if (Event) {
            const constName = Object.keys(Event).find(key => Event[key] === oldName);
            if (constName) {
                Event[constName] = newName;
                nameList[newName] = Event;
            }
        }
    },
    has(type) {
        return !!this.nameList[type];
    },
    get(type, ...params) {
        return new nameList[type](...params);
    }
};
const { nameList } = EventCreator;

class CanvasManager {
    constructor() {
        this.list = [];
    }
    add(canvas) {
        canvas.manager = this;
        this.list.push(canvas);
    }
    get(size) {
        let old;
        const { list } = this;
        for (let i = 0, len = list.length; i < len; i++) {
            old = list[i];
            if (old.recycled && old.isSameSize(size)) {
                old.recycled = false;
                old.manager || (old.manager = this);
                return old;
            }
        }
        const canvas = Creator.canvas(size);
        this.add(canvas);
        return canvas;
    }
    recycle(old) {
        old.recycled = true;
    }
    clearRecycled() {
        let canvas;
        const filter = [];
        for (let i = 0, len = this.list.length; i < len; i++) {
            canvas = this.list[i];
            canvas.recycled ? canvas.destroy() : filter.push(canvas);
        }
        this.list = filter;
    }
    clear() {
        this.list.forEach(item => { item.destroy(); });
        this.list.length = 0;
    }
    destroy() {
        this.clear();
    }
}

const DataHelper = {
    default(t, defaultData) {
        assign(defaultData, t);
        assign(t, defaultData);
        return t;
    },
    assign(t, merge) {
        let value;
        Object.keys(merge).forEach(key => {
            var _a;
            value = merge[key];
            if ((value === null || value === void 0 ? void 0 : value.constructor) === Object) {
                (((_a = t[key]) === null || _a === void 0 ? void 0 : _a.constructor) === Object) ? assign(t[key], merge[key]) : t[key] = merge[key];
            }
            else {
                t[key] = merge[key];
            }
        });
    },
    copyAttrs(t, from, include) {
        include.forEach(key => {
            if (from[key] !== undefined)
                t[key] = from[key];
        });
        return t;
    },
    clone(data) {
        return JSON.parse(JSON.stringify(data));
    },
    toMap(list) {
        const map = {};
        for (let i = 0, len = list.length; i < len; i++)
            map[list[i]] = true;
        return map;
    }
};
const { assign } = DataHelper;

class LeafData {
    get __useNaturalRatio() { return true; }
    get __isLinePath() {
        const { path } = this;
        return path && path.length === 6 && path[0] === 1;
    }
    get __blendMode() {
        if (this.eraser && this.eraser !== 'path')
            return 'destination-out';
        const { blendMode } = this;
        return blendMode === 'pass-through' ? null : blendMode;
    }
    constructor(leaf) {
        this.__leaf = leaf;
    }
    __get(name) {
        if (this.__input) {
            const value = this.__input[name];
            if (value !== undefined)
                return value;
        }
        return this[name];
    }
    __getData() {
        const data = { tag: this.__leaf.tag }, { __input } = this;
        let inputValue;
        for (let key in this) {
            if (key[0] !== '_') {
                inputValue = __input ? __input[key] : undefined;
                data[key] = (inputValue === undefined) ? this[key] : inputValue;
            }
        }
        return data;
    }
    __setInput(name, value) {
        this.__input || (this.__input = {});
        this.__input[name] = value;
    }
    __getInput(name) {
        if (this.__input) {
            const value = this.__input[name];
            if (value !== undefined)
                return value;
        }
        if (name === 'path' && !this.__pathInputed)
            return;
        return this['_' + name];
    }
    __removeInput(name) {
        if (this.__input && this.__input[name] !== undefined)
            this.__input[name] = undefined;
    }
    __getInputData(names, options) {
        const data = {};
        if (names) {
            if (names instanceof Array) {
                for (let name of names)
                    data[name] = this.__getInput(name);
            }
            else {
                for (let name in names)
                    data[name] = this.__getInput(name);
            }
        }
        else {
            let value, inputValue, { __input } = this;
            data.tag = this.__leaf.tag;
            for (let key in this) {
                if (key[0] !== '_') {
                    value = this['_' + key];
                    if (value !== undefined) {
                        if (key === 'path' && !this.__pathInputed)
                            continue;
                        inputValue = __input ? __input[key] : undefined;
                        data[key] = (inputValue === undefined) ? value : inputValue;
                    }
                }
            }
        }
        if (options) {
            if (options.matrix) {
                const { a, b, c, d, e, f } = this.__leaf.__localMatrix;
                data.matrix = { a, b, c, d, e, f };
            }
        }
        return data;
    }
    __setMiddle(name, value) {
        this.__middle || (this.__middle = {});
        this.__middle[name] = value;
    }
    __getMiddle(name) {
        return this.__middle && this.__middle[name];
    }
    __checkSingle() {
        const t = this;
        if (t.blendMode === 'pass-through') {
            const leaf = this.__leaf;
            if ((t.opacity < 1 && (leaf.isBranch || t.__hasMultiPaint)) || leaf.__hasEraser || t.eraser) {
                t.__single = true;
            }
            else if (t.__single) {
                t.__single = false;
            }
        }
        else {
            t.__single = true;
        }
    }
    __removeNaturalSize() {
        this.__naturalWidth = this.__naturalHeight = undefined;
    }
    destroy() {
        this.__input = this.__middle = null;
    }
}

exports.Answer = void 0;
(function (Answer) {
    Answer[Answer["No"] = 0] = "No";
    Answer[Answer["Yes"] = 1] = "Yes";
    Answer[Answer["NoAndSkip"] = 2] = "NoAndSkip";
    Answer[Answer["YesAndSkip"] = 3] = "YesAndSkip";
})(exports.Answer || (exports.Answer = {}));
const emptyData = {};
function isNull(value) {
    return value === undefined || value === null;
}

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol */


function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

function contextAttr(realName) {
    return (target, key) => {
        if (!realName)
            realName = key;
        Object.defineProperty(target, key, {
            get() { return this.context[realName]; },
            set(value) { this.context[realName] = value; }
        });
    };
}
const contextMethodNameList = [];
function contextMethod() {
    return (_target, key) => {
        contextMethodNameList.push(key);
    };
}
const emptyArray = [];
class Canvas {
    set blendMode(value) {
        if (value === 'normal')
            value = 'source-over';
        this.context.globalCompositeOperation = value;
    }
    get blendMode() {
        return this.context.globalCompositeOperation;
    }
    set dashPattern(value) {
        this.context.setLineDash(value || emptyArray);
    }
    get dashPattern() {
        return this.context.getLineDash();
    }
    __bindContext() {
        let method;
        contextMethodNameList.forEach(name => {
            method = this.context[name];
            if (method)
                this[name] = method.bind(this.context);
        });
        this.textBaseline = "alphabetic";
    }
    setTransform(_a, _b, _c, _d, _e, _f) { }
    resetTransform() { }
    getTransform() { return void 0; }
    save() { }
    restore() { }
    transform(a, b, c, d, e, f) {
        if (typeof a === 'object') {
            this.context.transform(a.a, a.b, a.c, a.d, a.e, a.f);
        }
        else {
            this.context.transform(a, b, c, d, e, f);
        }
    }
    translate(_x, _y) { }
    scale(_x, _y) { }
    rotate(_angle) { }
    fill(_path2d, _rule) { }
    stroke(_path2d) { }
    clip(_path2d, _rule) { }
    fillRect(_x, _y, _width, _height) { }
    strokeRect(_x, _y, _width, _height) { }
    clearRect(_x, _y, _width, _height) { }
    drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh) {
        switch (arguments.length) {
            case 9:
                if (sx < 0) {
                    const d = (-sx / sw) * dw;
                    sw += sx;
                    sx = 0;
                    dx += d;
                    dw -= d;
                }
                if (sy < 0) {
                    const d = (-sy / sh) * dh;
                    sh += sy;
                    sy = 0;
                    dy += d;
                    dh -= d;
                }
                this.context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh);
                break;
            case 5:
                this.context.drawImage(image, sx, sy, sw, sh);
                break;
            case 3:
                this.context.drawImage(image, sx, sy);
        }
    }
    beginPath() { }
    moveTo(_x, _y) { }
    lineTo(_x, _y) { }
    bezierCurveTo(_cp1x, _cp1y, _cp2x, _cp2y, _x, _y) { }
    quadraticCurveTo(_cpx, _cpy, _x, _y) { }
    closePath() { }
    arc(_x, _y, _radius, _startAngle, _endAngle, _anticlockwise) { }
    arcTo(_x1, _y1, _x2, _y2, _radius) { }
    ellipse(_x, _y, _radiusX, _radiusY, _rotation, _startAngle, _endAngle, _anticlockwise) { }
    rect(_x, _y, _width, _height) { }
    roundRect(_x, _y, _width, _height, _radius) { }
    createConicGradient(_startAngle, _x, _y) { return void 0; }
    createLinearGradient(_x0, _y0, _x1, _y1) { return void 0; }
    createPattern(_image, _repetition) { return void 0; }
    createRadialGradient(_x0, _y0, _r0, _x1, _y1, _r1) { return void 0; }
    fillText(_text, _x, _y, _maxWidth) { }
    measureText(_text) { return void 0; }
    strokeText(_text, _x, _y, _maxWidth) { }
    destroy() {
        this.context = null;
    }
}
__decorate([
    contextAttr('imageSmoothingEnabled')
], Canvas.prototype, "smooth", void 0);
__decorate([
    contextAttr('imageSmoothingQuality')
], Canvas.prototype, "smoothLevel", void 0);
__decorate([
    contextAttr('globalAlpha')
], Canvas.prototype, "opacity", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fillStyle", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "strokeStyle", void 0);
__decorate([
    contextAttr('lineWidth')
], Canvas.prototype, "strokeWidth", void 0);
__decorate([
    contextAttr('lineCap')
], Canvas.prototype, "strokeCap", void 0);
__decorate([
    contextAttr('lineJoin')
], Canvas.prototype, "strokeJoin", void 0);
__decorate([
    contextAttr('lineDashOffset')
], Canvas.prototype, "dashOffset", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "miterLimit", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowBlur", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowColor", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowOffsetX", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "shadowOffsetY", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "filter", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "font", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fontKerning", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fontStretch", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "fontVariantCaps", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "textAlign", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "textBaseline", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "textRendering", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "wordSpacing", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "letterSpacing", void 0);
__decorate([
    contextAttr()
], Canvas.prototype, "direction", void 0);
__decorate([
    contextMethod()
], Canvas.prototype, "setTransform", null);
__decorate([
    contextMethod()
], Canvas.prototype, "resetTransform", null);
__decorate([
    contextMethod()
], Canvas.prototype, "getTransform", null);
__decorate([
    contextMethod()
], Canvas.prototype, "save", null);
__decorate([
    contextMethod()
], Canvas.prototype, "restore", null);
__decorate([
    contextMethod()
], Canvas.prototype, "translate", null);
__decorate([
    contextMethod()
], Canvas.prototype, "scale", null);
__decorate([
    contextMethod()
], Canvas.prototype, "rotate", null);
__decorate([
    contextMethod()
], Canvas.prototype, "fill", null);
__decorate([
    contextMethod()
], Canvas.prototype, "stroke", null);
__decorate([
    contextMethod()
], Canvas.prototype, "clip", null);
__decorate([
    contextMethod()
], Canvas.prototype, "fillRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "strokeRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "clearRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "beginPath", null);
__decorate([
    contextMethod()
], Canvas.prototype, "moveTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "lineTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "bezierCurveTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "quadraticCurveTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "closePath", null);
__decorate([
    contextMethod()
], Canvas.prototype, "arc", null);
__decorate([
    contextMethod()
], Canvas.prototype, "arcTo", null);
__decorate([
    contextMethod()
], Canvas.prototype, "ellipse", null);
__decorate([
    contextMethod()
], Canvas.prototype, "rect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "roundRect", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createConicGradient", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createLinearGradient", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createPattern", null);
__decorate([
    contextMethod()
], Canvas.prototype, "createRadialGradient", null);
__decorate([
    contextMethod()
], Canvas.prototype, "fillText", null);
__decorate([
    contextMethod()
], Canvas.prototype, "measureText", null);
__decorate([
    contextMethod()
], Canvas.prototype, "strokeText", null);

const { copy: copy$5 } = MatrixHelper;
const minSize = { width: 1, height: 1, pixelRatio: 1 };
const canvasSizeAttrs = ['width', 'height', 'pixelRatio'];
class LeaferCanvasBase extends Canvas {
    get width() { return this.size.width; }
    get height() { return this.size.height; }
    get pixelRatio() { return this.size.pixelRatio; }
    get pixelWidth() { return this.width * this.pixelRatio; }
    get pixelHeight() { return this.height * this.pixelRatio; }
    get allowBackgroundColor() { return this.view && this.parentView; }
    constructor(config, manager) {
        super();
        this.size = {};
        this.worldTransform = {};
        if (!config)
            config = minSize;
        if (!config.pixelRatio)
            config.pixelRatio = Platform.devicePixelRatio;
        this.manager = manager;
        this.innerId = IncrementId.create(IncrementId.CNAVAS);
        const { width, height, pixelRatio } = config;
        this.autoLayout = !width || !height;
        this.size.pixelRatio = pixelRatio;
        this.config = config;
        this.init();
    }
    init() { }
    __createContext() {
        const { view } = this;
        const { contextSettings } = this.config;
        this.context = contextSettings ? view.getContext('2d', contextSettings) : view.getContext('2d');
        this.__bindContext();
    }
    export(_filename, _options) { return undefined; }
    toBlob(_type, _quality) { return undefined; }
    toDataURL(_type, _quality) { return undefined; }
    saveAs(_filename, _quality) { return undefined; }
    resize(size) {
        if (this.isSameSize(size))
            return;
        let takeCanvas;
        if (this.context && !this.unreal && this.width) {
            takeCanvas = this.getSameCanvas();
            takeCanvas.copyWorld(this);
        }
        const s = this.size;
        DataHelper.copyAttrs(s, size, canvasSizeAttrs);
        canvasSizeAttrs.forEach(key => s[key] || (s[key] = 1));
        this.bounds = new Bounds(0, 0, this.width, this.height);
        if (this.context && !this.unreal) {
            this.updateViewSize();
            this.smooth = this.config.smooth;
        }
        this.updateClientBounds();
        if (this.context && !this.unreal && takeCanvas) {
            this.clearWorld(takeCanvas.bounds);
            this.copyWorld(takeCanvas);
            takeCanvas.recycle();
        }
    }
    updateViewSize() { }
    updateClientBounds() { }
    getClientBounds(update) {
        if (update)
            this.updateClientBounds();
        return this.clientBounds || this.bounds;
    }
    startAutoLayout(_autoBounds, _listener) { }
    stopAutoLayout() { }
    setCursor(_cursor) { }
    setWorld(matrix, parentMatrix) {
        const { pixelRatio } = this;
        const w = this.worldTransform;
        if (parentMatrix) {
            const { a, b, c, d, e, f } = parentMatrix;
            this.setTransform(w.a = ((matrix.a * a) + (matrix.b * c)) * pixelRatio, w.b = ((matrix.a * b) + (matrix.b * d)) * pixelRatio, w.c = ((matrix.c * a) + (matrix.d * c)) * pixelRatio, w.d = ((matrix.c * b) + (matrix.d * d)) * pixelRatio, w.e = (((matrix.e * a) + (matrix.f * c) + e)) * pixelRatio, w.f = (((matrix.e * b) + (matrix.f * d) + f)) * pixelRatio);
        }
        else {
            this.setTransform(w.a = matrix.a * pixelRatio, w.b = matrix.b * pixelRatio, w.c = matrix.c * pixelRatio, w.d = matrix.d * pixelRatio, w.e = matrix.e * pixelRatio, w.f = matrix.f * pixelRatio);
        }
    }
    useWorldTransform(worldTransform) {
        if (worldTransform)
            this.worldTransform = worldTransform;
        const w = this.worldTransform;
        if (w)
            this.setTransform(w.a, w.b, w.c, w.d, w.e, w.f);
    }
    setStroke(color, strokeWidth, options) {
        if (strokeWidth)
            this.strokeWidth = strokeWidth;
        if (color)
            this.strokeStyle = color;
        if (options)
            this.setStrokeOptions(options);
    }
    setStrokeOptions(options) {
        this.strokeCap = options.strokeCap === 'none' ? 'butt' : options.strokeCap;
        this.strokeJoin = options.strokeJoin;
        this.dashPattern = options.dashPattern;
        this.dashOffset = options.dashOffset;
        this.miterLimit = options.miterLimit;
    }
    saveBlendMode(blendMode) {
        this.savedBlendMode = this.blendMode;
        this.blendMode = blendMode;
    }
    restoreBlendMode() {
        this.blendMode = this.savedBlendMode;
    }
    hitFill(_point, _fillRule) { return true; }
    hitStroke(_point, _strokeWidth) { return true; }
    hitPixel(_radiusPoint, _offset, _scale = 1) { return true; }
    setWorldShadow(x, y, blur, color) {
        const { pixelRatio } = this;
        this.shadowOffsetX = x * pixelRatio;
        this.shadowOffsetY = y * pixelRatio;
        this.shadowBlur = blur * pixelRatio;
        this.shadowColor = color || 'black';
    }
    setWorldBlur(blur) {
        const { pixelRatio } = this;
        this.filter = `blur(${blur * pixelRatio}px)`;
    }
    copyWorld(canvas, from, to, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        if (from) {
            const { pixelRatio } = this;
            if (!to)
                to = from;
            this.drawImage(canvas.view, from.x * pixelRatio, from.y * pixelRatio, from.width * pixelRatio, from.height * pixelRatio, to.x * pixelRatio, to.y * pixelRatio, to.width * pixelRatio, to.height * pixelRatio);
        }
        else {
            this.drawImage(canvas.view, 0, 0);
        }
        if (blendMode)
            this.blendMode = 'source-over';
    }
    copyWorldToInner(canvas, fromWorld, toInnerBounds, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        if (fromWorld.b || fromWorld.c) {
            this.save();
            this.resetTransform();
            this.copyWorld(canvas, fromWorld, BoundsHelper.tempToOuterOf(toInnerBounds, fromWorld));
            this.restore();
        }
        else {
            const { pixelRatio } = this;
            this.drawImage(canvas.view, fromWorld.x * pixelRatio, fromWorld.y * pixelRatio, fromWorld.width * pixelRatio, fromWorld.height * pixelRatio, toInnerBounds.x, toInnerBounds.y, toInnerBounds.width, toInnerBounds.height);
        }
        if (blendMode)
            this.blendMode = 'source-over';
    }
    copyWorldByReset(canvas, from, to, blendMode, onlyResetTransform) {
        this.resetTransform();
        this.copyWorld(canvas, from, to, blendMode);
        if (!onlyResetTransform)
            this.useWorldTransform();
    }
    useGrayscaleAlpha(bounds) {
        this.setTempBounds(bounds, true, true);
        let alpha, pixel;
        const { context } = this, imageData = context.getImageData(tempBounds.x, tempBounds.y, tempBounds.width, tempBounds.height), { data } = imageData;
        for (let i = 0, len = data.length; i < len; i += 4) {
            pixel = data[i] * 0.299 + data[i + 1] * 0.587 + data[i + 2] * 0.114;
            if (alpha = data[i + 3])
                data[i + 3] = alpha === 255 ? pixel : alpha * (pixel / 255);
        }
        context.putImageData(imageData, tempBounds.x, tempBounds.y);
    }
    useMask(maskCanvas, fromBounds, toBounds) {
        this.copyWorld(maskCanvas, fromBounds, toBounds, 'destination-in');
    }
    useEraser(eraserCanvas, fromBounds, toBounds) {
        this.copyWorld(eraserCanvas, fromBounds, toBounds, 'destination-out');
    }
    fillWorld(bounds, color, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        this.fillStyle = color;
        this.setTempBounds(bounds);
        this.fillRect(tempBounds.x, tempBounds.y, tempBounds.width, tempBounds.height);
        if (blendMode)
            this.blendMode = 'source-over';
    }
    strokeWorld(bounds, color, blendMode) {
        if (blendMode)
            this.blendMode = blendMode;
        this.strokeStyle = color;
        this.setTempBounds(bounds);
        this.strokeRect(tempBounds.x, tempBounds.y, tempBounds.width, tempBounds.height);
        if (blendMode)
            this.blendMode = 'source-over';
    }
    clearWorld(bounds, ceilPixel) {
        this.setTempBounds(bounds, ceilPixel);
        this.clearRect(tempBounds.x, tempBounds.y, tempBounds.width, tempBounds.height);
    }
    clipWorld(bounds, ceilPixel) {
        this.beginPath();
        this.setTempBounds(bounds, ceilPixel);
        this.rect(tempBounds.x, tempBounds.y, tempBounds.width, tempBounds.height);
        this.clip();
    }
    clear() {
        const { pixelRatio } = this;
        this.clearRect(0, 0, this.width * pixelRatio + 2, this.height * pixelRatio + 2);
    }
    setTempBounds(bounds, ceil, intersect) {
        tempBounds.set(bounds);
        if (intersect)
            tempBounds.intersect(this.bounds);
        tempBounds.scale(this.pixelRatio);
        if (ceil)
            tempBounds.ceil();
    }
    isSameSize(size) {
        return this.width === size.width && this.height === size.height && this.pixelRatio === size.pixelRatio;
    }
    getSameCanvas(useSameWorldTransform, useSameSmooth) {
        const canvas = this.manager ? this.manager.get(this.size) : Creator.canvas(Object.assign({}, this.size));
        canvas.save();
        if (useSameWorldTransform)
            copy$5(canvas.worldTransform, this.worldTransform), canvas.useWorldTransform();
        if (useSameSmooth)
            canvas.smooth = this.smooth;
        return canvas;
    }
    recycle(clearBounds) {
        if (!this.recycled) {
            this.restore();
            clearBounds ? this.clearWorld(clearBounds, true) : this.clear();
            this.manager ? this.manager.recycle(this) : this.destroy();
        }
    }
    updateRender(_bounds) { }
    unrealCanvas() { }
    destroy() {
        this.manager = this.view = this.parentView = null;
    }
}

const PathHelper = {
    creator: {},
    parse(_pathString, _curveMode) { return undefined; },
    convertToCanvasData(_old, _curveMode) { return undefined; }
};

const CanvasCommandOnlyMap = {
    N: 21,
    D: 22,
    X: 23,
    G: 24,
    F: 25,
    O: 26,
    P: 27,
    U: 28
};
const PathCommandMap = Object.assign({ M: 1, m: 10, L: 2, l: 20, H: 3, h: 30, V: 4, v: 40, C: 5, c: 50, S: 6, s: 60, Q: 7, q: 70, T: 8, t: 80, A: 9, a: 90, Z: 11, z: 11, R: 12 }, CanvasCommandOnlyMap);
const PathCommandLengthMap = {
    M: 3,
    m: 3,
    L: 3,
    l: 3,
    H: 2,
    h: 2,
    V: 2,
    v: 2,
    C: 7,
    c: 7,
    S: 5,
    s: 5,
    Q: 5,
    q: 5,
    T: 3,
    t: 3,
    A: 8,
    a: 8,
    Z: 1,
    z: 1,
    N: 5,
    D: 9,
    X: 6,
    G: 9,
    F: 5,
    O: 7,
    P: 4,
    U: 6
};
const NeedConvertToCanvasCommandMap = {
    m: 10,
    l: 20,
    H: 3,
    h: 30,
    V: 4,
    v: 40,
    c: 50,
    S: 6,
    s: 60,
    q: 70,
    T: 8,
    t: 80,
    A: 9,
    a: 90,
};
const NeedConvertToCurveCommandMap = Object.assign(Object.assign({}, NeedConvertToCanvasCommandMap), CanvasCommandOnlyMap);
const P$4 = PathCommandMap;
const PathNumberCommandMap = {};
for (let key in P$4) {
    PathNumberCommandMap[P$4[key]] = key;
}
const PathNumberCommandLengthMap = {};
for (let key in P$4) {
    PathNumberCommandLengthMap[P$4[key]] = PathCommandLengthMap[key];
}

const RectHelper = {
    drawRoundRect(drawer, x, y, width, height, cornerRadius) {
        const data = MathHelper.fourNumber(cornerRadius, Math.min(width / 2, height / 2));
        const right = x + width;
        const bottom = y + height;
        data[0] ? drawer.moveTo(x + data[0], y) : drawer.moveTo(x, y);
        data[1] ? drawer.arcTo(right, y, right, bottom, data[1]) : drawer.lineTo(right, y);
        data[2] ? drawer.arcTo(right, bottom, x, bottom, data[2]) : drawer.lineTo(right, bottom);
        data[3] ? drawer.arcTo(x, bottom, x, y, data[3]) : drawer.lineTo(x, bottom);
        data[0] ? drawer.arcTo(x, y, right, y, data[0]) : drawer.lineTo(x, y);
    }
};

const { sin: sin$1, cos: cos$1, atan2: atan2$1, ceil, abs: abs$1, PI, sqrt: sqrt$1, pow } = Math;
const { setPoint: setPoint$1, addPoint: addPoint$1 } = TwoPointBoundsHelper;
const { set, toNumberPoints } = PointHelper;
const { M: M$5, L: L$6, C: C$5, Q: Q$4, Z: Z$5 } = PathCommandMap;
const tempPoint$1 = {};
const BezierHelper = {
    points(data, originPoints, curve, close) {
        let points = toNumberPoints(originPoints);
        data.push(M$5, points[0], points[1]);
        if (curve && points.length > 5) {
            let aX, aY, bX, bY, cX, cY, c1X, c1Y, c2X, c2Y;
            let ba, cb, d, len = points.length;
            const t = curve === true ? 0.5 : curve;
            if (close) {
                points = [points[len - 2], points[len - 1], ...points, points[0], points[1], points[2], points[3]];
                len = points.length;
            }
            for (let i = 2; i < len - 2; i += 2) {
                aX = points[i - 2];
                aY = points[i - 1];
                bX = points[i];
                bY = points[i + 1];
                cX = points[i + 2];
                cY = points[i + 3];
                ba = sqrt$1(pow(bX - aX, 2) + pow(bY - aY, 2));
                cb = sqrt$1(pow(cX - bX, 2) + pow(cY - bY, 2));
                d = ba + cb;
                ba = (t * ba) / d;
                cb = (t * cb) / d;
                cX -= aX;
                cY -= aY;
                c1X = bX - ba * cX;
                c1Y = bY - ba * cY;
                if (i === 2) {
                    if (!close)
                        data.push(Q$4, c1X, c1Y, bX, bY);
                }
                else {
                    data.push(C$5, c2X, c2Y, c1X, c1Y, bX, bY);
                }
                c2X = bX + cb * cX;
                c2Y = bY + cb * cY;
            }
            if (!close)
                data.push(Q$4, c2X, c2Y, points[len - 2], points[len - 1]);
        }
        else {
            for (let i = 2, len = points.length; i < len; i += 2) {
                data.push(L$6, points[i], points[i + 1]);
            }
        }
        if (close)
            data.push(Z$5);
    },
    rect(data, x, y, width, height) {
        PathHelper.creator.path = data;
        PathHelper.creator.moveTo(x, y).lineTo(x + width, y).lineTo(x + width, y + height).lineTo(x, y + height).lineTo(x, y);
    },
    roundRect(data, x, y, width, height, radius) {
        PathHelper.creator.path = [];
        RectHelper.drawRoundRect(PathHelper.creator, x, y, width, height, radius);
        data.push(...PathHelper.convertToCanvasData(PathHelper.creator.path, true));
    },
    arcTo(data, fromX, fromY, x1, y1, toX, toY, radius, setPointBounds, setEndPoint, setStartPoint) {
        const BAx = x1 - fromX;
        const BAy = y1 - fromY;
        const CBx = toX - x1;
        const CBy = toY - y1;
        let startRadian = atan2$1(BAy, BAx);
        let endRadian = atan2$1(CBy, CBx);
        let totalRadian = endRadian - startRadian;
        if (totalRadian < 0)
            totalRadian += PI2;
        if (totalRadian === PI || (abs$1(BAx + BAy) < 1.e-12) || (abs$1(CBx + CBy) < 1.e-12)) {
            if (data)
                data.push(L$6, x1, y1);
            if (setPointBounds) {
                setPoint$1(setPointBounds, fromX, fromY);
                addPoint$1(setPointBounds, x1, y1);
            }
            if (setStartPoint)
                set(setStartPoint, fromX, fromY);
            if (setEndPoint)
                set(setEndPoint, x1, y1);
            return;
        }
        const anticlockwise = BAx * CBy - CBx * BAy < 0;
        const sign = anticlockwise ? -1 : 1;
        const c = radius / cos$1(totalRadian / 2);
        const centerX = x1 + c * cos$1(startRadian + totalRadian / 2 + PI_2 * sign);
        const centerY = y1 + c * sin$1(startRadian + totalRadian / 2 + PI_2 * sign);
        startRadian -= PI_2 * sign;
        endRadian -= PI_2 * sign;
        return ellipse$5(data, centerX, centerY, radius, radius, 0, startRadian / OneRadian, endRadian / OneRadian, anticlockwise, setPointBounds, setEndPoint, setStartPoint);
    },
    arc(data, x, y, radius, startAngle, endAngle, anticlockwise, setPointBounds, setEndPoint, setStartPoint) {
        return ellipse$5(data, x, y, radius, radius, 0, startAngle, endAngle, anticlockwise, setPointBounds, setEndPoint, setStartPoint);
    },
    ellipse(data, cx, cy, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise, setPointBounds, setEndPoint, setStartPoint) {
        const rotationRadian = rotation * OneRadian;
        const rotationSin = sin$1(rotationRadian);
        const rotationCos = cos$1(rotationRadian);
        let startRadian = startAngle * OneRadian;
        let endRadian = endAngle * OneRadian;
        if (startRadian > PI)
            startRadian -= PI2;
        if (endRadian < 0)
            endRadian += PI2;
        let totalRadian = endRadian - startRadian;
        if (totalRadian < 0)
            totalRadian += PI2;
        else if (totalRadian > PI2)
            totalRadian -= PI2;
        if (anticlockwise)
            totalRadian -= PI2;
        const parts = ceil(abs$1(totalRadian / PI_2));
        const partRadian = totalRadian / parts;
        const partRadian4Sin = sin$1(partRadian / 4);
        const control = 8 / 3 * partRadian4Sin * partRadian4Sin / sin$1(partRadian / 2);
        endRadian = startRadian + partRadian;
        let startCos = cos$1(startRadian);
        let startSin = sin$1(startRadian);
        let endCos, endSin;
        let x, y, x1, y1, x2, y2;
        let startX = x = rotationCos * radiusX * startCos - rotationSin * radiusY * startSin;
        let startY = y = rotationSin * radiusX * startCos + rotationCos * radiusY * startSin;
        let fromX = cx + x, fromY = cy + y;
        if (data)
            data.push(data.length ? L$6 : M$5, fromX, fromY);
        if (setPointBounds)
            setPoint$1(setPointBounds, fromX, fromY);
        if (setStartPoint)
            set(setStartPoint, fromX, fromY);
        for (let i = 0; i < parts; i++) {
            endCos = cos$1(endRadian);
            endSin = sin$1(endRadian);
            x = rotationCos * radiusX * endCos - rotationSin * radiusY * endSin;
            y = rotationSin * radiusX * endCos + rotationCos * radiusY * endSin;
            x1 = cx + startX - control * (rotationCos * radiusX * startSin + rotationSin * radiusY * startCos);
            y1 = cy + startY - control * (rotationSin * radiusX * startSin - rotationCos * radiusY * startCos);
            x2 = cx + x + control * (rotationCos * radiusX * endSin + rotationSin * radiusY * endCos);
            y2 = cy + y + control * (rotationSin * radiusX * endSin - rotationCos * radiusY * endCos);
            if (data)
                data.push(C$5, x1, y1, x2, y2, cx + x, cy + y);
            if (setPointBounds)
                toTwoPointBounds$1(cx + startX, cy + startY, x1, y1, x2, y2, cx + x, cy + y, setPointBounds, true);
            startX = x;
            startY = y;
            startCos = endCos;
            startSin = endSin;
            startRadian = endRadian;
            endRadian += partRadian;
        }
        if (setEndPoint)
            set(setEndPoint, cx + x, cy + y);
    },
    quadraticCurveTo(data, fromX, fromY, x1, y1, toX, toY) {
        data.push(C$5, (fromX + 2 * x1) / 3, (fromY + 2 * y1) / 3, (toX + 2 * x1) / 3, (toY + 2 * y1) / 3, toX, toY);
    },
    toTwoPointBoundsByQuadraticCurve(fromX, fromY, x1, y1, toX, toY, pointBounds, addMode) {
        toTwoPointBounds$1(fromX, fromY, (fromX + 2 * x1) / 3, (fromY + 2 * y1) / 3, (toX + 2 * x1) / 3, (toY + 2 * y1) / 3, toX, toY, pointBounds, addMode);
    },
    toTwoPointBounds(fromX, fromY, x1, y1, x2, y2, toX, toY, pointBounds, addMode) {
        const tList = [];
        let a, b, c, t, t1, t2, v, sqrtV;
        let f = fromX, z1 = x1, z2 = x2, o = toX;
        for (let i = 0; i < 2; ++i) {
            if (i == 1) {
                f = fromY, z1 = y1, z2 = y2, o = toY;
            }
            a = -3 * f + 9 * z1 - 9 * z2 + 3 * o;
            b = 6 * f - 12 * z1 + 6 * z2;
            c = 3 * z1 - 3 * f;
            if (Math.abs(a) < 1e-12) {
                if (Math.abs(b) < 1e-12)
                    continue;
                t = -c / b;
                if (0 < t && t < 1)
                    tList.push(t);
                continue;
            }
            v = b * b - 4 * c * a;
            sqrtV = Math.sqrt(v);
            if (v < 0)
                continue;
            t1 = (-b + sqrtV) / (2 * a);
            if (0 < t1 && t1 < 1)
                tList.push(t1);
            t2 = (-b - sqrtV) / (2 * a);
            if (0 < t2 && t2 < 1)
                tList.push(t2);
        }
        addMode ? addPoint$1(pointBounds, fromX, fromY) : setPoint$1(pointBounds, fromX, fromY);
        addPoint$1(pointBounds, toX, toY);
        for (let i = 0, len = tList.length; i < len; i++) {
            getPointAndSet(tList[i], fromX, fromY, x1, y1, x2, y2, toX, toY, tempPoint$1);
            addPoint$1(pointBounds, tempPoint$1.x, tempPoint$1.y);
        }
    },
    getPointAndSet(t, fromX, fromY, x1, y1, x2, y2, toX, toY, setPoint) {
        const o = 1 - t, a = o * o * o, b = 3 * o * o * t, c = 3 * o * t * t, d = t * t * t;
        setPoint.x = a * fromX + b * x1 + c * x2 + d * toX;
        setPoint.y = a * fromY + b * y1 + c * y2 + d * toY;
    },
    getPoint(t, fromX, fromY, x1, y1, x2, y2, toX, toY) {
        const point = {};
        getPointAndSet(t, fromX, fromY, x1, y1, x2, y2, toX, toY, point);
        return point;
    }
};
const { getPointAndSet, toTwoPointBounds: toTwoPointBounds$1, ellipse: ellipse$5 } = BezierHelper;

const { sin, cos, sqrt, atan2 } = Math;
const { ellipse: ellipse$4 } = BezierHelper;
const EllipseHelper = {
    ellipticalArc(data, fromX, fromY, radiusX, radiusY, rotation, largeFlag, sweepFlag, toX, toY, curveMode) {
        const halfX = (toX - fromX) / 2;
        const halfY = (toY - fromY) / 2;
        const rotationRadian = rotation * OneRadian;
        const rotationSin = sin(rotationRadian);
        const rotationCos = cos(rotationRadian);
        const px = -rotationCos * halfX - rotationSin * halfY;
        const py = -rotationCos * halfY + rotationSin * halfX;
        const rxSquare = radiusX * radiusX;
        const rySquare = radiusY * radiusY;
        const pySquare = py * py;
        const pxSquare = px * px;
        const a = rxSquare * rySquare - rxSquare * pySquare - rySquare * pxSquare;
        let s = 0;
        if (a < 0) {
            const t = sqrt(1 - a / (rxSquare * rySquare));
            radiusX *= t;
            radiusY *= t;
        }
        else {
            s = (largeFlag === sweepFlag ? -1 : 1) * sqrt(a / (rxSquare * pySquare + rySquare * pxSquare));
        }
        const cx = s * radiusX * py / radiusY;
        const cy = -s * radiusY * px / radiusX;
        const startRadian = atan2((py - cy) / radiusY, (px - cx) / radiusX);
        const endRadian = atan2((-py - cy) / radiusY, (-px - cx) / radiusX);
        let totalRadian = endRadian - startRadian;
        if (sweepFlag === 0 && totalRadian > 0) {
            totalRadian -= PI2;
        }
        else if (sweepFlag === 1 && totalRadian < 0) {
            totalRadian += PI2;
        }
        const centerX = fromX + halfX + rotationCos * cx - rotationSin * cy;
        const centerY = fromY + halfY + rotationSin * cx + rotationCos * cy;
        const anticlockwise = totalRadian < 0 ? 1 : 0;
        if (curveMode || Platform.ellipseToCurve) {
            ellipse$4(data, centerX, centerY, radiusX, radiusY, rotation, startRadian / OneRadian, endRadian / OneRadian, anticlockwise);
        }
        else {
            if (radiusX === radiusY && !rotation) {
                data.push(PathCommandMap.O, centerX, centerY, radiusX, startRadian / OneRadian, endRadian / OneRadian, anticlockwise);
            }
            else {
                data.push(PathCommandMap.G, centerX, centerY, radiusX, radiusY, rotation, startRadian / OneRadian, endRadian / OneRadian, anticlockwise);
            }
        }
    }
};

const { M: M$4, m, L: L$5, l, H, h, V, v, C: C$4, c, S, s, Q: Q$3, q, T, t, A, a, Z: Z$4, z, N: N$3, D: D$3, X: X$3, G: G$3, F: F$4, O: O$3, P: P$3, U: U$3 } = PathCommandMap;
const { rect: rect$1, roundRect: roundRect$2, arcTo: arcTo$3, arc: arc$3, ellipse: ellipse$3, quadraticCurveTo: quadraticCurveTo$1 } = BezierHelper;
const { ellipticalArc } = EllipseHelper;
const debug$5 = Debug.get('PathConvert');
const setEndPoint$1 = {};
const PathConvert = {
    current: { dot: 0 },
    stringify(data, floatLength) {
        let i = 0, len = data.length, count, str = '', command, lastCommand;
        while (i < len) {
            command = data[i];
            count = PathNumberCommandLengthMap[command];
            if (command === lastCommand) {
                str += ' ';
            }
            else {
                str += PathNumberCommandMap[command];
            }
            for (let j = 1; j < count; j++) {
                str += MathHelper.float(data[i + j], floatLength);
                (j === count - 1) || (str += ' ');
            }
            lastCommand = command;
            i += count;
        }
        return str;
    },
    parse(pathString, curveMode) {
        let needConvert, char, lastChar, num = '';
        const data = [];
        const convertCommand = curveMode ? NeedConvertToCurveCommandMap : NeedConvertToCanvasCommandMap;
        for (let i = 0, len = pathString.length; i < len; i++) {
            char = pathString[i];
            if (StringNumberMap[char]) {
                if (char === '.') {
                    if (current.dot) {
                        pushData(data, num);
                        num = '';
                    }
                    current.dot++;
                }
                if (num === '0' && char !== '.') {
                    pushData(data, num);
                    num = '';
                }
                num += char;
            }
            else if (PathCommandMap[char]) {
                if (num) {
                    pushData(data, num);
                    num = '';
                }
                current.name = PathCommandMap[char];
                current.length = PathCommandLengthMap[char];
                current.index = 0;
                pushData(data, current.name);
                if (!needConvert && convertCommand[char])
                    needConvert = true;
            }
            else {
                if (char === '-' || char === '+') {
                    if (lastChar === 'e' || lastChar === 'E') {
                        num += char;
                    }
                    else {
                        if (num)
                            pushData(data, num);
                        num = char;
                    }
                }
                else {
                    if (num) {
                        pushData(data, num);
                        num = '';
                    }
                }
            }
            lastChar = char;
        }
        if (num)
            pushData(data, num);
        return needConvert ? PathConvert.toCanvasData(data, curveMode) : data;
    },
    toCanvasData(old, curveMode) {
        let x = 0, y = 0, x1 = 0, y1 = 0, i = 0, len = old.length, controlX, controlY, command, lastCommand, smooth;
        const data = [];
        while (i < len) {
            command = old[i];
            switch (command) {
                case m:
                    old[i + 1] += x;
                    old[i + 2] += y;
                case M$4:
                    x = old[i + 1];
                    y = old[i + 2];
                    data.push(M$4, x, y);
                    i += 3;
                    break;
                case h:
                    old[i + 1] += x;
                case H:
                    x = old[i + 1];
                    data.push(L$5, x, y);
                    i += 2;
                    break;
                case v:
                    old[i + 1] += y;
                case V:
                    y = old[i + 1];
                    data.push(L$5, x, y);
                    i += 2;
                    break;
                case l:
                    old[i + 1] += x;
                    old[i + 2] += y;
                case L$5:
                    x = old[i + 1];
                    y = old[i + 2];
                    data.push(L$5, x, y);
                    i += 3;
                    break;
                case s:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    old[i + 3] += x;
                    old[i + 4] += y;
                    command = S;
                case S:
                    smooth = (lastCommand === C$4) || (lastCommand === S);
                    x1 = smooth ? (x * 2 - controlX) : old[i + 1];
                    y1 = smooth ? (y * 2 - controlY) : old[i + 2];
                    controlX = old[i + 1];
                    controlY = old[i + 2];
                    x = old[i + 3];
                    y = old[i + 4];
                    data.push(C$4, x1, y1, controlX, controlY, x, y);
                    i += 5;
                    break;
                case c:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    old[i + 3] += x;
                    old[i + 4] += y;
                    old[i + 5] += x;
                    old[i + 6] += y;
                    command = C$4;
                case C$4:
                    controlX = old[i + 3];
                    controlY = old[i + 4];
                    x = old[i + 5];
                    y = old[i + 6];
                    data.push(C$4, old[i + 1], old[i + 2], controlX, controlY, x, y);
                    i += 7;
                    break;
                case t:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    command = T;
                case T:
                    smooth = (lastCommand === Q$3) || (lastCommand === T);
                    controlX = smooth ? (x * 2 - controlX) : old[i + 1];
                    controlY = smooth ? (y * 2 - controlY) : old[i + 2];
                    curveMode ? quadraticCurveTo$1(data, x, y, controlX, controlY, old[i + 1], old[i + 2]) : data.push(Q$3, controlX, controlY, old[i + 1], old[i + 2]);
                    x = old[i + 1];
                    y = old[i + 2];
                    i += 3;
                    break;
                case q:
                    old[i + 1] += x;
                    old[i + 2] += y;
                    old[i + 3] += x;
                    old[i + 4] += y;
                    command = Q$3;
                case Q$3:
                    controlX = old[i + 1];
                    controlY = old[i + 2];
                    curveMode ? quadraticCurveTo$1(data, x, y, controlX, controlY, old[i + 3], old[i + 4]) : data.push(Q$3, controlX, controlY, old[i + 3], old[i + 4]);
                    x = old[i + 3];
                    y = old[i + 4];
                    i += 5;
                    break;
                case a:
                    old[i + 6] += x;
                    old[i + 7] += y;
                case A:
                    ellipticalArc(data, x, y, old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], old[i + 6], old[i + 7], curveMode);
                    x = old[i + 6];
                    y = old[i + 7];
                    i += 8;
                    break;
                case z:
                case Z$4:
                    data.push(Z$4);
                    i++;
                    break;
                case N$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    curveMode ? rect$1(data, x, y, old[i + 3], old[i + 4]) : copyData(data, old, i, 5);
                    i += 5;
                    break;
                case D$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    curveMode ? roundRect$2(data, x, y, old[i + 3], old[i + 4], [old[i + 5], old[i + 6], old[i + 7], old[i + 8]]) : copyData(data, old, i, 9);
                    i += 9;
                    break;
                case X$3:
                    x = old[i + 1];
                    y = old[i + 2];
                    curveMode ? roundRect$2(data, x, y, old[i + 3], old[i + 4], old[i + 5]) : copyData(data, old, i, 6);
                    i += 6;
                    break;
                case G$3:
                    ellipse$3(curveMode ? data : copyData(data, old, i, 9), old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], old[i + 6], old[i + 7], old[i + 8], null, setEndPoint$1);
                    x = setEndPoint$1.x;
                    y = setEndPoint$1.y;
                    i += 9;
                    break;
                case F$4:
                    curveMode ? ellipse$3(data, old[i + 1], old[i + 2], old[i + 3], old[i + 4], 0, 0, 360, false) : copyData(data, old, i, 5);
                    x = old[i + 1] + old[i + 3];
                    y = old[i + 2];
                    i += 5;
                    break;
                case O$3:
                    arc$3(curveMode ? data : copyData(data, old, i, 7), old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], old[i + 6], null, setEndPoint$1);
                    x = setEndPoint$1.x;
                    y = setEndPoint$1.y;
                    i += 7;
                    break;
                case P$3:
                    curveMode ? arc$3(data, old[i + 1], old[i + 2], old[i + 3], 0, 360, false) : copyData(data, old, i, 4);
                    x = old[i + 1] + old[i + 3];
                    y = old[i + 2];
                    i += 4;
                    break;
                case U$3:
                    arcTo$3(curveMode ? data : copyData(data, old, i, 6), x, y, old[i + 1], old[i + 2], old[i + 3], old[i + 4], old[i + 5], null, setEndPoint$1);
                    x = setEndPoint$1.x;
                    y = setEndPoint$1.y;
                    i += 6;
                    break;
                default:
                    debug$5.error(`command: ${command} [index:${i}]`, old);
                    return data;
            }
            lastCommand = command;
        }
        return data;
    },
    objectToCanvasData(list) {
        const data = [];
        list.forEach(item => {
            switch (item.name) {
                case 'M':
                    data.push(M$4, item.x, item.y);
                    break;
                case 'L':
                    data.push(L$5, item.x, item.y);
                    break;
                case 'C':
                    data.push(C$4, item.x1, item.y1, item.x2, item.y2, item.x, item.y);
                    break;
                case 'Q':
                    data.push(Q$3, item.x1, item.y1, item.x, item.y);
                    break;
                case 'Z': data.push(Z$4);
            }
        });
        return data;
    },
    copyData(data, old, index, count) {
        for (let i = index, end = index + count; i < end; i++) {
            data.push(old[i]);
        }
    },
    pushData(data, strNum) {
        if (current.index === current.length) {
            current.index = 1;
            data.push(current.name);
        }
        data.push(Number(strNum));
        current.index++;
        current.dot = 0;
    }
};
const { current, pushData, copyData } = PathConvert;

const { M: M$3, L: L$4, C: C$3, Q: Q$2, Z: Z$3, N: N$2, D: D$2, X: X$2, G: G$2, F: F$3, O: O$2, P: P$2, U: U$2 } = PathCommandMap;
const { getMinDistanceFrom, getRadianFrom } = PointHelper;
const { tan, min, abs } = Math;
const startPoint = {};
const PathCommandDataHelper = {
    beginPath(data) {
        data.length = 0;
    },
    moveTo(data, x, y) {
        data.push(M$3, x, y);
    },
    lineTo(data, x, y) {
        data.push(L$4, x, y);
    },
    bezierCurveTo(data, x1, y1, x2, y2, x, y) {
        data.push(C$3, x1, y1, x2, y2, x, y);
    },
    quadraticCurveTo(data, x1, y1, x, y) {
        data.push(Q$2, x1, y1, x, y);
    },
    closePath(data) {
        data.push(Z$3);
    },
    rect(data, x, y, width, height) {
        data.push(N$2, x, y, width, height);
    },
    roundRect(data, x, y, width, height, cornerRadius) {
        if (typeof cornerRadius === 'number') {
            data.push(X$2, x, y, width, height, cornerRadius);
        }
        else {
            const fourCorners = MathHelper.fourNumber(cornerRadius);
            if (fourCorners) {
                data.push(D$2, x, y, width, height, ...fourCorners);
            }
            else {
                data.push(N$2, x, y, width, height);
            }
        }
    },
    ellipse(data, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        if (rotation === undefined) {
            data.push(F$3, x, y, radiusX, radiusY);
        }
        else {
            if (startAngle === undefined)
                startAngle = 0;
            if (endAngle === undefined)
                endAngle = 360;
            data.push(G$2, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise ? 1 : 0);
        }
    },
    arc(data, x, y, radius, startAngle, endAngle, anticlockwise) {
        if (startAngle === undefined) {
            data.push(P$2, x, y, radius);
        }
        else {
            if (endAngle === undefined)
                endAngle = 360;
            data.push(O$2, x, y, radius, startAngle, endAngle, anticlockwise ? 1 : 0);
        }
    },
    arcTo(data, x1, y1, x2, y2, radius, lastX, lastY) {
        if (lastX !== undefined) {
            const maxRadius = tan(getRadianFrom(lastX, lastY, x1, y1, x2, y2) / 2) * (getMinDistanceFrom(lastX, lastY, x1, y1, x2, y2) / 2);
            data.push(U$2, x1, y1, x2, y2, min(radius, abs(maxRadius)));
        }
        else {
            data.push(U$2, x1, y1, x2, y2, radius);
        }
    },
    drawEllipse(data, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        BezierHelper.ellipse(null, x, y, radiusX, radiusY, rotation === undefined ? 0 : rotation, startAngle === undefined ? 0 : startAngle, endAngle === undefined ? 360 : endAngle, anticlockwise, null, null, startPoint);
        data.push(M$3, startPoint.x, startPoint.y);
        ellipse$2(data, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
    },
    drawArc(data, x, y, radius, startAngle, endAngle, anticlockwise) {
        BezierHelper.arc(null, x, y, radius, startAngle === undefined ? 0 : startAngle, endAngle === undefined ? 360 : endAngle, anticlockwise, null, null, startPoint);
        data.push(M$3, startPoint.x, startPoint.y);
        arc$2(data, x, y, radius, startAngle, endAngle, anticlockwise);
    },
    drawPoints(data, points, curve, close) {
        BezierHelper.points(data, points, curve, close);
    }
};
const { ellipse: ellipse$2, arc: arc$2 } = PathCommandDataHelper;

const { moveTo, lineTo, quadraticCurveTo, bezierCurveTo, closePath, beginPath, rect, roundRect: roundRect$1, ellipse: ellipse$1, arc: arc$1, arcTo: arcTo$2, drawEllipse, drawArc, drawPoints } = PathCommandDataHelper;
class PathCreator {
    set path(value) { this.__path = value; }
    get path() { return this.__path; }
    constructor(path) {
        this.set(path);
    }
    set(path) {
        if (path) {
            this.__path = typeof path === 'string' ? PathHelper.parse(path) : path;
        }
        else {
            this.__path = [];
        }
        return this;
    }
    beginPath() {
        beginPath(this.__path);
        this.paint();
        return this;
    }
    moveTo(x, y) {
        moveTo(this.__path, x, y);
        this.paint();
        return this;
    }
    lineTo(x, y) {
        lineTo(this.__path, x, y);
        this.paint();
        return this;
    }
    bezierCurveTo(x1, y1, x2, y2, x, y) {
        bezierCurveTo(this.__path, x1, y1, x2, y2, x, y);
        this.paint();
        return this;
    }
    quadraticCurveTo(x1, y1, x, y) {
        quadraticCurveTo(this.__path, x1, y1, x, y);
        this.paint();
        return this;
    }
    closePath() {
        closePath(this.__path);
        this.paint();
        return this;
    }
    rect(x, y, width, height) {
        rect(this.__path, x, y, width, height);
        this.paint();
        return this;
    }
    roundRect(x, y, width, height, cornerRadius) {
        roundRect$1(this.__path, x, y, width, height, cornerRadius);
        this.paint();
        return this;
    }
    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        ellipse$1(this.__path, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
        this.paint();
        return this;
    }
    arc(x, y, radius, startAngle, endAngle, anticlockwise) {
        arc$1(this.__path, x, y, radius, startAngle, endAngle, anticlockwise);
        this.paint();
        return this;
    }
    arcTo(x1, y1, x2, y2, radius) {
        arcTo$2(this.__path, x1, y1, x2, y2, radius);
        this.paint();
        return this;
    }
    drawEllipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise) {
        drawEllipse(this.__path, x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise);
        this.paint();
        return this;
    }
    drawArc(x, y, radius, startAngle, endAngle, anticlockwise) {
        drawArc(this.__path, x, y, radius, startAngle, endAngle, anticlockwise);
        this.paint();
        return this;
    }
    drawPoints(points, curve, close) {
        drawPoints(this.__path, points, curve, close);
        this.paint();
        return this;
    }
    clearPath() {
        return this.beginPath();
    }
    paint() { }
}

const { M: M$2, L: L$3, C: C$2, Q: Q$1, Z: Z$2, N: N$1, D: D$1, X: X$1, G: G$1, F: F$2, O: O$1, P: P$1, U: U$1 } = PathCommandMap;
const debug$4 = Debug.get('PathDrawer');
const PathDrawer = {
    drawPathByData(drawer, data) {
        if (!data)
            return;
        let command;
        let i = 0, len = data.length;
        while (i < len) {
            command = data[i];
            switch (command) {
                case M$2:
                    drawer.moveTo(data[i + 1], data[i + 2]);
                    i += 3;
                    break;
                case L$3:
                    drawer.lineTo(data[i + 1], data[i + 2]);
                    i += 3;
                    break;
                case C$2:
                    drawer.bezierCurveTo(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6]);
                    i += 7;
                    break;
                case Q$1:
                    drawer.quadraticCurveTo(data[i + 1], data[i + 2], data[i + 3], data[i + 4]);
                    i += 5;
                    break;
                case Z$2:
                    drawer.closePath();
                    i += 1;
                    break;
                case N$1:
                    drawer.rect(data[i + 1], data[i + 2], data[i + 3], data[i + 4]);
                    i += 5;
                    break;
                case D$1:
                    drawer.roundRect(data[i + 1], data[i + 2], data[i + 3], data[i + 4], [data[i + 5], data[i + 6], data[i + 7], data[i + 8]]);
                    i += 9;
                    break;
                case X$1:
                    drawer.roundRect(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5]);
                    i += 6;
                    break;
                case G$1:
                    drawer.ellipse(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5] * OneRadian, data[i + 6] * OneRadian, data[i + 7] * OneRadian, data[i + 8]);
                    i += 9;
                    break;
                case F$2:
                    drawer.ellipse(data[i + 1], data[i + 2], data[i + 3], data[i + 4], 0, 0, PI2, false);
                    i += 5;
                    break;
                case O$1:
                    drawer.arc(data[i + 1], data[i + 2], data[i + 3], data[i + 4] * OneRadian, data[i + 5] * OneRadian, data[i + 6]);
                    i += 7;
                    break;
                case P$1:
                    drawer.arc(data[i + 1], data[i + 2], data[i + 3], 0, PI2, false);
                    i += 4;
                    break;
                case U$1:
                    drawer.arcTo(data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5]);
                    i += 6;
                    break;
                default:
                    debug$4.error(`command: ${command} [index:${i}]`, data);
                    return;
            }
        }
    }
};

const { M: M$1, L: L$2, C: C$1, Q, Z: Z$1, N, D, X, G, F: F$1, O, P, U } = PathCommandMap;
const { toTwoPointBounds, toTwoPointBoundsByQuadraticCurve, arcTo: arcTo$1, arc, ellipse } = BezierHelper;
const { addPointBounds, copy: copy$4, addPoint, setPoint, addBounds, toBounds: toBounds$1 } = TwoPointBoundsHelper;
const debug$3 = Debug.get('PathBounds');
let radius, radiusX, radiusY;
const tempPointBounds = {};
const setPointBounds = {};
const setEndPoint = {};
const PathBounds = {
    toBounds(data, setBounds) {
        PathBounds.toTwoPointBounds(data, setPointBounds);
        toBounds$1(setPointBounds, setBounds);
    },
    toTwoPointBounds(data, setPointBounds) {
        if (!data || !data.length)
            return setPoint(setPointBounds, 0, 0);
        let i = 0, x = 0, y = 0, x1, y1, toX, toY, command;
        const len = data.length;
        while (i < len) {
            command = data[i];
            if (i === 0) {
                if (command === Z$1 || command === C$1 || command === Q) {
                    setPoint(setPointBounds, x, y);
                }
                else {
                    setPoint(setPointBounds, data[i + 1], data[i + 2]);
                }
            }
            switch (command) {
                case M$1:
                case L$2:
                    x = data[i + 1];
                    y = data[i + 2];
                    addPoint(setPointBounds, x, y);
                    i += 3;
                    break;
                case C$1:
                    toX = data[i + 5];
                    toY = data[i + 6];
                    toTwoPointBounds(x, y, data[i + 1], data[i + 2], data[i + 3], data[i + 4], toX, toY, tempPointBounds);
                    addPointBounds(setPointBounds, tempPointBounds);
                    x = toX;
                    y = toY;
                    i += 7;
                    break;
                case Q:
                    x1 = data[i + 1];
                    y1 = data[i + 2];
                    toX = data[i + 3];
                    toY = data[i + 4];
                    toTwoPointBoundsByQuadraticCurve(x, y, x1, y1, toX, toY, tempPointBounds);
                    addPointBounds(setPointBounds, tempPointBounds);
                    x = toX;
                    y = toY;
                    i += 5;
                    break;
                case Z$1:
                    i += 1;
                    break;
                case N:
                    x = data[i + 1];
                    y = data[i + 2];
                    addBounds(setPointBounds, x, y, data[i + 3], data[i + 4]);
                    i += 5;
                    break;
                case D:
                case X:
                    x = data[i + 1];
                    y = data[i + 2];
                    addBounds(setPointBounds, x, y, data[i + 3], data[i + 4]);
                    i += (command === D ? 9 : 6);
                    break;
                case G:
                    ellipse(null, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6], data[i + 7], data[i + 8], tempPointBounds, setEndPoint);
                    i === 0 ? copy$4(setPointBounds, tempPointBounds) : addPointBounds(setPointBounds, tempPointBounds);
                    x = setEndPoint.x;
                    y = setEndPoint.y;
                    i += 9;
                    break;
                case F$1:
                    x = data[i + 1];
                    y = data[i + 2];
                    radiusX = data[i + 3];
                    radiusY = data[i + 4];
                    addBounds(setPointBounds, x - radiusX, y - radiusY, radiusX * 2, radiusY * 2);
                    x += radiusX;
                    i += 5;
                    break;
                case O:
                    arc(null, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6], tempPointBounds, setEndPoint);
                    i === 0 ? copy$4(setPointBounds, tempPointBounds) : addPointBounds(setPointBounds, tempPointBounds);
                    x = setEndPoint.x;
                    y = setEndPoint.y;
                    i += 7;
                    break;
                case P:
                    x = data[i + 1];
                    y = data[i + 2];
                    radius = data[i + 3];
                    addBounds(setPointBounds, x - radius, y - radius, radius * 2, radius * 2);
                    x += radius;
                    i += 4;
                    break;
                case U:
                    arcTo$1(null, x, y, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], tempPointBounds, setEndPoint);
                    i === 0 ? copy$4(setPointBounds, tempPointBounds) : addPointBounds(setPointBounds, tempPointBounds);
                    x = setEndPoint.x;
                    y = setEndPoint.y;
                    i += 6;
                    break;
                default:
                    debug$3.error(`command: ${command} [index:${i}]`, data);
                    return;
            }
        }
    }
};

const { M, L: L$1, C, Z } = PathCommandMap;
const { getCenterX, getCenterY } = PointHelper;
const { arcTo } = PathCommandDataHelper;
const PathCorner = {
    smooth(data, cornerRadius, _cornerSmoothing) {
        let command;
        let i = 0, x = 0, y = 0, startX = 0, startY = 0, secondX = 0, secondY = 0, lastX = 0, lastY = 0;
        const len = data.length;
        const smooth = [];
        while (i < len) {
            command = data[i];
            switch (command) {
                case M:
                    startX = lastX = data[i + 1];
                    startY = lastY = data[i + 2];
                    i += 3;
                    if (data[i] === L$1) {
                        secondX = data[i + 1];
                        secondY = data[i + 2];
                        smooth.push(M, getCenterX(startX, secondX), getCenterY(startY, secondY));
                    }
                    else {
                        smooth.push(M, startX, startY);
                    }
                    break;
                case L$1:
                    x = data[i + 1];
                    y = data[i + 2];
                    i += 3;
                    switch (data[i]) {
                        case L$1:
                            arcTo(smooth, x, y, data[i + 1], data[i + 2], cornerRadius, lastX, lastY);
                            break;
                        case Z:
                            arcTo(smooth, x, y, startX, startY, cornerRadius, lastX, lastY);
                            break;
                        default:
                            smooth.push(L$1, x, y);
                    }
                    lastX = x;
                    lastY = y;
                    break;
                case C:
                    smooth.push(C, data[i + 1], data[i + 2], data[i + 3], data[i + 4], data[i + 5], data[i + 6]);
                    i += 7;
                    break;
                case Z:
                    arcTo(smooth, startX, startY, secondX, secondY, cornerRadius, lastX, lastY);
                    smooth.push(Z);
                    i += 1;
                    break;
            }
        }
        if (command !== Z) {
            smooth[1] = startX;
            smooth[2] = startY;
        }
        return smooth;
    }
};

PathHelper.creator = new PathCreator();
PathHelper.parse = PathConvert.parse;
PathHelper.convertToCanvasData = PathConvert.toCanvasData;
const pen = new PathCreator();

const { drawRoundRect } = RectHelper;
function roundRect(drawer) {
    if (drawer && !drawer.roundRect) {
        drawer.roundRect = function (x, y, width, height, cornerRadius) {
            drawRoundRect(this, x, y, width, height, cornerRadius);
        };
    }
}

function canvasPatch(drawer) {
    roundRect(drawer);
}

const FileHelper = {
    opacityTypes: ['png', 'webp', 'svg'],
    upperCaseTypeMap: {},
    mineType(type) {
        if (!type || type.startsWith('image'))
            return type;
        if (type === 'jpg')
            type = 'jpeg';
        return 'image/' + type;
    },
    fileType(filename) {
        const l = filename.split('.');
        return l[l.length - 1];
    },
    isOpaqueImage(filename) {
        const type = F.fileType(filename);
        return ['jpg', 'jpeg'].some(item => item === type);
    },
    getExportOptions(options) {
        switch (typeof options) {
            case 'object': return options;
            case 'number': return { quality: options };
            case 'boolean': return { blob: options };
            default: return {};
        }
    }
};
const F = FileHelper;
F.opacityTypes.forEach(type => F.upperCaseTypeMap[type] = type.toUpperCase());

const debug$2 = Debug.get('TaskProcessor');
class TaskItem {
    constructor(task) {
        this.parallel = true;
        this.time = 1;
        this.id = IncrementId.create(IncrementId.TASK);
        this.task = task;
    }
    run() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.task && !this.isComplete && this.parent.running)
                    yield this.task();
            }
            catch (error) {
                debug$2.error(error);
            }
        });
    }
    complete() {
        this.isComplete = true;
        this.parent = null;
        this.task = null;
    }
    cancel() {
        this.isCancel = true;
        this.complete();
    }
}

class TaskProcessor {
    get total() { return this.list.length + this.delayNumber; }
    get finishedIndex() {
        return this.isComplete ? 0 : this.index + this.parallelSuccessNumber;
    }
    get remain() {
        return this.isComplete ? this.total : this.total - this.finishedIndex;
    }
    get percent() {
        const { total } = this;
        let totalTime = 0, runTime = 0;
        for (let i = 0; i < total; i++) {
            if (i <= this.finishedIndex) {
                runTime += this.list[i].time;
                if (i === this.finishedIndex)
                    totalTime = runTime;
            }
            else {
                totalTime += this.list[i].time;
            }
        }
        return this.isComplete ? 1 : (runTime / totalTime);
    }
    constructor(config) {
        this.config = { parallel: 6 };
        this.list = [];
        this.running = false;
        this.isComplete = true;
        this.index = 0;
        this.delayNumber = 0;
        if (config)
            DataHelper.assign(this.config, config);
        this.empty();
    }
    add(taskCallback, options) {
        let start, parallel, time, delay;
        const task = new TaskItem(taskCallback);
        task.parent = this;
        if (typeof options === 'number') {
            delay = options;
        }
        else if (options) {
            parallel = options.parallel;
            start = options.start;
            time = options.time;
            delay = options.delay;
        }
        if (time)
            task.time = time;
        if (parallel === false)
            task.parallel = false;
        if (delay === undefined) {
            this.push(task, start);
        }
        else {
            this.delayNumber++;
            setTimeout(() => {
                if (this.delayNumber) {
                    this.delayNumber--;
                    this.push(task, start);
                }
            }, delay);
        }
        this.isComplete = false;
        return task;
    }
    push(task, start) {
        this.list.push(task);
        if (start !== false && !this.timer) {
            this.timer = setTimeout(() => this.start());
        }
    }
    empty() {
        this.index = 0;
        this.parallelSuccessNumber = 0;
        this.list = [];
        this.parallelList = [];
        this.delayNumber = 0;
    }
    start() {
        if (!this.running) {
            this.running = true;
            this.isComplete = false;
            this.run();
        }
    }
    pause() {
        clearTimeout(this.timer);
        this.timer = null;
        this.running = false;
    }
    resume() {
        this.start();
    }
    skip() {
        this.index++;
        this.resume();
    }
    stop() {
        this.isComplete = true;
        this.list.forEach(task => { if (!task.isComplete)
            task.cancel(); });
        this.pause();
        this.empty();
    }
    run() {
        if (!this.running)
            return;
        this.setParallelList();
        if (this.parallelList.length > 1) {
            this.runParallelTasks();
        }
        else {
            this.remain ? this.runTask() : this.onComplete();
        }
    }
    runTask() {
        const task = this.list[this.index];
        if (!task) {
            this.nextTask();
            return;
        }
        task.run().then(() => {
            this.onTask(task);
            this.index++;
            this.nextTask();
        }).catch(error => {
            this.onError(error);
        });
    }
    runParallelTasks() {
        this.parallelList.forEach(task => this.runParallelTask(task));
    }
    runParallelTask(task) {
        task.run().then(() => {
            this.onTask(task);
            this.fillParallelTask();
        }).catch(error => {
            this.onParallelError(error);
        });
    }
    nextTask() {
        if (this.total === this.finishedIndex) {
            this.onComplete();
        }
        else {
            this.timer = setTimeout(() => this.run());
        }
    }
    setParallelList() {
        let task;
        this.parallelList = [];
        this.parallelSuccessNumber = 0;
        let end = this.index + this.config.parallel;
        if (end > this.list.length)
            end = this.list.length;
        for (let i = this.index; i < end; i++) {
            task = this.list[i];
            if (task.parallel) {
                this.parallelList.push(task);
            }
            else {
                break;
            }
        }
    }
    fillParallelTask() {
        let task;
        const parallelList = this.parallelList;
        this.parallelSuccessNumber++;
        parallelList.pop();
        const parallelWaitNumber = parallelList.length;
        const nextIndex = this.finishedIndex + parallelWaitNumber;
        if (parallelList.length) {
            if (!this.running)
                return;
            if (nextIndex < this.total) {
                task = this.list[nextIndex];
                if (task && task.parallel) {
                    parallelList.push(task);
                    this.runParallelTask(task);
                }
            }
        }
        else {
            this.index += this.parallelSuccessNumber;
            this.parallelSuccessNumber = 0;
            this.nextTask();
        }
    }
    onComplete() {
        this.stop();
        if (this.config.onComplete)
            this.config.onComplete();
    }
    onTask(task) {
        task.complete();
        if (this.config.onTask)
            this.config.onTask();
    }
    onParallelError(error) {
        this.parallelList.forEach(task => {
            task.parallel = false;
        });
        this.parallelList.length = 0;
        this.parallelSuccessNumber = 0;
        this.onError(error);
    }
    onError(error) {
        this.pause();
        if (this.config.onError)
            this.config.onError(error);
    }
    destroy() {
        this.stop();
    }
}

const ImageManager = {
    map: {},
    recycledList: [],
    tasker: new TaskProcessor(),
    patternTasker: new TaskProcessor(),
    get isComplete() { return I.tasker.isComplete; },
    get(config) {
        let image = I.map[config.url];
        if (!image) {
            image = Creator.image(config);
            I.map[config.url] = image;
        }
        image.use++;
        return image;
    },
    recycle(image) {
        image.use--;
        setTimeout(() => { if (!image.use)
            I.recycledList.push(image); });
    },
    clearRecycled() {
        const list = I.recycledList;
        if (list.length > 100) {
            list.forEach(image => {
                if (!image.use && image.url) {
                    delete I.map[image.url];
                    image.destroy();
                }
            });
            list.length = 0;
        }
    },
    hasOpacityPixel(config) {
        return FileHelper.opacityTypes.some(item => I.isFormat(item, config));
    },
    isFormat(format, config) {
        if (config.format === format)
            return true;
        const { url } = config;
        if (url.startsWith('data:')) {
            if (url.startsWith('data:' + FileHelper.mineType(format)))
                return true;
        }
        else {
            if (url.includes('.' + format) || url.includes('.' + FileHelper.upperCaseTypeMap[format]))
                return true;
            else if (format === 'png' && !url.includes('.'))
                return true;
        }
        return false;
    },
    destroy() {
        I.map = {};
        I.recycledList = [];
    }
};
const I = ImageManager;

const { IMAGE, create: create$1 } = IncrementId;
class LeaferImage {
    get url() { return this.config.url; }
    get completed() { return this.ready || !!this.error; }
    constructor(config) {
        this.use = 0;
        this.waitComplete = [];
        this.innerId = create$1(IMAGE);
        this.config = config || { url: '' };
        this.isSVG = ImageManager.isFormat('svg', config);
        this.hasOpacityPixel = ImageManager.hasOpacityPixel(config);
    }
    load(onSuccess, onError) {
        if (!this.loading) {
            this.loading = true;
            ImageManager.tasker.add(() => __awaiter(this, void 0, void 0, function* () {
                return yield Platform.origin.loadImage(this.url).then((img) => {
                    this.ready = true;
                    this.width = img.naturalWidth || img.width;
                    this.height = img.naturalHeight || img.height;
                    this.view = img;
                    this.onComplete(true);
                }).catch((e) => {
                    this.error = e;
                    this.onComplete(false);
                });
            }));
        }
        this.waitComplete.push(onSuccess, onError);
        return this.waitComplete.length - 2;
    }
    unload(index, stopEvent) {
        const l = this.waitComplete;
        if (stopEvent) {
            const error = l[index + 1];
            if (error)
                error({ type: 'stop' });
        }
        l[index] = l[index + 1] = undefined;
    }
    onComplete(isSuccess) {
        let odd;
        this.waitComplete.forEach((item, index) => {
            odd = index % 2;
            if (item) {
                if (isSuccess) {
                    if (!odd)
                        item(this);
                }
                else {
                    if (odd)
                        item(this.error);
                }
            }
        });
        this.waitComplete.length = 0;
        this.loading = false;
    }
    getCanvas(width, height, opacity, _filters) {
        width || (width = this.width);
        height || (height = this.height);
        if (this.cache) {
            let { params, data } = this.cache;
            for (let i in params) {
                if (params[i] !== arguments[i]) {
                    data = null;
                    break;
                }
            }
            if (data)
                return data;
        }
        const canvas = Platform.origin.createCanvas(width, height);
        const ctx = canvas.getContext('2d');
        if (opacity)
            ctx.globalAlpha = opacity;
        ctx.drawImage(this.view, 0, 0, width, height);
        this.cache = this.use > 1 ? { data: canvas, params: arguments } : null;
        return canvas;
    }
    getPattern(canvas, repeat, transform, paint) {
        const pattern = Platform.canvas.createPattern(canvas, repeat);
        try {
            if (transform && pattern.setTransform) {
                pattern.setTransform(transform);
                transform = null;
            }
        }
        catch (_a) { }
        if (paint)
            paint.transform = transform;
        return pattern;
    }
    destroy() {
        this.config = { url: '' };
        this.cache = null;
        this.waitComplete.length = 0;
    }
}

function defineKey(target, key, descriptor, noConfigurable) {
    if (!noConfigurable)
        descriptor.configurable = descriptor.enumerable = true;
    Object.defineProperty(target, key, descriptor);
}
function getDescriptor(object, name) {
    return Object.getOwnPropertyDescriptor(object, name);
}
function getNames(object) {
    return Object.getOwnPropertyNames(object);
}

function decorateLeafAttr(defaultValue, descriptorFn) {
    return (target, key) => defineLeafAttr(target, key, defaultValue, descriptorFn && descriptorFn(key));
}
function attr(partDescriptor) {
    return partDescriptor;
}
function defineLeafAttr(target, key, defaultValue, partDescriptor) {
    const defaultDescriptor = {
        get() { return this.__getAttr(key); },
        set(value) { this.__setAttr(key, value); }
    };
    defineKey(target, key, Object.assign(defaultDescriptor, partDescriptor || {}));
    defineDataProcessor(target, key, defaultValue);
}
function dataType(defaultValue) {
    return decorateLeafAttr(defaultValue);
}
function positionType(defaultValue, checkFiniteNumber) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value, checkFiniteNumber) && (this.__layout.matrixChanged || this.__layout.matrixChange());
        }
    }));
}
function autoLayoutType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            if (this.__setAttr(key, value)) {
                this.__layout.matrixChanged || this.__layout.matrixChange();
                this.__hasAutoLayout = !!(this.origin || this.around || this.flow);
                if (!this.__local)
                    this.__layout.createLocal();
            }
        }
    }));
}
function scaleType(defaultValue, checkFiniteNumber) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value, checkFiniteNumber) && (this.__layout.scaleChanged || this.__layout.scaleChange());
        }
    }));
}
function rotationType(defaultValue, checkFiniteNumber) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value, checkFiniteNumber) && (this.__layout.rotationChanged || this.__layout.rotationChange());
        }
    }));
}
function boundsType(defaultValue, checkFiniteNumber) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value, checkFiniteNumber) && doBoundsType(this);
        }
    }));
}
function naturalBoundsType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value) && (doBoundsType(this), this.__.__removeNaturalSize());
        }
    }));
}
function doBoundsType(leaf) {
    leaf.__layout.boxChanged || leaf.__layout.boxChange();
    if (leaf.__hasAutoLayout)
        leaf.__layout.matrixChanged || leaf.__layout.matrixChange();
}
function pathInputType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            const data = this.__;
            if (data.__pathInputed !== 2)
                data.__pathInputed = value ? 1 : 0;
            if (!value)
                data.__pathForRender = undefined;
            this.__setAttr(key, value);
            doBoundsType(this);
        }
    }));
}
const pathType = boundsType;
function affectStrokeBoundsType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value) && doStrokeType(this);
        }
    }));
}
function doStrokeType(leaf) {
    leaf.__layout.strokeChanged || leaf.__layout.strokeChange();
    if (leaf.__.__useArrow)
        doBoundsType(leaf);
}
const strokeType = affectStrokeBoundsType;
function affectRenderBoundsType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value);
            this.__layout.renderChanged || this.__layout.renderChange();
        }
    }));
}
function surfaceType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value) && (this.__layout.surfaceChanged || this.__layout.surfaceChange());
        }
    }));
}
function opacityType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value) && (this.__layout.opacityChanged || this.__layout.opacityChange());
        }
    }));
}
function visibleType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            const oldValue = this.visible;
            if (oldValue === true && value === 0) {
                if (this.animationOut)
                    return this.__runAnimation('out', () => doVisible(this, key, value, oldValue));
            }
            else if (oldValue === 0 && value === true) {
                if (this.animation)
                    this.__runAnimation('in');
            }
            doVisible(this, key, value, oldValue);
        }
    }));
}
function doVisible(leaf, key, value, oldValue) {
    if (leaf.__setAttr(key, value)) {
        leaf.__layout.opacityChanged || leaf.__layout.opacityChange();
        if (oldValue === 0 || value === 0)
            doBoundsType(leaf);
    }
}
function sortType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            if (this.__setAttr(key, value)) {
                this.__layout.surfaceChanged || this.__layout.surfaceChange();
                this.waitParent(() => { this.parent.__layout.childrenSortChange(); });
            }
        }
    }));
}
function maskType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            if (this.__setAttr(key, value)) {
                this.__layout.boxChanged || this.__layout.boxChange();
                this.waitParent(() => { this.parent.__updateMask(value); });
            }
        }
    }));
}
function eraserType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value) && this.waitParent(() => { this.parent.__updateEraser(value); });
        }
    }));
}
function hitType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            if (this.__setAttr(key, value)) {
                this.__layout.hitCanvasChanged = true;
                if (Debug.showHitView) {
                    this.__layout.surfaceChanged || this.__layout.surfaceChange();
                }
                if (this.leafer)
                    this.leafer.updateCursor();
            }
        }
    }));
}
function cursorType(defaultValue) {
    return decorateLeafAttr(defaultValue, (key) => attr({
        set(value) {
            this.__setAttr(key, value);
            if (this.leafer)
                this.leafer.updateCursor();
        }
    }));
}
function dataProcessor(processor) {
    return (target, _key) => {
        defineKey(target, '__DataProcessor', {
            get() { return processor; }
        });
    };
}
function layoutProcessor(processor) {
    return (target, _key) => {
        defineKey(target, '__LayoutProcessor', {
            get() { return processor; }
        });
    };
}
function getSetMethodName(key) {
    return 'set' + key.charAt(0).toUpperCase() + key.slice(1);
}
function defineDataProcessor(target, key, defaultValue) {
    const data = target.__DataProcessor.prototype;
    const computedKey = '_' + key;
    const setMethodName = getSetMethodName(key);
    const property = {
        get() {
            const v = this[computedKey];
            return v === undefined ? defaultValue : v;
        },
        set(value) {
            this[computedKey] = value;
        }
    };
    if (defaultValue === undefined) {
        property.get = function () { return this[computedKey]; };
    }
    else if (typeof defaultValue === 'object') {
        const { clone } = DataHelper;
        property.get = function () {
            let v = this[computedKey];
            if (v === undefined)
                this[computedKey] = v = clone(defaultValue);
            return v;
        };
    }
    if (key === 'width') {
        property.get = function () {
            const v = this[computedKey];
            if (v === undefined) {
                const t = this;
                return t._height && t.__naturalWidth && t.__useNaturalRatio ? t._height * t.__naturalWidth / t.__naturalHeight : t.__naturalWidth || defaultValue;
            }
            else {
                return v;
            }
        };
    }
    else if (key === 'height') {
        property.get = function () {
            const v = this[computedKey];
            if (v === undefined) {
                const t = this;
                return t._width && t.__naturalHeight && t.__useNaturalRatio ? t._width * t.__naturalHeight / t.__naturalWidth : t.__naturalHeight || defaultValue;
            }
            else {
                return v;
            }
        };
    }
    let descriptor, find = data;
    while (!descriptor && find) {
        descriptor = getDescriptor(find, key);
        find = find.__proto__;
    }
    if (descriptor && descriptor.set)
        property.set = descriptor.set;
    if (data[setMethodName]) {
        property.set = data[setMethodName];
        delete data[setMethodName];
    }
    defineKey(data, key, property);
}

const debug$1 = new Debug('rewrite');
const list = [];
const excludeNames = ['destroy', 'constructor'];
function rewrite(method) {
    return (target, key) => {
        list.push({ name: target.constructor.name + '.' + key, run: () => { target[key] = method; } });
    };
}
function rewriteAble() {
    return (_target) => {
        doRewrite();
    };
}
function doRewrite(error) {
    if (list.length) {
        list.forEach(item => {
            if (error)
                debug$1.error(item.name, '需在Class上装饰@rewriteAble()');
            item.run();
        });
        list.length = 0;
    }
}
setTimeout(() => doRewrite(true));
function useModule(module, exclude) {
    return (target) => {
        const names = module.prototype ? getNames(module.prototype) : Object.keys(module);
        names.forEach(name => {
            if (!excludeNames.includes(name) && (!exclude || !exclude.includes(name))) {
                if (module.prototype) {
                    const d = getDescriptor(module.prototype, name);
                    if (d.writable)
                        target.prototype[name] = module.prototype[name];
                }
                else {
                    target.prototype[name] = module[name];
                }
            }
        });
    };
}

function registerUI() {
    return (target) => {
        UICreator.register(target);
    };
}
function registerUIEvent() {
    return (target) => {
        EventCreator.register(target);
    };
}

const { copy: copy$3, toInnerPoint: toInnerPoint$1, toOuterPoint: toOuterPoint$1, scaleOfOuter, rotateOfOuter, skewOfOuter, multiplyParent: multiplyParent$2, divideParent, getLayout } = MatrixHelper;
const matrix = {};
const LeafHelper = {
    updateAllMatrix(leaf, checkAutoLayout, waitAutoLayout) {
        if (checkAutoLayout && leaf.__hasAutoLayout && leaf.__layout.matrixChanged)
            waitAutoLayout = true;
        updateMatrix$1(leaf, checkAutoLayout, waitAutoLayout);
        if (leaf.isBranch) {
            const { children } = leaf;
            for (let i = 0, len = children.length; i < len; i++) {
                updateAllMatrix$1(children[i], checkAutoLayout, waitAutoLayout);
            }
        }
    },
    updateMatrix(leaf, checkAutoLayout, waitAutoLayout) {
        const layout = leaf.__layout;
        if (checkAutoLayout) {
            if (waitAutoLayout) {
                layout.waitAutoLayout = true;
                if (leaf.__hasAutoLayout)
                    layout.matrixChanged = false;
            }
        }
        else if (layout.waitAutoLayout) {
            layout.waitAutoLayout = false;
        }
        if (layout.matrixChanged)
            leaf.__updateLocalMatrix();
        if (!layout.waitAutoLayout)
            leaf.__updateWorldMatrix();
    },
    updateBounds(leaf) {
        const layout = leaf.__layout;
        if (layout.boundsChanged)
            leaf.__updateLocalBounds();
        if (!layout.waitAutoLayout)
            leaf.__updateWorldBounds();
    },
    updateAllWorldOpacity(leaf) {
        leaf.__updateWorldOpacity();
        if (leaf.isBranch) {
            const { children } = leaf;
            for (let i = 0, len = children.length; i < len; i++) {
                updateAllWorldOpacity(children[i]);
            }
        }
    },
    updateAllChange(leaf) {
        updateAllWorldOpacity(leaf);
        leaf.__updateChange();
        if (leaf.isBranch) {
            const { children } = leaf;
            for (let i = 0, len = children.length; i < len; i++) {
                updateAllChange(children[i]);
            }
        }
    },
    worldHittable(t) {
        while (t) {
            if (!t.__.hittable)
                return false;
            t = t.parent;
        }
        return true;
    },
    moveWorld(t, x, y = 0, isInnerPoint) {
        const local = typeof x === 'object' ? Object.assign({}, x) : { x, y };
        isInnerPoint ? toOuterPoint$1(t.localTransform, local, local, true) : (t.parent && toInnerPoint$1(t.parent.worldTransform, local, local, true));
        L.moveLocal(t, local.x, local.y);
    },
    moveLocal(t, x, y = 0) {
        if (typeof x === 'object') {
            t.x += x.x;
            t.y += x.y;
        }
        else {
            t.x += x;
            t.y += y;
        }
    },
    zoomOfWorld(t, origin, scaleX, scaleY, resize) {
        L.zoomOfLocal(t, getTempLocal(t, origin), scaleX, scaleY, resize);
    },
    zoomOfLocal(t, origin, scaleX, scaleY = scaleX, resize) {
        copy$3(matrix, t.__localMatrix);
        scaleOfOuter(matrix, origin, scaleX, scaleY);
        if (t.origin || t.around) {
            L.setTransform(t, matrix, resize);
        }
        else {
            moveByMatrix(t, matrix);
            t.scaleResize(scaleX, scaleY, resize !== true);
        }
    },
    rotateOfWorld(t, origin, angle) {
        L.rotateOfLocal(t, getTempLocal(t, origin), angle);
    },
    rotateOfLocal(t, origin, angle) {
        copy$3(matrix, t.__localMatrix);
        rotateOfOuter(matrix, origin, angle);
        if (t.origin || t.around) {
            L.setTransform(t, matrix);
        }
        else {
            moveByMatrix(t, matrix);
            t.rotation = MathHelper.formatRotation(t.rotation + angle);
        }
    },
    skewOfWorld(t, origin, skewX, skewY, resize) {
        L.skewOfLocal(t, getTempLocal(t, origin), skewX, skewY, resize);
    },
    skewOfLocal(t, origin, skewX, skewY = 0, resize) {
        copy$3(matrix, t.__localMatrix);
        skewOfOuter(matrix, origin, skewX, skewY);
        L.setTransform(t, matrix, resize);
    },
    transformWorld(t, transform, resize) {
        copy$3(matrix, t.worldTransform);
        multiplyParent$2(matrix, transform);
        if (t.parent)
            divideParent(matrix, t.parent.worldTransform);
        L.setTransform(t, matrix, resize);
    },
    transform(t, transform, resize) {
        copy$3(matrix, t.localTransform);
        multiplyParent$2(matrix, transform);
        L.setTransform(t, matrix, resize);
    },
    setTransform(t, transform, resize) {
        const layout = getLayout(transform, t.origin && L.getInnerOrigin(t, t.origin), t.around && L.getInnerOrigin(t, t.around));
        if (resize) {
            const scaleX = layout.scaleX / t.scaleX;
            const scaleY = layout.scaleY / t.scaleY;
            delete layout.scaleX;
            delete layout.scaleY;
            t.set(layout);
            t.scaleResize(scaleX, scaleY, resize !== true);
        }
        else {
            t.set(layout);
        }
    },
    getFlipTransform(t, axis) {
        const m = getMatrixData();
        const sign = axis === 'x' ? 1 : -1;
        scaleOfOuter(m, L.getLocalOrigin(t, 'center'), -1 * sign, 1 * sign);
        return m;
    },
    getLocalOrigin(t, origin) {
        return PointHelper.tempToOuterOf(L.getInnerOrigin(t, origin), t.localTransform);
    },
    getInnerOrigin(t, origin) {
        const innerOrigin = {};
        AroundHelper.toPoint(origin, t.boxBounds, innerOrigin);
        return innerOrigin;
    },
    getRelativeWorld(t, relative, temp) {
        copy$3(matrix, t.worldTransform);
        divideParent(matrix, relative.worldTransform);
        return temp ? matrix : Object.assign({}, matrix);
    },
    drop(t, parent, index, resize) {
        t.setTransform(L.getRelativeWorld(t, parent, true), resize);
        parent.add(t, index);
    },
    hasParent(p, parent) {
        if (!parent)
            return false;
        while (p) {
            if (parent === p)
                return true;
            p = p.parent;
        }
    }
};
const L = LeafHelper;
const { updateAllMatrix: updateAllMatrix$1, updateMatrix: updateMatrix$1, updateAllWorldOpacity, updateAllChange } = L;
function moveByMatrix(t, matrix) {
    const { e, f } = t.__localMatrix;
    t.x += matrix.e - e;
    t.y += matrix.f - f;
}
function getTempLocal(t, world) {
    t.__layout.update();
    return t.parent ? PointHelper.tempToInnerOf(world, t.parent.__world) : world;
}

const LeafBoundsHelper = {
    worldBounds(target) {
        return target.__world;
    },
    localBoxBounds(target) {
        return target.__.eraser || target.__.visible === 0 ? null : (target.__local || target.__layout);
    },
    localStrokeBounds(target) {
        return target.__.eraser || target.__.visible === 0 ? null : target.__layout.localStrokeBounds;
    },
    localRenderBounds(target) {
        return target.__.eraser || target.__.visible === 0 ? null : target.__layout.localRenderBounds;
    },
    maskLocalBoxBounds(target) {
        return target.__.mask ? target.__localBoxBounds : null;
    },
    maskLocalStrokeBounds(target) {
        return target.__.mask ? target.__layout.localStrokeBounds : null;
    },
    maskLocalRenderBounds(target) {
        return target.__.mask ? target.__layout.localRenderBounds : null;
    },
    excludeRenderBounds(child, options) {
        if (options.bounds && !options.bounds.hit(child.__world, options.matrix))
            return true;
        if (options.hideBounds && options.hideBounds.includes(child.__world, options.matrix))
            return true;
        return false;
    }
};

const { updateBounds: updateBounds$1 } = LeafHelper;
const BranchHelper = {
    sort(a, b) {
        return (a.__.zIndex === b.__.zIndex) ? (a.__tempNumber - b.__tempNumber) : (a.__.zIndex - b.__.zIndex);
    },
    pushAllChildBranch(branch, leafList) {
        branch.__tempNumber = 1;
        if (branch.__.__childBranchNumber) {
            const { children } = branch;
            for (let i = 0, len = children.length; i < len; i++) {
                branch = children[i];
                if (branch.isBranch) {
                    branch.__tempNumber = 1;
                    leafList.add(branch);
                    pushAllChildBranch(branch, leafList);
                }
            }
        }
    },
    pushAllParent(leaf, leafList) {
        const { keys } = leafList;
        if (keys) {
            while (leaf.parent) {
                if (keys[leaf.parent.innerId] === undefined) {
                    leafList.add(leaf.parent);
                    leaf = leaf.parent;
                }
                else {
                    break;
                }
            }
        }
        else {
            while (leaf.parent) {
                leafList.add(leaf.parent);
                leaf = leaf.parent;
            }
        }
    },
    pushAllBranchStack(branch, pushList) {
        let start = pushList.length;
        const { children } = branch;
        for (let i = 0, len = children.length; i < len; i++) {
            if (children[i].isBranch) {
                pushList.push(children[i]);
            }
        }
        for (let i = start, len = pushList.length; i < len; i++) {
            pushAllBranchStack(pushList[i], pushList);
        }
    },
    updateBounds(branch, exclude) {
        const branchStack = [branch];
        pushAllBranchStack(branch, branchStack);
        updateBoundsByBranchStack(branchStack, exclude);
    },
    updateBoundsByBranchStack(branchStack, exclude) {
        let branch, children;
        for (let i = branchStack.length - 1; i > -1; i--) {
            branch = branchStack[i];
            children = branch.children;
            for (let j = 0, len = children.length; j < len; j++) {
                updateBounds$1(children[j]);
            }
            if (exclude && exclude === branch)
                continue;
            updateBounds$1(branch);
        }
    }
};
const { pushAllChildBranch, pushAllBranchStack, updateBoundsByBranchStack } = BranchHelper;

const WaitHelper = {
    run(wait) {
        if (wait && wait.length) {
            const len = wait.length;
            for (let i = 0; i < len; i++) {
                wait[i]();
            }
            wait.length === len ? wait.length = 0 : wait.splice(0, len);
        }
    }
};

const { getRelativeWorld: getRelativeWorld$1 } = LeafHelper;
const { toOuterOf: toOuterOf$2, getPoints, copy: copy$2 } = BoundsHelper;
const localContent = '_localContentBounds';
const worldContent = '_worldContentBounds', worldBox = '_worldBoxBounds', worldStroke = '_worldStrokeBounds';
class LeafLayout {
    get contentBounds() { return this._contentBounds || this.boxBounds; }
    set contentBounds(bounds) { this._contentBounds = bounds; }
    get strokeBounds() { return this._strokeBounds || this.boxBounds; }
    get renderBounds() { return this._renderBounds || this.boxBounds; }
    get localContentBounds() { toOuterOf$2(this.contentBounds, this.leaf.__localMatrix, this[localContent] || (this[localContent] = {})); return this[localContent]; }
    get localStrokeBounds() { return this._localStrokeBounds || this; }
    get localRenderBounds() { return this._localRenderBounds || this; }
    get worldContentBounds() { toOuterOf$2(this.contentBounds, this.leaf.__world, this[worldContent] || (this[worldContent] = {})); return this[worldContent]; }
    get worldBoxBounds() { toOuterOf$2(this.boxBounds, this.leaf.__world, this[worldBox] || (this[worldBox] = {})); return this[worldBox]; }
    get worldStrokeBounds() { toOuterOf$2(this.strokeBounds, this.leaf.__world, this[worldStroke] || (this[worldStroke] = {})); return this[worldStroke]; }
    get a() { return 1; }
    get b() { return 0; }
    get c() { return 0; }
    get d() { return 1; }
    get e() { return this.leaf.__.x; }
    get f() { return this.leaf.__.y; }
    get x() { return this.e + this.boxBounds.x; }
    get y() { return this.f + this.boxBounds.y; }
    get width() { return this.boxBounds.width; }
    get height() { return this.boxBounds.height; }
    constructor(leaf) {
        this.leaf = leaf;
        this.boxBounds = { x: 0, y: 0, width: 0, height: 0 };
        if (this.leaf.__local)
            this._localRenderBounds = this._localStrokeBounds = this.leaf.__local;
        this.boxChange();
        this.matrixChange();
    }
    createLocal() {
        const local = this.leaf.__local = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0, x: 0, y: 0, width: 0, height: 0 };
        if (!this._localStrokeBounds)
            this._localStrokeBounds = local;
        if (!this._localRenderBounds)
            this._localRenderBounds = local;
    }
    update() {
        const { leafer } = this.leaf;
        if (leafer) {
            if (leafer.ready)
                leafer.watcher.changed && leafer.layouter.layout();
            else
                leafer.start();
        }
        else {
            let root = this.leaf;
            while (root.parent && !root.parent.leafer) {
                root = root.parent;
            }
            Platform.layout(root);
        }
    }
    getTransform(relative = 'world') {
        this.update();
        const { leaf } = this;
        switch (relative) {
            case 'world':
                return leaf.__world;
            case 'local':
                return leaf.__localMatrix;
            case 'inner':
                return MatrixHelper.defaultMatrix;
            case 'page':
                relative = leaf.zoomLayer;
            default:
                return getRelativeWorld$1(leaf, relative);
        }
    }
    getBounds(type, relative = 'world') {
        this.update();
        switch (relative) {
            case 'world':
                return this.getWorldBounds(type);
            case 'local':
                return this.getLocalBounds(type);
            case 'inner':
                return this.getInnerBounds(type);
            case 'page':
                relative = this.leaf.zoomLayer;
            default:
                return new Bounds(this.getInnerBounds(type)).toOuterOf(this.getTransform(relative));
        }
    }
    getInnerBounds(type = 'box') {
        switch (type) {
            case 'render':
                return this.renderBounds;
            case 'content':
                if (this.contentBounds)
                    return this.contentBounds;
            case 'box':
                return this.boxBounds;
            case 'stroke':
                return this.strokeBounds;
        }
    }
    getLocalBounds(type = 'box') {
        switch (type) {
            case 'render':
                return this.localRenderBounds;
            case 'stroke':
                return this.localStrokeBounds;
            case 'content':
                if (this.contentBounds)
                    return this.localContentBounds;
            case 'box':
                return this.leaf.__localBoxBounds;
        }
    }
    getWorldBounds(type = 'box') {
        switch (type) {
            case 'render':
                return this.leaf.__world;
            case 'stroke':
                return this.worldStrokeBounds;
            case 'content':
                if (this.contentBounds)
                    return this.worldContentBounds;
            case 'box':
                return this.worldBoxBounds;
        }
    }
    getLayoutBounds(type, relative = 'world', unscale) {
        const { leaf } = this;
        let point, matrix, layoutBounds, bounds = this.getInnerBounds(type);
        switch (relative) {
            case 'world':
                point = leaf.getWorldPoint(bounds);
                matrix = leaf.__world;
                break;
            case 'local':
                const { scaleX, scaleY, rotation, skewX, skewY } = leaf.__;
                layoutBounds = { scaleX, scaleY, rotation, skewX, skewY };
                point = leaf.getLocalPointByInner(bounds);
                break;
            case 'inner':
                point = bounds;
                matrix = MatrixHelper.defaultMatrix;
                break;
            case 'page':
                relative = leaf.zoomLayer;
            default:
                point = leaf.getWorldPoint(bounds, relative);
                matrix = getRelativeWorld$1(leaf, relative, true);
        }
        if (!layoutBounds)
            layoutBounds = MatrixHelper.getLayout(matrix);
        copy$2(layoutBounds, bounds);
        PointHelper.copy(layoutBounds, point);
        if (unscale) {
            const { scaleX, scaleY } = layoutBounds;
            const uScaleX = Math.abs(scaleX);
            const uScaleY = Math.abs(scaleY);
            if (uScaleX !== 1 || uScaleY !== 1) {
                layoutBounds.scaleX /= uScaleX;
                layoutBounds.scaleY /= uScaleY;
                layoutBounds.width *= uScaleX;
                layoutBounds.height *= uScaleY;
            }
        }
        return layoutBounds;
    }
    getLayoutPoints(type, relative = 'world') {
        const { leaf } = this;
        const points = getPoints(this.getInnerBounds(type));
        let relativeLeaf;
        switch (relative) {
            case 'world':
                relativeLeaf = null;
                break;
            case 'local':
                relativeLeaf = leaf.parent;
                break;
            case 'inner':
                break;
            case 'page':
                relative = leaf.zoomLayer;
            default:
                relativeLeaf = relative;
        }
        if (relativeLeaf !== undefined)
            points.forEach(point => leaf.innerToWorld(point, null, false, relativeLeaf));
        return points;
    }
    shrinkContent() {
        const { x, y, width, height } = this.boxBounds;
        this._contentBounds = { x, y, width, height };
    }
    spreadStroke() {
        const { x, y, width, height } = this.strokeBounds;
        this._strokeBounds = { x, y, width, height };
        this._localStrokeBounds = { x, y, width, height };
        if (!this.renderSpread)
            this.spreadRenderCancel();
    }
    spreadRender() {
        const { x, y, width, height } = this.renderBounds;
        this._renderBounds = { x, y, width, height };
        this._localRenderBounds = { x, y, width, height };
    }
    shrinkContentCancel() {
        this._contentBounds = undefined;
    }
    spreadStrokeCancel() {
        const same = this.renderBounds === this.strokeBounds;
        this._strokeBounds = this.boxBounds;
        this._localStrokeBounds = this.leaf.__localBoxBounds;
        if (same)
            this.spreadRenderCancel();
    }
    spreadRenderCancel() {
        this._renderBounds = this._strokeBounds;
        this._localRenderBounds = this._localStrokeBounds;
    }
    boxChange() {
        this.boxChanged = true;
        this.localBoxChanged || this.localBoxChange();
        this.hitCanvasChanged = true;
    }
    localBoxChange() {
        this.localBoxChanged = true;
        this.boundsChanged = true;
    }
    strokeChange() {
        this.strokeChanged = true;
        this.strokeSpread || (this.strokeSpread = 1);
        this.boundsChanged = true;
        this.hitCanvasChanged = true;
    }
    renderChange() {
        this.renderChanged = true;
        this.renderSpread || (this.renderSpread = 1);
        this.boundsChanged = true;
    }
    scaleChange() {
        this.scaleChanged = true;
        this._scaleOrRotationChange();
    }
    rotationChange() {
        this.rotationChanged = true;
        this.affectRotation = true;
        this._scaleOrRotationChange();
    }
    _scaleOrRotationChange() {
        this.affectScaleOrRotation = true;
        this.matrixChange();
        if (!this.leaf.__local)
            this.createLocal();
    }
    matrixChange() {
        this.matrixChanged = true;
        this.localBoxChanged || this.localBoxChange();
    }
    surfaceChange() {
        this.surfaceChanged = true;
    }
    opacityChange() {
        this.opacityChanged = true;
        this.surfaceChanged || this.surfaceChange();
    }
    childrenSortChange() {
        if (!this.childrenSortChanged) {
            this.childrenSortChanged = true;
            this.leaf.forceUpdate('surface');
        }
    }
    destroy() { }
}

class Event {
    constructor(type, target) {
        this.bubbles = false;
        this.type = type;
        if (target)
            this.target = target;
    }
    stopDefault() {
        this.isStopDefault = true;
        if (this.origin)
            Platform.event.stopDefault(this.origin);
    }
    stopNow() {
        this.isStopNow = true;
        this.isStop = true;
        if (this.origin)
            Platform.event.stopNow(this.origin);
    }
    stop() {
        this.isStop = true;
        if (this.origin)
            Platform.event.stop(this.origin);
    }
}

class ChildEvent extends Event {
    constructor(type, child, parent) {
        super(type, child);
        this.parent = parent;
        this.child = child;
    }
}
ChildEvent.ADD = 'child.add';
ChildEvent.REMOVE = 'child.remove';
ChildEvent.CREATED = 'created';
ChildEvent.MOUNTED = 'mounted';
ChildEvent.UNMOUNTED = 'unmounted';
ChildEvent.DESTROY = 'destroy';

class PropertyEvent extends Event {
    constructor(type, target, attrName, oldValue, newValue) {
        super(type, target);
        this.attrName = attrName;
        this.oldValue = oldValue;
        this.newValue = newValue;
    }
}
PropertyEvent.CHANGE = 'property.change';
PropertyEvent.LEAFER_CHANGE = 'property.leafer_change';

class ImageEvent extends Event {
    constructor(type, data) {
        super(type);
        Object.assign(this, data);
    }
}
ImageEvent.LOAD = 'image.load';
ImageEvent.LOADED = 'image.loaded';
ImageEvent.ERROR = 'image.error';

class ResizeEvent extends Event {
    get bigger() {
        if (!this.old)
            return true;
        const { width, height } = this.old;
        return this.width >= width && this.height >= height;
    }
    get smaller() {
        return !this.bigger;
    }
    get samePixelRatio() {
        if (!this.old)
            return true;
        return this.pixelRatio === this.old.pixelRatio;
    }
    constructor(size, oldSize) {
        if (typeof size === 'object') {
            super(ResizeEvent.RESIZE);
            Object.assign(this, size);
        }
        else {
            super(size);
        }
        this.old = oldSize;
    }
}
ResizeEvent.RESIZE = 'resize';

class WatchEvent extends Event {
    constructor(type, data) {
        super(type);
        this.data = data;
    }
}
WatchEvent.REQUEST = 'watch.request';
WatchEvent.DATA = 'watch.data';

class LayoutEvent extends Event {
    constructor(type, data, times) {
        super(type);
        if (data) {
            this.data = data;
            this.times = times;
        }
    }
}
LayoutEvent.CHECK_UPDATE = 'layout.check_update';
LayoutEvent.REQUEST = 'layout.request';
LayoutEvent.START = 'layout.start';
LayoutEvent.BEFORE = 'layout.before';
LayoutEvent.LAYOUT = 'layout';
LayoutEvent.AFTER = 'layout.after';
LayoutEvent.AGAIN = 'layout.again';
LayoutEvent.END = 'layout.end';

class RenderEvent extends Event {
    constructor(type, times, bounds, options) {
        super(type);
        if (times)
            this.times = times;
        if (bounds) {
            this.renderBounds = bounds;
            this.renderOptions = options;
        }
    }
}
RenderEvent.REQUEST = 'render.request';
RenderEvent.CHILD_START = 'render.child_start';
RenderEvent.START = 'render.start';
RenderEvent.BEFORE = 'render.before';
RenderEvent.RENDER = 'render';
RenderEvent.AFTER = 'render.after';
RenderEvent.AGAIN = 'render.again';
RenderEvent.END = 'render.end';
RenderEvent.NEXT = 'render.next';

class LeaferEvent extends Event {
}
LeaferEvent.START = 'leafer.start';
LeaferEvent.BEFORE_READY = 'leafer.before_ready';
LeaferEvent.READY = 'leafer.ready';
LeaferEvent.AFTER_READY = 'leafer.after_ready';
LeaferEvent.VIEW_READY = 'leafer.view_ready';
LeaferEvent.VIEW_COMPLETED = 'leafer.view_completed';
LeaferEvent.STOP = 'leafer.stop';
LeaferEvent.RESTART = 'leafer.restart';
LeaferEvent.END = 'leafer.end';

const empty = {};
class Eventer {
    set event(map) { this.on(map); }
    on(type, listener, options) {
        if (!listener) {
            let event, map = type;
            for (let key in map)
                event = map[key], event instanceof Array ? this.on(key, event[0], event[1]) : this.on(key, event);
            return;
        }
        let capture, once;
        if (options) {
            if (options === 'once') {
                once = true;
            }
            else if (typeof options === 'boolean') {
                capture = options;
            }
            else {
                capture = options.capture;
                once = options.once;
            }
        }
        let events;
        const map = __getListenerMap(this, capture, true);
        const typeList = typeof type === 'string' ? type.split(' ') : type;
        const item = once ? { listener, once } : { listener };
        typeList.forEach(type => {
            if (type) {
                events = map[type];
                if (events) {
                    if (events.findIndex(item => item.listener === listener) === -1)
                        events.push(item);
                }
                else {
                    map[type] = [item];
                }
            }
        });
    }
    off(type, listener, options) {
        if (type) {
            const typeList = typeof type === 'string' ? type.split(' ') : type;
            if (listener) {
                let capture;
                if (options)
                    capture = typeof options === 'boolean' ? options : (options === 'once' ? false : options.capture);
                let events, index;
                const map = __getListenerMap(this, capture);
                typeList.forEach(type => {
                    if (type) {
                        events = map[type];
                        if (events) {
                            index = events.findIndex(item => item.listener === listener);
                            if (index > -1)
                                events.splice(index, 1);
                            if (!events.length)
                                delete map[type];
                        }
                    }
                });
            }
            else {
                const { __bubbleMap: b, __captureMap: c } = this;
                typeList.forEach(type => {
                    if (b)
                        delete b[type];
                    if (c)
                        delete c[type];
                });
            }
        }
        else {
            this.__bubbleMap = this.__captureMap = undefined;
        }
    }
    on_(type, listener, bind, options) {
        if (bind)
            listener = listener.bind(bind);
        this.on(type, listener, options);
        return { type, current: this, listener, options };
    }
    off_(id) {
        if (!id)
            return;
        const list = id instanceof Array ? id : [id];
        list.forEach(item => item.current.off(item.type, item.listener, item.options));
        list.length = 0;
    }
    once(type, listener, capture) {
        this.on(type, listener, { once: true, capture });
    }
    emit(type, event, capture) {
        if (!event && EventCreator.has(type))
            event = EventCreator.get(type, { type, target: this, current: this });
        const map = __getListenerMap(this, capture);
        const list = map[type];
        if (list) {
            let item;
            for (let i = 0, len = list.length; i < len; i++) {
                item = list[i];
                item.listener(event);
                if (item.once) {
                    this.off(type, item.listener, capture);
                    i--, len--;
                }
                if (event && event.isStopNow)
                    break;
            }
        }
        this.syncEventer && this.syncEventer.emitEvent(event, capture);
    }
    emitEvent(event, capture) {
        event.current = this;
        this.emit(event.type, event, capture);
    }
    hasEvent(type, capture) {
        if (this.syncEventer && this.syncEventer.hasEvent(type, capture))
            return true;
        const { __bubbleMap: b, __captureMap: c } = this;
        const hasB = b && b[type], hasC = c && c[type];
        return !!(capture === undefined ? (hasB || hasC) : (capture ? hasC : hasB));
    }
    destroy() {
        this.__captureMap = this.__bubbleMap = this.syncEventer = null;
    }
}
function __getListenerMap(eventer, capture, create) {
    if (capture) {
        const { __captureMap: c } = eventer;
        if (c) {
            return c;
        }
        else {
            return create ? eventer.__captureMap = {} : empty;
        }
    }
    else {
        const { __bubbleMap: b } = eventer;
        if (b) {
            return b;
        }
        else {
            return create ? eventer.__bubbleMap = {} : empty;
        }
    }
}

const { on, on_, off, off_, once, emit, emitEvent, hasEvent, destroy } = Eventer.prototype;
const LeafEventer = { on, on_, off, off_, once, emit, emitEvent, hasEvent, destroyEventer: destroy };

const { isFinite } = Number;
const debug = Debug.get('setAttr');
const LeafDataProxy = {
    __setAttr(name, newValue, checkFiniteNumber) {
        if (this.leaferIsCreated) {
            const oldValue = this.__.__getInput(name);
            if (checkFiniteNumber && !isFinite(newValue) && newValue !== undefined) {
                debug.warn(this.innerName, name, newValue);
                newValue = undefined;
            }
            if (typeof newValue === 'object' || oldValue !== newValue) {
                this.__realSetAttr(name, newValue);
                const { CHANGE } = PropertyEvent;
                const event = new PropertyEvent(CHANGE, this, name, oldValue, newValue);
                if (this.isLeafer) {
                    this.emitEvent(new PropertyEvent(PropertyEvent.LEAFER_CHANGE, this, name, oldValue, newValue));
                }
                else {
                    if (this.hasEvent(CHANGE))
                        this.emitEvent(event);
                }
                this.leafer.emitEvent(event);
                return true;
            }
            else {
                return false;
            }
        }
        else {
            this.__realSetAttr(name, newValue);
            return true;
        }
    },
    __realSetAttr(name, newValue) {
        const data = this.__;
        data[name] = newValue;
        if (this.__proxyData)
            this.setProxyAttr(name, newValue);
        if (data.normalStyle)
            this.lockNormalStyle || data.normalStyle[name] === undefined || (data.normalStyle[name] = newValue);
    },
    __getAttr(name) {
        if (this.__proxyData)
            return this.getProxyAttr(name);
        return this.__.__get(name);
    }
};

const { setLayout, multiplyParent: multiplyParent$1, translateInner, defaultWorld } = MatrixHelper;
const { toPoint, tempPoint } = AroundHelper;
const LeafMatrix = {
    __updateWorldMatrix() {
        multiplyParent$1(this.__local || this.__layout, this.parent ? this.parent.__world : defaultWorld, this.__world, !!this.__layout.affectScaleOrRotation, this.__, this.parent && this.parent.__);
    },
    __updateLocalMatrix() {
        if (this.__local) {
            const layout = this.__layout, local = this.__local, data = this.__;
            if (layout.affectScaleOrRotation) {
                if (layout.scaleChanged || layout.rotationChanged) {
                    setLayout(local, data, null, null, layout.affectRotation);
                    layout.scaleChanged = layout.rotationChanged = false;
                }
            }
            local.e = data.x + data.offsetX;
            local.f = data.y + data.offsetY;
            if (data.around || data.origin) {
                toPoint(data.around || data.origin, layout.boxBounds, tempPoint);
                translateInner(local, -tempPoint.x, -tempPoint.y, !data.around);
            }
        }
        this.__layout.matrixChanged = false;
    }
};

const { updateMatrix, updateAllMatrix } = LeafHelper;
const { updateBounds } = BranchHelper;
const { toOuterOf: toOuterOf$1, copyAndSpread, copy: copy$1 } = BoundsHelper;
const { toBounds } = PathBounds;
const LeafBounds = {
    __updateWorldBounds() {
        toOuterOf$1(this.__layout.renderBounds, this.__world, this.__world);
        if (this.__layout.resized) {
            this.__onUpdateSize();
            this.__layout.resized = false;
        }
    },
    __updateLocalBounds() {
        const layout = this.__layout;
        if (layout.boxChanged) {
            if (!this.__.__pathInputed)
                this.__updatePath();
            this.__updateRenderPath();
            this.__updateBoxBounds();
            layout.resized = true;
        }
        if (layout.localBoxChanged) {
            if (this.__local)
                this.__updateLocalBoxBounds();
            layout.localBoxChanged = false;
            if (layout.strokeSpread)
                layout.strokeChanged = true;
            if (layout.renderSpread)
                layout.renderChanged = true;
            if (this.parent)
                this.parent.__layout.boxChange();
        }
        layout.boxChanged = false;
        if (layout.strokeChanged) {
            layout.strokeSpread = this.__updateStrokeSpread();
            if (layout.strokeSpread) {
                if (layout.strokeBounds === layout.boxBounds)
                    layout.spreadStroke();
                this.__updateStrokeBounds();
                this.__updateLocalStrokeBounds();
            }
            else {
                layout.spreadStrokeCancel();
            }
            layout.strokeChanged = false;
            if (layout.renderSpread || layout.strokeSpread !== layout.strokeBoxSpread)
                layout.renderChanged = true;
            if (this.parent)
                this.parent.__layout.strokeChange();
            layout.resized = true;
        }
        if (layout.renderChanged) {
            layout.renderSpread = this.__updateRenderSpread();
            if (layout.renderSpread) {
                if (layout.renderBounds === layout.boxBounds || layout.renderBounds === layout.strokeBounds)
                    layout.spreadRender();
                this.__updateRenderBounds();
                this.__updateLocalRenderBounds();
            }
            else {
                layout.spreadRenderCancel();
            }
            layout.renderChanged = false;
            if (this.parent)
                this.parent.__layout.renderChange();
        }
        layout.boundsChanged = false;
    },
    __updateLocalBoxBounds() {
        if (this.__hasMotionPath)
            this.__updateMotionPath();
        if (this.__hasAutoLayout)
            this.__updateAutoLayout();
        toOuterOf$1(this.__layout.boxBounds, this.__local, this.__local);
    },
    __updateLocalStrokeBounds() {
        toOuterOf$1(this.__layout.strokeBounds, this.__localMatrix, this.__layout.localStrokeBounds);
    },
    __updateLocalRenderBounds() {
        toOuterOf$1(this.__layout.renderBounds, this.__localMatrix, this.__layout.localRenderBounds);
    },
    __updateBoxBounds() {
        const b = this.__layout.boxBounds;
        const data = this.__;
        if (data.__pathInputed) {
            toBounds(data.path, b);
        }
        else {
            b.x = 0;
            b.y = 0;
            b.width = data.width;
            b.height = data.height;
        }
    },
    __updateAutoLayout() {
        this.__layout.matrixChanged = true;
        if (this.isBranch) {
            if (this.leaferIsReady)
                this.leafer.layouter.addExtra(this);
            if (this.__.flow) {
                if (this.__layout.boxChanged)
                    this.__updateFlowLayout();
                updateAllMatrix(this);
                updateBounds(this, this);
                if (this.__.__autoSide)
                    this.__updateBoxBounds(true);
            }
            else {
                updateAllMatrix(this);
                updateBounds(this, this);
            }
        }
        else {
            updateMatrix(this);
        }
    },
    __updateNaturalSize() {
        const { __: data, __layout: layout } = this;
        data.__naturalWidth = layout.boxBounds.width;
        data.__naturalHeight = layout.boxBounds.height;
    },
    __updateStrokeBounds() {
        const layout = this.__layout;
        copyAndSpread(layout.strokeBounds, layout.boxBounds, layout.strokeBoxSpread);
    },
    __updateRenderBounds() {
        const layout = this.__layout;
        layout.renderSpread > 0 ? copyAndSpread(layout.renderBounds, layout.boxBounds, layout.renderSpread) : copy$1(layout.renderBounds, layout.strokeBounds);
    }
};

const LeafRender = {
    __render(canvas, options) {
        if (this.__worldOpacity) {
            canvas.setWorld(this.__nowWorld = this.__getNowWorld(options));
            canvas.opacity = this.__.opacity;
            if (this.__.__single) {
                if (this.__.eraser === 'path')
                    return this.__renderEraser(canvas, options);
                const tempCanvas = canvas.getSameCanvas(true, true);
                this.__draw(tempCanvas, options);
                if (this.__worldFlipped) {
                    canvas.copyWorldByReset(tempCanvas, this.__nowWorld, null, this.__.__blendMode, true);
                }
                else {
                    canvas.copyWorldToInner(tempCanvas, this.__nowWorld, this.__layout.renderBounds, this.__.__blendMode);
                }
                tempCanvas.recycle(this.__nowWorld);
            }
            else {
                this.__draw(canvas, options);
            }
        }
    },
    __clip(canvas, options) {
        if (this.__worldOpacity) {
            canvas.setWorld(this.__nowWorld = this.__getNowWorld(options));
            this.__drawRenderPath(canvas);
            this.windingRule ? canvas.clip(this.windingRule) : canvas.clip();
        }
    },
    __updateWorldOpacity() {
        this.__worldOpacity = this.__.visible ? (this.parent ? this.parent.__worldOpacity * this.__.opacity : this.__.opacity) : 0;
        if (this.__layout.opacityChanged)
            this.__layout.opacityChanged = false;
    }
};

const { excludeRenderBounds } = LeafBoundsHelper;
const BranchRender = {
    __updateChange() {
        const { __layout: layout } = this;
        if (layout.childrenSortChanged) {
            this.__updateSortChildren();
            layout.childrenSortChanged = false;
        }
        this.__.__checkSingle();
    },
    __render(canvas, options) {
        this.__nowWorld = this.__getNowWorld(options);
        if (this.__worldOpacity) {
            if (this.__.__single) {
                if (this.__.eraser === 'path')
                    return this.__renderEraser(canvas, options);
                const tempCanvas = canvas.getSameCanvas(false, true);
                this.__renderBranch(tempCanvas, options);
                const nowWorld = this.__nowWorld;
                canvas.opacity = this.__.opacity;
                canvas.copyWorldByReset(tempCanvas, nowWorld, nowWorld, this.__.__blendMode, true);
                tempCanvas.recycle(nowWorld);
            }
            else {
                this.__renderBranch(canvas, options);
            }
        }
    },
    __renderBranch(canvas, options) {
        if (this.__hasMask) {
            this.__renderMask(canvas, options);
        }
        else {
            const { children } = this;
            for (let i = 0, len = children.length; i < len; i++) {
                if (excludeRenderBounds(children[i], options))
                    continue;
                children[i].__render(canvas, options);
            }
        }
    },
    __clip(canvas, options) {
        if (this.__worldOpacity) {
            const { children } = this;
            for (let i = 0, len = children.length; i < len; i++) {
                if (excludeRenderBounds(children[i], options))
                    continue;
                children[i].__clip(canvas, options);
            }
        }
    }
};

const { LEAF, create } = IncrementId;
const { toInnerPoint, toOuterPoint, multiplyParent } = MatrixHelper;
const { toOuterOf } = BoundsHelper;
const { copy, move } = PointHelper;
const { moveLocal, zoomOfLocal, rotateOfLocal, skewOfLocal, moveWorld, zoomOfWorld, rotateOfWorld, skewOfWorld, transform, transformWorld, setTransform, getFlipTransform, getLocalOrigin, getRelativeWorld, drop } = LeafHelper;
exports.Leaf = class Leaf {
    get tag() { return this.__tag; }
    set tag(_value) { }
    get __tag() { return 'Leaf'; }
    get innerName() { return this.__.name || this.tag + this.innerId; }
    get __DataProcessor() { return LeafData; }
    get __LayoutProcessor() { return LeafLayout; }
    get leaferIsCreated() { return this.leafer && this.leafer.created; }
    get leaferIsReady() { return this.leafer && this.leafer.ready; }
    get isLeafer() { return false; }
    get isBranch() { return false; }
    get isBranchLeaf() { return false; }
    get __localMatrix() { return this.__local || this.__layout; }
    get __localBoxBounds() { return this.__local || this.__layout; }
    get worldTransform() { return this.__layout.getTransform('world'); }
    get localTransform() { return this.__layout.getTransform('local'); }
    get boxBounds() { return this.getBounds('box', 'inner'); }
    get renderBounds() { return this.getBounds('render', 'inner'); }
    get worldBoxBounds() { return this.getBounds('box'); }
    get worldStrokeBounds() { return this.getBounds('stroke'); }
    get worldRenderBounds() { return this.getBounds('render'); }
    get worldOpacity() { this.__layout.update(); return this.__worldOpacity; }
    get __worldFlipped() { return this.__world.scaleX < 0 || this.__world.scaleY < 0; }
    get __onlyHitMask() { return this.__hasMask && !this.__.hitChildren; }
    get __ignoreHitWorld() { return (this.__hasMask || this.__hasEraser) && this.__.hitChildren; }
    get __inLazyBounds() { const { leafer } = this; return leafer && leafer.created && leafer.lazyBounds.hit(this.__world); }
    get pathInputed() { return this.__.__pathInputed; }
    set event(map) { this.on(map); }
    constructor(data) {
        this.innerId = create(LEAF);
        this.reset(data);
        if (this.__bubbleMap)
            this.__emitLifeEvent(ChildEvent.CREATED);
    }
    reset(data) {
        if (this.leafer)
            this.leafer.forceRender(this.__world);
        this.__world = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0, x: 0, y: 0, width: 0, height: 0, scaleX: 1, scaleY: 1 };
        if (data !== null)
            this.__local = { a: 1, b: 0, c: 0, d: 1, e: 0, f: 0, x: 0, y: 0, width: 0, height: 0 };
        this.__worldOpacity = 1;
        this.__ = new this.__DataProcessor(this);
        this.__layout = new this.__LayoutProcessor(this);
        if (this.__level)
            this.resetCustom();
        if (data) {
            if (data.__)
                data = data.toJSON();
            data.children ? this.set(data) : Object.assign(this, data);
        }
    }
    resetCustom() {
        this.__hasMask = this.__hasEraser = null;
        this.forceUpdate();
    }
    waitParent(item, bind) {
        if (bind)
            item = item.bind(bind);
        this.parent ? item() : this.on(ChildEvent.ADD, item, 'once');
    }
    waitLeafer(item, bind) {
        if (bind)
            item = item.bind(bind);
        this.leafer ? item() : this.on(ChildEvent.MOUNTED, item, 'once');
    }
    nextRender(item, bind, off) {
        this.leafer ? this.leafer.nextRender(item, bind, off) : this.waitLeafer(() => this.leafer.nextRender(item, bind, off));
    }
    removeNextRender(item) {
        this.nextRender(item, null, 'off');
    }
    __bindLeafer(leafer) {
        if (this.isLeafer && leafer !== null)
            leafer = this;
        if (this.leafer && !leafer)
            this.leafer.leafs--;
        this.leafer = leafer;
        if (leafer) {
            leafer.leafs++;
            this.__level = this.parent ? this.parent.__level + 1 : 1;
            if (this.animation)
                this.__runAnimation('in');
            if (this.__bubbleMap)
                this.__emitLifeEvent(ChildEvent.MOUNTED);
        }
        else {
            this.__emitLifeEvent(ChildEvent.UNMOUNTED);
        }
        if (this.isBranch) {
            const { children } = this;
            for (let i = 0, len = children.length; i < len; i++) {
                children[i].__bindLeafer(leafer);
            }
        }
    }
    set(_data, _isTemp) { }
    get(_name) { return undefined; }
    setAttr(name, value) { this[name] = value; }
    getAttr(name) { return this[name]; }
    getComputedAttr(name) { return this.__[name]; }
    toJSON(options) {
        if (options)
            this.__layout.update();
        return this.__.__getInputData(null, options);
    }
    toString(options) {
        return JSON.stringify(this.toJSON(options));
    }
    toSVG() { return undefined; }
    __SVG(_data) { }
    toHTML() { return undefined; }
    __setAttr(_attrName, _newValue) { return true; }
    __getAttr(_attrName) { return undefined; }
    setProxyAttr(_attrName, _newValue) { }
    getProxyAttr(_attrName) { return undefined; }
    find(_condition, _options) { return undefined; }
    findTag(_tag) { return undefined; }
    findOne(_condition, _options) { return undefined; }
    findId(_id) { return undefined; }
    focus(_value) { }
    updateState() { }
    updateLayout() {
        this.__layout.update();
    }
    forceUpdate(attrName) {
        if (attrName === undefined)
            attrName = 'width';
        else if (attrName === 'surface')
            attrName = 'blendMode';
        const value = this.__.__getInput(attrName);
        this.__[attrName] = value === undefined ? null : undefined;
        this[attrName] = value;
    }
    forceRender(_bounds) {
        this.forceUpdate('surface');
    }
    __updateWorldMatrix() { }
    __updateLocalMatrix() { }
    __updateWorldBounds() { }
    __updateLocalBounds() { }
    __updateLocalBoxBounds() { }
    __updateLocalStrokeBounds() { }
    __updateLocalRenderBounds() { }
    __updateBoxBounds() { }
    __updateContentBounds() { }
    __updateStrokeBounds() { }
    __updateRenderBounds() { }
    __updateAutoLayout() { }
    __updateFlowLayout() { }
    __updateNaturalSize() { }
    __updateStrokeSpread() { return 0; }
    __updateRenderSpread() { return 0; }
    __onUpdateSize() { }
    __updateEraser(value) {
        this.__hasEraser = value ? true : this.children.some(item => item.__.eraser);
    }
    __renderEraser(canvas, options) {
        canvas.save();
        this.__clip(canvas, options);
        const { renderBounds: r } = this.__layout;
        canvas.clearRect(r.x, r.y, r.width, r.height);
        canvas.restore();
    }
    __updateMask(value) {
        this.__hasMask = value ? true : this.children.some(item => item.__.mask);
    }
    __renderMask(_canvas, _options) { }
    __getNowWorld(options) {
        if (options.matrix) {
            if (!this.__cameraWorld)
                this.__cameraWorld = {};
            const cameraWorld = this.__cameraWorld;
            multiplyParent(this.__world, options.matrix, cameraWorld, undefined, this.__world);
            toOuterOf(this.__layout.renderBounds, cameraWorld, cameraWorld);
            return cameraWorld;
        }
        else {
            return this.__world;
        }
    }
    getTransform(relative) {
        return this.__layout.getTransform(relative || 'local');
    }
    getBounds(type, relative) {
        return this.__layout.getBounds(type, relative);
    }
    getLayoutBounds(type, relative, unscale) {
        return this.__layout.getLayoutBounds(type, relative, unscale);
    }
    getLayoutPoints(type, relative) {
        return this.__layout.getLayoutPoints(type, relative);
    }
    getWorldBounds(inner, relative, change) {
        const matrix = relative ? getRelativeWorld(this, relative) : this.worldTransform;
        const to = change ? inner : {};
        toOuterOf(inner, matrix, to);
        return to;
    }
    worldToLocal(world, to, distance, relative) {
        if (this.parent) {
            this.parent.worldToInner(world, to, distance, relative);
        }
        else {
            if (to)
                copy(to, world);
        }
    }
    localToWorld(local, to, distance, relative) {
        if (this.parent) {
            this.parent.innerToWorld(local, to, distance, relative);
        }
        else {
            if (to)
                copy(to, local);
        }
    }
    worldToInner(world, to, distance, relative) {
        if (relative) {
            relative.innerToWorld(world, to, distance);
            world = to ? to : world;
        }
        toInnerPoint(this.worldTransform, world, to, distance);
    }
    innerToWorld(inner, to, distance, relative) {
        toOuterPoint(this.worldTransform, inner, to, distance);
        if (relative)
            relative.worldToInner(to ? to : inner, null, distance);
    }
    getBoxPoint(world, relative, distance, change) {
        return this.getBoxPointByInner(this.getInnerPoint(world, relative, distance, change), null, null, true);
    }
    getBoxPointByInner(inner, _relative, _distance, change) {
        const point = change ? inner : Object.assign({}, inner), { x, y } = this.boxBounds;
        move(point, -x, -y);
        return point;
    }
    getInnerPoint(world, relative, distance, change) {
        const point = change ? world : {};
        this.worldToInner(world, point, distance, relative);
        return point;
    }
    getInnerPointByBox(box, _relative, _distance, change) {
        const point = change ? box : Object.assign({}, box), { x, y } = this.boxBounds;
        move(point, x, y);
        return point;
    }
    getInnerPointByLocal(local, _relative, distance, change) {
        return this.getInnerPoint(local, this.parent, distance, change);
    }
    getLocalPoint(world, relative, distance, change) {
        const point = change ? world : {};
        this.worldToLocal(world, point, distance, relative);
        return point;
    }
    getLocalPointByInner(inner, _relative, distance, change) {
        return this.getWorldPoint(inner, this.parent, distance, change);
    }
    getPagePoint(world, relative, distance, change) {
        const layer = this.leafer ? this.leafer.zoomLayer : this;
        return layer.getInnerPoint(world, relative, distance, change);
    }
    getWorldPoint(inner, relative, distance, change) {
        const point = change ? inner : {};
        this.innerToWorld(inner, point, distance, relative);
        return point;
    }
    getWorldPointByBox(box, relative, distance, change) {
        return this.getWorldPoint(this.getInnerPointByBox(box, null, null, change), relative, distance, true);
    }
    getWorldPointByLocal(local, relative, distance, change) {
        const point = change ? local : {};
        this.localToWorld(local, point, distance, relative);
        return point;
    }
    getWorldPointByPage(page, relative, distance, change) {
        const layer = this.leafer ? this.leafer.zoomLayer : this;
        return layer.getWorldPoint(page, relative, distance, change);
    }
    setTransform(matrix, resize) {
        setTransform(this, matrix, resize);
    }
    transform(matrix, resize) {
        transform(this, matrix, resize);
    }
    move(x, y) {
        moveLocal(this, x, y);
    }
    moveInner(x, y) {
        moveWorld(this, x, y, true);
    }
    scaleOf(origin, scaleX, scaleY, resize) {
        zoomOfLocal(this, getLocalOrigin(this, origin), scaleX, scaleY, resize);
    }
    rotateOf(origin, rotation) {
        rotateOfLocal(this, getLocalOrigin(this, origin), rotation);
    }
    skewOf(origin, skewX, skewY, resize) {
        skewOfLocal(this, getLocalOrigin(this, origin), skewX, skewY, resize);
    }
    transformWorld(worldTransform, resize) {
        transformWorld(this, worldTransform, resize);
    }
    moveWorld(x, y) {
        moveWorld(this, x, y);
    }
    scaleOfWorld(worldOrigin, scaleX, scaleY, resize) {
        zoomOfWorld(this, worldOrigin, scaleX, scaleY, resize);
    }
    rotateOfWorld(worldOrigin, rotation) {
        rotateOfWorld(this, worldOrigin, rotation);
    }
    skewOfWorld(worldOrigin, skewX, skewY, resize) {
        skewOfWorld(this, worldOrigin, skewX, skewY, resize);
    }
    flip(axis) {
        transform(this, getFlipTransform(this, axis));
    }
    scaleResize(scaleX, scaleY = scaleX, _noResize) {
        this.scaleX *= scaleX;
        this.scaleY *= scaleY;
    }
    __scaleResize(_scaleX, _scaleY) { }
    resizeWidth(_width) { }
    resizeHeight(_height) { }
    __hitWorld(_point) { return true; }
    __hit(_local) { return true; }
    __hitFill(_inner) { return true; }
    __hitStroke(_inner, _strokeWidth) { return true; }
    __hitPixel(_inner) { return true; }
    __drawHitPath(_canvas) { }
    __updateHitCanvas() { }
    __render(_canvas, _options) { }
    __drawFast(_canvas, _options) { }
    __draw(_canvas, _options) { }
    __clip(_canvas, _options) { }
    __renderShape(_canvas, _options, _ignoreFill, _ignoreStroke) { }
    __updateWorldOpacity() { }
    __updateChange() { }
    __drawPath(_canvas) { }
    __drawRenderPath(_canvas) { }
    __updatePath() { }
    __updateRenderPath() { }
    getMotionPathData() {
        return needPlugin('path');
    }
    getMotionPoint(_motionDistance) {
        return needPlugin('path');
    }
    getMotionTotal() {
        return 0;
    }
    __updateMotionPath() { }
    __runAnimation(_type, _complete) { }
    __updateSortChildren() { }
    add(_child, _index) { }
    remove(_child, destroy) {
        if (this.parent)
            this.parent.remove(this, destroy);
    }
    dropTo(parent, index, resize) {
        drop(this, parent, index, resize);
    }
    on(_type, _listener, _options) { }
    off(_type, _listener, _options) { }
    on_(_type, _listener, _bind, _options) { return undefined; }
    off_(_id) { }
    once(_type, _listener, _capture) { }
    emit(_type, _event, _capture) { }
    emitEvent(_event, _capture) { }
    hasEvent(_type, _capture) { return false; }
    static changeAttr(attrName, defaultValue, fn) {
        fn ? this.addAttr(attrName, defaultValue, fn) : defineDataProcessor(this.prototype, attrName, defaultValue);
    }
    static addAttr(attrName, defaultValue, fn) {
        if (!fn)
            fn = boundsType;
        fn(defaultValue)(this.prototype, attrName);
    }
    __emitLifeEvent(type) {
        if (this.hasEvent(type))
            this.emitEvent(new ChildEvent(type, this, this.parent));
    }
    destroy() {
        if (!this.destroyed) {
            if (this.parent)
                this.remove();
            if (this.children)
                this.clear();
            this.__emitLifeEvent(ChildEvent.DESTROY);
            this.__.destroy();
            this.__layout.destroy();
            this.destroyEventer();
            this.destroyed = true;
        }
    }
};
exports.Leaf = __decorate([
    useModule(LeafDataProxy),
    useModule(LeafMatrix),
    useModule(LeafBounds),
    useModule(LeafEventer),
    useModule(LeafRender)
], exports.Leaf);

const { setListWithFn } = BoundsHelper;
const { sort } = BranchHelper;
const { localBoxBounds, localStrokeBounds, localRenderBounds, maskLocalBoxBounds, maskLocalStrokeBounds, maskLocalRenderBounds } = LeafBoundsHelper;
exports.Branch = class Branch extends exports.Leaf {
    __updateStrokeSpread() {
        const { children } = this;
        for (let i = 0, len = children.length; i < len; i++) {
            if (children[i].__layout.strokeSpread)
                return 1;
        }
        return 0;
    }
    __updateRenderSpread() {
        const { children } = this;
        for (let i = 0, len = children.length; i < len; i++) {
            if (children[i].__layout.renderSpread)
                return 1;
        }
        return 0;
    }
    __updateBoxBounds() {
        setListWithFn(this.__layout.boxBounds, this.children, this.__hasMask ? maskLocalBoxBounds : localBoxBounds);
    }
    __updateStrokeBounds() {
        setListWithFn(this.__layout.strokeBounds, this.children, this.__hasMask ? maskLocalStrokeBounds : localStrokeBounds);
    }
    __updateRenderBounds() {
        setListWithFn(this.__layout.renderBounds, this.children, this.__hasMask ? maskLocalRenderBounds : localRenderBounds);
    }
    __updateSortChildren() {
        let affectSort;
        const { children } = this;
        if (children.length > 1) {
            for (let i = 0, len = children.length; i < len; i++) {
                children[i].__tempNumber = i;
                if (children[i].__.zIndex)
                    affectSort = true;
            }
            children.sort(sort);
            this.__layout.affectChildrenSort = affectSort;
        }
    }
    add(child, index) {
        if (child === this)
            return;
        const noIndex = index === undefined;
        if (!child.__) {
            if (child instanceof Array)
                return child.forEach(item => { this.add(item, index); noIndex || index++; });
            else
                child = UICreator.get(child.tag, child);
        }
        if (child.parent)
            child.parent.remove(child);
        child.parent = this;
        noIndex ? this.children.push(child) : this.children.splice(index, 0, child);
        if (child.isBranch)
            this.__.__childBranchNumber = (this.__.__childBranchNumber || 0) + 1;
        child.__layout.boxChanged || child.__layout.boxChange();
        child.__layout.matrixChanged || child.__layout.matrixChange();
        if (child.__bubbleMap)
            child.__emitLifeEvent(ChildEvent.ADD);
        if (this.leafer) {
            child.__bindLeafer(this.leafer);
            if (this.leafer.created)
                this.__emitChildEvent(ChildEvent.ADD, child);
        }
        this.__layout.affectChildrenSort && this.__layout.childrenSortChange();
    }
    addMany(...children) { this.add(children); }
    remove(child, destroy) {
        if (child) {
            if (child.__) {
                if (child.animationOut)
                    child.__runAnimation('out', () => this.__remove(child, destroy));
                else
                    this.__remove(child, destroy);
            }
            else
                this.find(child).forEach(item => this.remove(item, destroy));
        }
        else if (child === undefined) {
            super.remove(null, destroy);
        }
    }
    removeAll(destroy) {
        const { children } = this;
        if (children.length) {
            this.children = [];
            this.__preRemove();
            this.__.__childBranchNumber = 0;
            children.forEach(child => {
                this.__realRemoveChild(child);
                if (destroy)
                    child.destroy();
            });
        }
    }
    clear() {
        this.removeAll(true);
    }
    __remove(child, destroy) {
        const index = this.children.indexOf(child);
        if (index > -1) {
            this.children.splice(index, 1);
            if (child.isBranch)
                this.__.__childBranchNumber = (this.__.__childBranchNumber || 1) - 1;
            this.__preRemove();
            this.__realRemoveChild(child);
            if (destroy)
                child.destroy();
        }
    }
    __preRemove() {
        if (this.__hasMask)
            this.__updateMask();
        if (this.__hasEraser)
            this.__updateEraser();
        this.__layout.boxChange();
        this.__layout.affectChildrenSort && this.__layout.childrenSortChange();
    }
    __realRemoveChild(child) {
        child.__emitLifeEvent(ChildEvent.REMOVE);
        child.parent = null;
        if (this.leafer) {
            child.__bindLeafer(null);
            if (this.leafer.created) {
                this.__emitChildEvent(ChildEvent.REMOVE, child);
                if (this.leafer.hitCanvasManager)
                    this.leafer.hitCanvasManager.clear();
            }
        }
    }
    __emitChildEvent(type, child) {
        const event = new ChildEvent(type, child, this);
        if (this.hasEvent(type) && !this.isLeafer)
            this.emitEvent(event);
        this.leafer.emitEvent(event);
    }
};
exports.Branch = __decorate([
    useModule(BranchRender)
], exports.Branch);

class LeafList {
    get length() { return this.list.length; }
    constructor(item) {
        this.reset();
        if (item)
            item instanceof Array ? this.addList(item) : this.add(item);
    }
    has(leaf) {
        return leaf && this.keys[leaf.innerId] !== undefined;
    }
    indexAt(index) {
        return this.list[index];
    }
    indexOf(leaf) {
        const index = this.keys[leaf.innerId];
        return index === undefined ? -1 : index;
    }
    add(leaf) {
        const { list, keys } = this;
        if (keys[leaf.innerId] === undefined) {
            list.push(leaf);
            keys[leaf.innerId] = list.length - 1;
        }
    }
    addAt(leaf, index = 0) {
        const { keys } = this;
        if (keys[leaf.innerId] === undefined) {
            const { list } = this;
            for (let i = index, len = list.length; i < len; i++)
                keys[list[i].innerId]++;
            if (index === 0) {
                list.unshift(leaf);
            }
            else {
                if (index > list.length)
                    index = list.length;
                list.splice(index, 0, leaf);
            }
            keys[leaf.innerId] = index;
        }
    }
    addList(list) {
        for (let i = 0; i < list.length; i++)
            this.add(list[i]);
    }
    remove(leaf) {
        const { list } = this;
        let findIndex;
        for (let i = 0, len = list.length; i < len; i++) {
            if (findIndex !== undefined) {
                this.keys[list[i].innerId] = i - 1;
            }
            else if (list[i].innerId === leaf.innerId) {
                findIndex = i;
                delete this.keys[leaf.innerId];
            }
        }
        if (findIndex !== undefined)
            list.splice(findIndex, 1);
    }
    sort(reverse) {
        const { list } = this;
        if (reverse) {
            list.sort((a, b) => b.__level - a.__level);
        }
        else {
            list.sort((a, b) => a.__level - b.__level);
        }
    }
    forEach(itemCallback) {
        this.list.forEach(itemCallback);
    }
    clone() {
        const list = new LeafList();
        list.list = [...this.list];
        list.keys = Object.assign({}, this.keys);
        return list;
    }
    update() {
        this.keys = {};
        const { list, keys } = this;
        for (let i = 0, len = list.length; i < len; i++)
            keys[list[i].innerId] = i;
    }
    reset() {
        this.list = [];
        this.keys = {};
    }
    destroy() {
        this.reset();
    }
}

class LeafLevelList {
    get length() { return this._length; }
    constructor(item) {
        this._length = 0;
        this.reset();
        if (item)
            item instanceof Array ? this.addList(item) : this.add(item);
    }
    has(leaf) {
        return this.keys[leaf.innerId] !== undefined;
    }
    without(leaf) {
        return this.keys[leaf.innerId] === undefined;
    }
    sort(reverse) {
        const { levels } = this;
        if (reverse) {
            levels.sort((a, b) => b - a);
        }
        else {
            levels.sort((a, b) => a - b);
        }
    }
    addList(list) {
        list.forEach(leaf => { this.add(leaf); });
    }
    add(leaf) {
        const { keys, levelMap } = this;
        if (!keys[leaf.innerId]) {
            keys[leaf.innerId] = 1;
            if (!levelMap[leaf.__level]) {
                levelMap[leaf.__level] = [leaf];
                this.levels.push(leaf.__level);
            }
            else {
                levelMap[leaf.__level].push(leaf);
            }
            this._length++;
        }
    }
    forEach(itemCallback) {
        let list;
        this.levels.forEach(level => {
            list = this.levelMap[level];
            for (let i = 0, len = list.length; i < len; i++) {
                itemCallback(list[i]);
            }
        });
    }
    reset() {
        this.levelMap = {};
        this.keys = {};
        this.levels = [];
        this._length = 0;
    }
    destroy() {
        this.levelMap = null;
    }
}

const version = "1.0.10";

exports.AlignHelper = AlignHelper;
exports.AroundHelper = AroundHelper;
exports.AutoBounds = AutoBounds;
exports.BezierHelper = BezierHelper;
exports.Bounds = Bounds;
exports.BoundsHelper = BoundsHelper;
exports.BranchHelper = BranchHelper;
exports.BranchRender = BranchRender;
exports.CanvasManager = CanvasManager;
exports.ChildEvent = ChildEvent;
exports.Creator = Creator;
exports.DataHelper = DataHelper;
exports.Debug = Debug;
exports.EllipseHelper = EllipseHelper;
exports.Event = Event;
exports.EventCreator = EventCreator;
exports.Eventer = Eventer;
exports.FileHelper = FileHelper;
exports.ImageEvent = ImageEvent;
exports.ImageManager = ImageManager;
exports.IncrementId = IncrementId;
exports.LayoutEvent = LayoutEvent;
exports.LeafBounds = LeafBounds;
exports.LeafBoundsHelper = LeafBoundsHelper;
exports.LeafData = LeafData;
exports.LeafDataProxy = LeafDataProxy;
exports.LeafEventer = LeafEventer;
exports.LeafHelper = LeafHelper;
exports.LeafLayout = LeafLayout;
exports.LeafLevelList = LeafLevelList;
exports.LeafList = LeafList;
exports.LeafMatrix = LeafMatrix;
exports.LeafRender = LeafRender;
exports.LeaferCanvasBase = LeaferCanvasBase;
exports.LeaferEvent = LeaferEvent;
exports.LeaferImage = LeaferImage;
exports.MathHelper = MathHelper;
exports.Matrix = Matrix;
exports.MatrixHelper = MatrixHelper;
exports.NeedConvertToCanvasCommandMap = NeedConvertToCanvasCommandMap;
exports.OneRadian = OneRadian;
exports.PI2 = PI2;
exports.PI_2 = PI_2;
exports.PathBounds = PathBounds;
exports.PathCommandDataHelper = PathCommandDataHelper;
exports.PathCommandMap = PathCommandMap;
exports.PathConvert = PathConvert;
exports.PathCorner = PathCorner;
exports.PathCreator = PathCreator;
exports.PathDrawer = PathDrawer;
exports.PathHelper = PathHelper;
exports.PathNumberCommandLengthMap = PathNumberCommandLengthMap;
exports.PathNumberCommandMap = PathNumberCommandMap;
exports.Platform = Platform;
exports.Point = Point;
exports.PointHelper = PointHelper;
exports.PropertyEvent = PropertyEvent;
exports.RectHelper = RectHelper;
exports.RenderEvent = RenderEvent;
exports.ResizeEvent = ResizeEvent;
exports.Run = Run;
exports.StringNumberMap = StringNumberMap;
exports.TaskItem = TaskItem;
exports.TaskProcessor = TaskProcessor;
exports.TwoPointBoundsHelper = TwoPointBoundsHelper;
exports.UICreator = UICreator;
exports.WaitHelper = WaitHelper;
exports.WatchEvent = WatchEvent;
exports.affectRenderBoundsType = affectRenderBoundsType;
exports.affectStrokeBoundsType = affectStrokeBoundsType;
exports.attr = attr;
exports.autoLayoutType = autoLayoutType;
exports.boundsType = boundsType;
exports.canvasPatch = canvasPatch;
exports.canvasSizeAttrs = canvasSizeAttrs;
exports.cursorType = cursorType;
exports.dataProcessor = dataProcessor;
exports.dataType = dataType;
exports.decorateLeafAttr = decorateLeafAttr;
exports.defineDataProcessor = defineDataProcessor;
exports.defineKey = defineKey;
exports.defineLeafAttr = defineLeafAttr;
exports.doBoundsType = doBoundsType;
exports.doStrokeType = doStrokeType;
exports.emptyData = emptyData;
exports.eraserType = eraserType;
exports.getBoundsData = getBoundsData;
exports.getDescriptor = getDescriptor;
exports.getMatrixData = getMatrixData;
exports.getPointData = getPointData;
exports.hitType = hitType;
exports.isNull = isNull;
exports.layoutProcessor = layoutProcessor;
exports.maskType = maskType;
exports.naturalBoundsType = naturalBoundsType;
exports.needPlugin = needPlugin;
exports.opacityType = opacityType;
exports.pathInputType = pathInputType;
exports.pathType = pathType;
exports.pen = pen;
exports.positionType = positionType;
exports.registerUI = registerUI;
exports.registerUIEvent = registerUIEvent;
exports.rewrite = rewrite;
exports.rewriteAble = rewriteAble;
exports.rotationType = rotationType;
exports.scaleType = scaleType;
exports.sortType = sortType;
exports.strokeType = strokeType;
exports.surfaceType = surfaceType;
exports.tempBounds = tempBounds;
exports.tempMatrix = tempMatrix;
exports.tempPoint = tempPoint$2;
exports.useModule = useModule;
exports.version = version;
exports.visibleType = visibleType;
