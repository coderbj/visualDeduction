{
  "version": 3,
  "sources": ["../../.pnpm/@leafer-in+arrow@1.0.10_@leafer-in+interface@1.0.10_@leafer-ui+draw@1.0.10_@leafer-ui+interface@1.0.10/node_modules/@leafer-in/arrow/dist/arrow.esm.js"],
  "sourcesContent": ["import { LineData, dataProcessor, strokeType, registerUI, Line, PathCommandMap, PointHelper, DataHelper, decorateLeafAttr, attr, doStrokeType, UI, PathArrow } from '@leafer-ui/draw';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nclass ArrowData extends LineData {\n}\n\nlet Arrow = class Arrow extends Line {\n    get __tag() { return 'Arrow'; }\n    constructor(data) {\n        super(data);\n        this.__.__useArrow = true;\n    }\n};\n__decorate([\n    dataProcessor(ArrowData)\n], Arrow.prototype, \"__\", void 0);\n__decorate([\n    strokeType('angle')\n], Arrow.prototype, \"endArrow\", void 0);\nArrow = __decorate([\n    registerUI()\n], Arrow);\n\nconst { M: M$1, L: L$1, C: C$1, Q: Q$1, O: O$1 } = PathCommandMap;\nconst { rotate: rotate$1, copyFrom: copyFrom$1, scale } = PointHelper;\nconst point = {};\nconst PathMatrixHelper = {\n    layout(data, x, y, scaleX, scaleY, rotation, origin) {\n        let command, i = 0, j, len = data.length;\n        while (i < len) {\n            command = data[i];\n            switch (command) {\n                case M$1:\n                case L$1:\n                    setPoint$1(data, i + 1, x, y, scaleX, scaleY, rotation, origin);\n                    i += 3;\n                    break;\n                case C$1:\n                    for (j = 1; j < 6; j += 2)\n                        setPoint$1(data, i + j, x, y, scaleX, scaleY, rotation, origin);\n                    i += 7;\n                    break;\n                case Q$1:\n                    for (j = 1; j < 4; j += 2)\n                        setPoint$1(data, i + j, x, y, scaleX, scaleY, rotation, origin);\n                    i += 5;\n                    break;\n                case O$1:\n                    data[i + 1] += x;\n                    data[i + 2] += y;\n                    if (scaleX)\n                        data[i + 3] *= scaleX;\n                    if (rotation) {\n                        data[i + 4] += rotation;\n                        data[i + 5] += rotation;\n                    }\n                    i += 7;\n                    break;\n            }\n        }\n    },\n    rotate(data, rotation, center) {\n        PathMatrixHelper.layout(data, 0, 0, 1, 1, rotation, center);\n    }\n};\nfunction setPoint$1(data, startIndex, x, y, scaleX, scaleY, rotation, origin) {\n    copyFrom$1(point, data[startIndex], data[startIndex + 1]);\n    if (rotation)\n        rotate$1(point, rotation, origin);\n    if (scaleX)\n        scale(point, scaleX, scaleY);\n    data[startIndex] = x + point.x;\n    data[startIndex + 1] = y + point.y;\n}\n\nconst { layout, rotate } = PathMatrixHelper;\nconst { getAngle } = PointHelper;\nconst half = { x: -0.5 };\nconst angle = { connect: half, offset: { x: -0.71, bevelJoin: 0.36, roundJoin: 0.22 }, path: [1, -3, -3, 2, 0, 0, 2, -3, 3] };\nconst angleSide = { connect: half, offset: { x: -1.207, bevelJoin: 0.854, roundJoin: 0.707 }, path: [1, -3, -3, 2, 0, 0, 2, -1, 0] };\nconst triangleLinePath = [1, -3, 0, 2, -3, -2, 2, 0, 0, 2, -3, 2, 2, -3, 0];\nconst triangle = { connect: half, offset: { x: -0.9, bevelJoin: 0.624, roundJoin: 0.4 }, path: [...triangleLinePath, 1, -2.05, 1.1, 2, -2.05, -1.1] };\nconst arrowLinePath = [1, -3, 0, 2, -3.5, -1.8, 2, 0, 0, 2, -3.5, 1.8, 2, -3, 0];\nconst arrow = { connect: half, offset: { x: -1.1, bevelJoin: 0.872, roundJoin: 0.6 }, path: [...arrowLinePath, 1, -2.25, 0.95, 2, -2.25, -0.95] };\nconst triangleFlip = { offset: half, path: [...triangle.path], };\nrotate(triangleFlip.path, 180, { x: -1.5, y: 0 });\nconst circleLine = { connect: { x: -1.3 }, path: [1, 1.8, -0.1, 2, 1.8, 0, 26, 0, 0, 1.8, 0, 359, 0], };\nconst circle = { connect: { x: 0.5 }, path: [...circleLine.path, 1, 0, 0, 26, 0, 0, 1, 0, 360, 0] };\nconst squareLine = { connect: { x: -1.3 }, path: [1, -1.4, 0, 2, -1.4, -1.4, 2, 1.4, -1.4, 2, 1.4, 1.4, 2, -1.4, 1.4, 2, -1.4, 0] };\nconst square = { path: [...squareLine.path, 2, -1.4, -0.49, 2, 1, -0.49, 1, -1.4, 0.49, 2, 1, 0.49] };\nconst diamondLine = DataHelper.clone(squareLine);\nconst diamond = DataHelper.clone(square);\nrotate(diamondLine.path, 45);\nrotate(diamond.path, 45);\nconst mark = { offset: half, path: [1, 0, -2, 2, 0, 2] };\nconst arrows = {\n    angle,\n    'angle-side': angleSide,\n    arrow,\n    triangle,\n    'triangle-flip': triangleFlip,\n    circle,\n    'circle-line': circleLine,\n    square,\n    'square-line': squareLine,\n    diamond,\n    'diamond-line': diamondLine,\n    mark,\n};\nfunction getArrowPath(ui, arrow, from, to, scale, connectOffset) {\n    const { strokeCap, strokeJoin } = ui.__;\n    const { offset, connect, path } = (typeof arrow === 'object' ? arrow : arrows[arrow]);\n    let connectX = connect ? connect.x : 0;\n    let offsetX = offset ? offset.x : 0;\n    const data = [...path];\n    if (strokeCap !== 'none')\n        connectX -= 0.5;\n    if (offset) {\n        if (strokeJoin === 'round' && offset.roundJoin)\n            offsetX += offset.roundJoin;\n        else if (strokeJoin === 'bevel' && offset.bevelJoin)\n            offsetX += offset.bevelJoin;\n    }\n    if (offsetX)\n        layout(data, offsetX, 0);\n    layout(data, to.x, to.y, scale, scale, getAngle(from, to));\n    connectOffset.x = (connectX + offsetX) * scale;\n    return data;\n}\n\nconst { M, L, C, Q, Z, N, D, X, G, F, O, P, U } = PathCommandMap;\nconst { copy, copyFrom, getDistancePoint, } = PointHelper;\nconst connectPoint = {};\nconst first = {}, second = {};\nconst last = {}, now = {};\nconst PathArrowModule = {\n    list: arrows,\n    addArrows(ui, changeRenderPath) {\n        const { startArrow, endArrow, strokeWidth, __pathForRender: data } = ui.__;\n        let command, i = 0, len = data.length, count = 0, useStartArrow = startArrow && startArrow !== 'none';\n        while (i < len) {\n            command = data[i];\n            switch (command) {\n                case M:\n                case L:\n                    if (count < 2 || i + 6 >= len) {\n                        copyFrom(now, data[i + 1], data[i + 2]);\n                        if (!count && useStartArrow)\n                            copy(first, now);\n                    }\n                    i += 3;\n                    break;\n                case C:\n                    if (count === 1 || i + 7 === len)\n                        copyPoints(data, last, now, i + 3);\n                    i += 7;\n                    break;\n                case Q:\n                    if (count === 1 || i + 5 === len)\n                        copyPoints(data, last, now, i + 1);\n                    i += 5;\n                    break;\n                case Z:\n                    return;\n                case N:\n                    i += 5;\n                    break;\n                case D:\n                    i += 9;\n                    break;\n                case X:\n                    i += 6;\n                    break;\n                case G:\n                    i += 9;\n                    break;\n                case F:\n                    i += 5;\n                    break;\n                case O:\n                    i += 7;\n                    break;\n                case P:\n                    i += 4;\n                    break;\n                case U:\n                    if (count === 1 || i + 6 === len)\n                        copyPoints(data, last, now, i + 1);\n                    i += 6;\n                    break;\n            }\n            count++;\n            if (count === 1 && command !== M)\n                return;\n            if (count === 2 && useStartArrow)\n                copy(second, command === L ? now : last);\n            if (i === len) {\n                const p = ui.__.__pathForRender = changeRenderPath ? [...data] : data;\n                if (useStartArrow) {\n                    p.push(...getArrowPath(ui, startArrow, second, first, strokeWidth, connectPoint));\n                    if (connectPoint.x) {\n                        getDistancePoint(first, second, -connectPoint.x, true);\n                        p[1] = second.x;\n                        p[2] = second.y;\n                    }\n                }\n                if (endArrow && endArrow !== 'none') {\n                    p.push(...getArrowPath(ui, endArrow, last, now, strokeWidth, connectPoint));\n                    if (connectPoint.x) {\n                        getDistancePoint(now, last, -connectPoint.x, true);\n                        let index;\n                        switch (command) {\n                            case L:\n                                index = i - 3 + 1;\n                                break;\n                            case C:\n                                index = i - 7 + 5;\n                                break;\n                            case Q:\n                                index = i - 5 + 3;\n                                break;\n                            case U:\n                                index = i - 6 + 3;\n                                break;\n                        }\n                        if (index)\n                            setPoint(p, last, index);\n                    }\n                }\n            }\n            else {\n                copy(last, now);\n            }\n        }\n    }\n};\nfunction copyPoints(data, from, to, startIndex) {\n    copyFrom(from, data[startIndex], data[startIndex + 1]);\n    copyFrom(to, data[startIndex + 2], data[startIndex + 3]);\n}\nfunction setPoint(data, point, startIndex) {\n    data[startIndex] = point.x;\n    data[startIndex + 1] = point.y;\n}\n\nfunction arrowType(defaultValue) {\n    return decorateLeafAttr(defaultValue, (key) => attr({\n        set(value) {\n            if (this.__setAttr(key, value)) {\n                const data = this.__;\n                data.__useArrow = data.startArrow !== 'none' || data.endArrow !== 'none';\n                doStrokeType(this);\n            }\n        }\n    }));\n}\n\nconst ui = UI.prototype;\narrowType('none')(ui, 'startArrow');\narrowType('none')(ui, 'endArrow');\nObject.assign(PathArrow, PathArrowModule);\n\nexport { Arrow, ArrowData, PathArrowModule, PathMatrixHelper, arrowType };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAmBA,SAAS,WAAW,YAAY,QAAQ,KAAK,MAAM;AAC/C,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa,WAAY,KAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA,MACxH,UAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG,IAAK,KAAI,IAAI,WAAW,CAAC,EAAG,MAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAOA,IAAM,YAAN,cAAwB,SAAS;AACjC;AAEA,IAAI,QAAQ,MAAMA,eAAc,KAAK;AAAA,EACjC,IAAI,QAAQ;AAAE,WAAO;AAAA,EAAS;AAAA,EAC9B,YAAY,MAAM;AACd,UAAM,IAAI;AACV,SAAK,GAAG,aAAa;AAAA,EACzB;AACJ;AACA,WAAW;AAAA,EACP,cAAc,SAAS;AAC3B,GAAG,MAAM,WAAW,MAAM,MAAM;AAChC,WAAW;AAAA,EACP,WAAW,OAAO;AACtB,GAAG,MAAM,WAAW,YAAY,MAAM;AACtC,QAAQ,WAAW;AAAA,EACf,WAAW;AACf,GAAG,KAAK;AAER,IAAM,EAAE,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,IAAI,IAAI;AACnD,IAAM,EAAE,QAAQ,UAAU,UAAU,YAAY,MAAM,IAAI;AAC1D,IAAM,QAAQ,CAAC;AACf,IAAM,mBAAmB;AAAA,EACrB,OAAO,MAAM,GAAG,GAAG,QAAQ,QAAQ,UAAU,QAAQ;AACjD,QAAI,SAAS,IAAI,GAAG,GAAG,MAAM,KAAK;AAClC,WAAO,IAAI,KAAK;AACZ,gBAAU,KAAK,CAAC;AAChB,cAAQ,SAAS;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AACD,qBAAW,MAAM,IAAI,GAAG,GAAG,GAAG,QAAQ,QAAQ,UAAU,MAAM;AAC9D,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACpB,uBAAW,MAAM,IAAI,GAAG,GAAG,GAAG,QAAQ,QAAQ,UAAU,MAAM;AAClE,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACpB,uBAAW,MAAM,IAAI,GAAG,GAAG,GAAG,QAAQ,QAAQ,UAAU,MAAM;AAClE,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK,IAAI,CAAC,KAAK;AACf,eAAK,IAAI,CAAC,KAAK;AACf,cAAI;AACA,iBAAK,IAAI,CAAC,KAAK;AACnB,cAAI,UAAU;AACV,iBAAK,IAAI,CAAC,KAAK;AACf,iBAAK,IAAI,CAAC,KAAK;AAAA,UACnB;AACA,eAAK;AACL;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,MAAM,UAAU,QAAQ;AAC3B,qBAAiB,OAAO,MAAM,GAAG,GAAG,GAAG,GAAG,UAAU,MAAM;AAAA,EAC9D;AACJ;AACA,SAAS,WAAW,MAAM,YAAY,GAAG,GAAG,QAAQ,QAAQ,UAAU,QAAQ;AAC1E,aAAW,OAAO,KAAK,UAAU,GAAG,KAAK,aAAa,CAAC,CAAC;AACxD,MAAI;AACA,aAAS,OAAO,UAAU,MAAM;AACpC,MAAI;AACA,UAAM,OAAO,QAAQ,MAAM;AAC/B,OAAK,UAAU,IAAI,IAAI,MAAM;AAC7B,OAAK,aAAa,CAAC,IAAI,IAAI,MAAM;AACrC;AAEA,IAAM,EAAE,QAAQ,OAAO,IAAI;AAC3B,IAAM,EAAE,SAAS,IAAI;AACrB,IAAM,OAAO,EAAE,GAAG,KAAK;AACvB,IAAM,QAAQ,EAAE,SAAS,MAAM,QAAQ,EAAE,GAAG,OAAO,WAAW,MAAM,WAAW,KAAK,GAAG,MAAM,CAAC,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE;AAC5H,IAAM,YAAY,EAAE,SAAS,MAAM,QAAQ,EAAE,GAAG,QAAQ,WAAW,OAAO,WAAW,MAAM,GAAG,MAAM,CAAC,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,EAAE;AACnI,IAAM,mBAAmB,CAAC,GAAG,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,CAAC;AAC1E,IAAM,WAAW,EAAE,SAAS,MAAM,QAAQ,EAAE,GAAG,MAAM,WAAW,OAAO,WAAW,IAAI,GAAG,MAAM,CAAC,GAAG,kBAAkB,GAAG,OAAO,KAAK,GAAG,OAAO,IAAI,EAAE;AACpJ,IAAM,gBAAgB,CAAC,GAAG,IAAI,GAAG,GAAG,MAAM,MAAM,GAAG,GAAG,GAAG,GAAG,MAAM,KAAK,GAAG,IAAI,CAAC;AAC/E,IAAM,QAAQ,EAAE,SAAS,MAAM,QAAQ,EAAE,GAAG,MAAM,WAAW,OAAO,WAAW,IAAI,GAAG,MAAM,CAAC,GAAG,eAAe,GAAG,OAAO,MAAM,GAAG,OAAO,KAAK,EAAE;AAChJ,IAAM,eAAe,EAAE,QAAQ,MAAM,MAAM,CAAC,GAAG,SAAS,IAAI,EAAG;AAC/D,OAAO,aAAa,MAAM,KAAK,EAAE,GAAG,MAAM,GAAG,EAAE,CAAC;AAChD,IAAM,aAAa,EAAE,SAAS,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC,GAAG,KAAK,MAAM,GAAG,KAAK,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,KAAK,CAAC,EAAG;AACtG,IAAM,SAAS,EAAE,SAAS,EAAE,GAAG,IAAI,GAAG,MAAM,CAAC,GAAG,WAAW,MAAM,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,KAAK,CAAC,EAAE;AAClG,IAAM,aAAa,EAAE,SAAS,EAAE,GAAG,KAAK,GAAG,MAAM,CAAC,GAAG,MAAM,GAAG,GAAG,MAAM,MAAM,GAAG,KAAK,MAAM,GAAG,KAAK,KAAK,GAAG,MAAM,KAAK,GAAG,MAAM,CAAC,EAAE;AAClI,IAAM,SAAS,EAAE,MAAM,CAAC,GAAG,WAAW,MAAM,GAAG,MAAM,OAAO,GAAG,GAAG,OAAO,GAAG,MAAM,MAAM,GAAG,GAAG,IAAI,EAAE;AACpG,IAAM,cAAc,WAAW,MAAM,UAAU;AAC/C,IAAM,UAAU,WAAW,MAAM,MAAM;AACvC,OAAO,YAAY,MAAM,EAAE;AAC3B,OAAO,QAAQ,MAAM,EAAE;AACvB,IAAM,OAAO,EAAE,QAAQ,MAAM,MAAM,CAAC,GAAG,GAAG,IAAI,GAAG,GAAG,CAAC,EAAE;AACvD,IAAM,SAAS;AAAA,EACX;AAAA,EACA,cAAc;AAAA,EACd;AAAA,EACA;AAAA,EACA,iBAAiB;AAAA,EACjB;AAAA,EACA,eAAe;AAAA,EACf;AAAA,EACA,eAAe;AAAA,EACf;AAAA,EACA,gBAAgB;AAAA,EAChB;AACJ;AACA,SAAS,aAAaC,KAAIC,QAAO,MAAM,IAAIC,QAAO,eAAe;AAC7D,QAAM,EAAE,WAAW,WAAW,IAAIF,IAAG;AACrC,QAAM,EAAE,QAAQ,SAAS,KAAK,IAAK,OAAOC,WAAU,WAAWA,SAAQ,OAAOA,MAAK;AACnF,MAAI,WAAW,UAAU,QAAQ,IAAI;AACrC,MAAI,UAAU,SAAS,OAAO,IAAI;AAClC,QAAM,OAAO,CAAC,GAAG,IAAI;AACrB,MAAI,cAAc;AACd,gBAAY;AAChB,MAAI,QAAQ;AACR,QAAI,eAAe,WAAW,OAAO;AACjC,iBAAW,OAAO;AAAA,aACb,eAAe,WAAW,OAAO;AACtC,iBAAW,OAAO;AAAA,EAC1B;AACA,MAAI;AACA,WAAO,MAAM,SAAS,CAAC;AAC3B,SAAO,MAAM,GAAG,GAAG,GAAG,GAAGC,QAAOA,QAAO,SAAS,MAAM,EAAE,CAAC;AACzD,gBAAc,KAAK,WAAW,WAAWA;AACzC,SAAO;AACX;AAEA,IAAM,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,IAAI;AAClD,IAAM,EAAE,MAAM,UAAU,iBAAkB,IAAI;AAC9C,IAAM,eAAe,CAAC;AACtB,IAAM,QAAQ,CAAC;AAAf,IAAkB,SAAS,CAAC;AAC5B,IAAM,OAAO,CAAC;AAAd,IAAiB,MAAM,CAAC;AACxB,IAAM,kBAAkB;AAAA,EACpB,MAAM;AAAA,EACN,UAAUF,KAAI,kBAAkB;AAC5B,UAAM,EAAE,YAAY,UAAU,aAAa,iBAAiB,KAAK,IAAIA,IAAG;AACxE,QAAI,SAAS,IAAI,GAAG,MAAM,KAAK,QAAQ,QAAQ,GAAG,gBAAgB,cAAc,eAAe;AAC/F,WAAO,IAAI,KAAK;AACZ,gBAAU,KAAK,CAAC;AAChB,cAAQ,SAAS;AAAA,QACb,KAAK;AAAA,QACL,KAAK;AACD,cAAI,QAAQ,KAAK,IAAI,KAAK,KAAK;AAC3B,qBAAS,KAAK,KAAK,IAAI,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AACtC,gBAAI,CAAC,SAAS;AACV,mBAAK,OAAO,GAAG;AAAA,UACvB;AACA,eAAK;AACL;AAAA,QACJ,KAAK;AACD,cAAI,UAAU,KAAK,IAAI,MAAM;AACzB,uBAAW,MAAM,MAAM,KAAK,IAAI,CAAC;AACrC,eAAK;AACL;AAAA,QACJ,KAAK;AACD,cAAI,UAAU,KAAK,IAAI,MAAM;AACzB,uBAAW,MAAM,MAAM,KAAK,IAAI,CAAC;AACrC,eAAK;AACL;AAAA,QACJ,KAAK;AACD;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,eAAK;AACL;AAAA,QACJ,KAAK;AACD,cAAI,UAAU,KAAK,IAAI,MAAM;AACzB,uBAAW,MAAM,MAAM,KAAK,IAAI,CAAC;AACrC,eAAK;AACL;AAAA,MACR;AACA;AACA,UAAI,UAAU,KAAK,YAAY;AAC3B;AACJ,UAAI,UAAU,KAAK;AACf,aAAK,QAAQ,YAAY,IAAI,MAAM,IAAI;AAC3C,UAAI,MAAM,KAAK;AACX,cAAM,IAAIA,IAAG,GAAG,kBAAkB,mBAAmB,CAAC,GAAG,IAAI,IAAI;AACjE,YAAI,eAAe;AACf,YAAE,KAAK,GAAG,aAAaA,KAAI,YAAY,QAAQ,OAAO,aAAa,YAAY,CAAC;AAChF,cAAI,aAAa,GAAG;AAChB,6BAAiB,OAAO,QAAQ,CAAC,aAAa,GAAG,IAAI;AACrD,cAAE,CAAC,IAAI,OAAO;AACd,cAAE,CAAC,IAAI,OAAO;AAAA,UAClB;AAAA,QACJ;AACA,YAAI,YAAY,aAAa,QAAQ;AACjC,YAAE,KAAK,GAAG,aAAaA,KAAI,UAAU,MAAM,KAAK,aAAa,YAAY,CAAC;AAC1E,cAAI,aAAa,GAAG;AAChB,6BAAiB,KAAK,MAAM,CAAC,aAAa,GAAG,IAAI;AACjD,gBAAI;AACJ,oBAAQ,SAAS;AAAA,cACb,KAAK;AACD,wBAAQ,IAAI,IAAI;AAChB;AAAA,cACJ,KAAK;AACD,wBAAQ,IAAI,IAAI;AAChB;AAAA,cACJ,KAAK;AACD,wBAAQ,IAAI,IAAI;AAChB;AAAA,cACJ,KAAK;AACD,wBAAQ,IAAI,IAAI;AAChB;AAAA,YACR;AACA,gBAAI;AACA,uBAAS,GAAG,MAAM,KAAK;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ,OACK;AACD,aAAK,MAAM,GAAG;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,SAAS,WAAW,MAAM,MAAM,IAAI,YAAY;AAC5C,WAAS,MAAM,KAAK,UAAU,GAAG,KAAK,aAAa,CAAC,CAAC;AACrD,WAAS,IAAI,KAAK,aAAa,CAAC,GAAG,KAAK,aAAa,CAAC,CAAC;AAC3D;AACA,SAAS,SAAS,MAAMG,QAAO,YAAY;AACvC,OAAK,UAAU,IAAIA,OAAM;AACzB,OAAK,aAAa,CAAC,IAAIA,OAAM;AACjC;AAEA,SAAS,UAAU,cAAc;AAC7B,SAAO,iBAAiB,cAAc,CAAC,QAAQ,KAAK;AAAA,IAChD,IAAI,OAAO;AACP,UAAI,KAAK,UAAU,KAAK,KAAK,GAAG;AAC5B,cAAM,OAAO,KAAK;AAClB,aAAK,aAAa,KAAK,eAAe,UAAU,KAAK,aAAa;AAClE,qBAAa,IAAI;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ,CAAC,CAAC;AACN;AAEA,IAAM,KAAK,GAAG;AACd,UAAU,MAAM,EAAE,IAAI,YAAY;AAClC,UAAU,MAAM,EAAE,IAAI,UAAU;AAChC,OAAO,OAAO,WAAW,eAAe;",
  "names": ["Arrow", "ui", "arrow", "scale", "point"]
}
