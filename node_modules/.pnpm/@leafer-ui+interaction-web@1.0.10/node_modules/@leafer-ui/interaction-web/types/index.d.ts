import { IObject, ITimer, IKeepTouchData, IPointData, ICursorType, IClientPointData } from '@leafer/interface';
import { InteractionBase } from '@leafer-ui/core';

interface IGestureEvent extends IClientPointData, UIEvent {
    scale: number;
    rotation: number;
    preventDefault(): void;
}
declare class Interaction extends InteractionBase {
    protected view: HTMLElement;
    protected viewEvents: IObject;
    protected windowEvents: IObject;
    protected usePointer: boolean;
    protected useMultiTouch: boolean;
    protected useTouch: boolean;
    protected touchTimer: ITimer;
    protected touches?: Touch[];
    protected lastGestureScale: number;
    protected lastGestureRotation: number;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    protected getTouches(touches: TouchList): Touch[];
    protected preventDefaultPointer(e: UIEvent): void;
    protected preventDefaultWheel(e: UIEvent): void;
    protected preventWindowPointer(e: UIEvent): boolean;
    protected onKeyDown(e: KeyboardEvent): void;
    protected onKeyUp(e: KeyboardEvent): void;
    protected onContextMenu(e: PointerEvent): void;
    protected onScroll(): void;
    protected onPointerDown(e: PointerEvent): void;
    protected onPointerMove(e: PointerEvent): void;
    protected onPointerUp(e: PointerEvent): void;
    protected onPointerCancel(): void;
    protected onMouseDown(e: MouseEvent): void;
    protected onMouseMove(e: MouseEvent): void;
    protected onMouseUp(e: MouseEvent): void;
    protected onMouseCancel(): void;
    protected onTouchStart(e: TouchEvent): void;
    protected onTouchMove(e: TouchEvent): void;
    protected onTouchEnd(e: TouchEvent): void;
    protected onTouchCancel(): void;
    protected multiTouchStart(e: TouchEvent): void;
    protected multiTouchMove(e: TouchEvent): void;
    protected multiTouchEnd(): void;
    protected getKeepTouchList(old: Touch[], touches: Touch[]): IKeepTouchData[];
    protected getLocalTouchs(points: Touch[]): IPointData[];
    protected onWheel(e: WheelEvent): void;
    protected onGesturestart(e: IGestureEvent): void;
    protected onGesturechange(e: IGestureEvent): void;
    protected onGestureend(e: IGestureEvent): void;
    setCursor(cursor: ICursorType | ICursorType[]): void;
    protected eachCursor(cursor: ICursorType | ICursorType[], list: ICursorType[], level?: number): void;
    destroy(): void;
}

export { Interaction };
