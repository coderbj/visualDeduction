import { IValue, ILeafAttrDescriptorFn, ILeaf, ILeafAttrDescriptor, IObject, IFunction } from '@leafer/interface';

declare function decorateLeafAttr(defaultValue?: IValue, descriptorFn?: ILeafAttrDescriptorFn): (target: ILeaf, key: string) => void;
declare function attr(partDescriptor?: ILeafAttrDescriptor): ILeafAttrDescriptor;
declare function defineLeafAttr(target: ILeaf, key: string, defaultValue?: IValue, partDescriptor?: ILeafAttrDescriptor): void;
declare function dataType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function positionType(defaultValue?: IValue, checkFiniteNumber?: boolean): (target: ILeaf, key: string) => void;
declare function autoLayoutType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function scaleType(defaultValue?: IValue, checkFiniteNumber?: boolean): (target: ILeaf, key: string) => void;
declare function rotationType(defaultValue?: IValue, checkFiniteNumber?: boolean): (target: ILeaf, key: string) => void;
declare function boundsType(defaultValue?: IValue, checkFiniteNumber?: boolean): (target: ILeaf, key: string) => void;
declare function naturalBoundsType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function doBoundsType(leaf: ILeaf): void;
declare function pathInputType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare const pathType: typeof boundsType;
declare function affectStrokeBoundsType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function doStrokeType(leaf: ILeaf): void;
declare const strokeType: typeof affectStrokeBoundsType;
declare function affectRenderBoundsType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function surfaceType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function opacityType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function visibleType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function sortType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function maskType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function eraserType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function hitType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function cursorType(defaultValue?: IValue): (target: ILeaf, key: string) => void;
declare function dataProcessor(processor: IObject): (target: IObject, _key?: string) => void;
declare function layoutProcessor(processor: IObject): (target: IObject, _key?: string) => void;
declare function defineDataProcessor(target: ILeaf, key: string, defaultValue?: IValue): void;

declare function rewrite(method: IFunction): (target: IObject, key: string) => void;
declare function rewriteAble(): (_target: IObject) => void;
declare function useModule(module: IObject, exclude?: string[]): (target: IObject) => void;

declare function defineKey<T>(target: T, key: string, descriptor: IObject & ThisType<T>, noConfigurable?: boolean): void;
declare function getDescriptor(object: IObject, name: string): PropertyDescriptor;

declare function registerUI(): (target: IObject) => void;
declare function registerUIEvent(): (target: IObject) => void;

export { affectRenderBoundsType, affectStrokeBoundsType, attr, autoLayoutType, boundsType, cursorType, dataProcessor, dataType, decorateLeafAttr, defineDataProcessor, defineKey, defineLeafAttr, doBoundsType, doStrokeType, eraserType, getDescriptor, hitType, layoutProcessor, maskType, naturalBoundsType, opacityType, pathInputType, pathType, positionType, registerUI, registerUIEvent, rewrite, rewriteAble, rotationType, scaleType, sortType, strokeType, surfaceType, useModule, visibleType };
