import { ILeafList, ILeaf, INumberMap, ILeafListItemCallback, ILeafLevelList, ILeafArrayMap } from '@leafer/interface';

declare class LeafList implements ILeafList {
    list: ILeaf[];
    keys: INumberMap;
    get length(): number;
    constructor(item?: ILeaf | ILeaf[]);
    has(leaf: ILeaf): boolean;
    indexAt(index: number): ILeaf;
    indexOf(leaf: ILeaf): number;
    add(leaf: ILeaf): void;
    addAt(leaf: ILeaf, index?: number): void;
    addList(list: ILeaf[]): void;
    remove(leaf: ILeaf): void;
    sort(reverse?: boolean): void;
    forEach(itemCallback: ILeafListItemCallback): void;
    clone(): ILeafList;
    update(): void;
    reset(): void;
    destroy(): void;
}

declare class LeafLevelList implements ILeafLevelList {
    levelMap: ILeafArrayMap;
    keys: INumberMap;
    levels: number[];
    get length(): number;
    private _length;
    constructor(item?: ILeaf | ILeaf[]);
    has(leaf: ILeaf): boolean;
    without(leaf: ILeaf): boolean;
    sort(reverse?: boolean): void;
    addList(list: ILeaf[]): void;
    add(leaf: ILeaf): void;
    forEach(itemCallback: ILeafListItemCallback): void;
    reset(): void;
    destroy(): void;
}

export { LeafLevelList, LeafList };
