{
  "version": 3,
  "sources": ["../../.pnpm/leafer-ui@1.0.10/node_modules/leafer-ui/dist/web.esm.js"],
  "sourcesContent": ["import { Debug, LeaferCanvasBase, Platform, DataHelper, canvasSizeAttrs, ResizeEvent, canvasPatch, Creator, LeaferImage, defineKey, FileHelper, LeafList, RenderEvent, ChildEvent, WatchEvent, PropertyEvent, LeafHelper, BranchHelper, Bounds, LeafBoundsHelper, LeafLevelList, LayoutEvent, Run, ImageManager, BoundsHelper, Answer, MathHelper, MatrixHelper, AlignHelper, ImageEvent, AroundHelper, PointHelper, Direction4, TwoPointBoundsHelper, TaskProcessor, Matrix } from '@leafer/core';\nexport * from '@leafer/core';\nexport { LeaferImage } from '@leafer/core';\nimport { InteractionHelper, InteractionBase, Cursor, HitCanvasManager } from '@leafer-ui/core';\nexport * from '@leafer-ui/core';\nimport { PaintImage, ColorConvert, PaintGradient, Export, Group, TextConvert, Paint, Effect } from '@leafer-ui/draw';\n\nconst debug$3 = Debug.get('LeaferCanvas');\nclass LeaferCanvas extends LeaferCanvasBase {\n    set zIndex(zIndex) {\n        const { style } = this.view;\n        style.zIndex = zIndex;\n        this.setAbsolute(this.view);\n    }\n    set childIndex(index) {\n        const { view, parentView } = this;\n        if (view && parentView) {\n            const beforeNode = parentView.children[index];\n            if (beforeNode) {\n                this.setAbsolute(beforeNode);\n                parentView.insertBefore(view, beforeNode);\n            }\n            else {\n                parentView.appendChild(beforeNode);\n            }\n        }\n    }\n    init() {\n        const { config } = this;\n        const view = config.view || config.canvas;\n        view ? this.__createViewFrom(view) : this.__createView();\n        const { style } = this.view;\n        style.display || (style.display = 'block');\n        this.parentView = this.view.parentElement;\n        if (this.parentView) {\n            const pStyle = this.parentView.style;\n            pStyle.webkitUserSelect = pStyle.userSelect = 'none';\n        }\n        if (Platform.syncDomFont && !this.parentView) {\n            style.display = 'none';\n            document.body.appendChild(this.view);\n        }\n        this.__createContext();\n        if (!this.autoLayout)\n            this.resize(config);\n    }\n    set backgroundColor(color) { this.view.style.backgroundColor = color; }\n    get backgroundColor() { return this.view.style.backgroundColor; }\n    set hittable(hittable) { this.view.style.pointerEvents = hittable ? 'auto' : 'none'; }\n    get hittable() { return this.view.style.pointerEvents !== 'none'; }\n    __createView() {\n        this.view = document.createElement('canvas');\n    }\n    __createViewFrom(inputView) {\n        let find = (typeof inputView === 'string') ? document.getElementById(inputView) : inputView;\n        if (find) {\n            if (find instanceof HTMLCanvasElement) {\n                this.view = find;\n            }\n            else {\n                let parent = find;\n                if (find === window || find === document) {\n                    const div = document.createElement('div');\n                    const { style } = div;\n                    style.position = 'absolute';\n                    style.top = style.bottom = style.left = style.right = '0px';\n                    document.body.appendChild(div);\n                    parent = div;\n                }\n                this.__createView();\n                const view = this.view;\n                if (parent.hasChildNodes()) {\n                    this.setAbsolute(view);\n                    parent.style.position || (parent.style.position = 'relative');\n                }\n                parent.appendChild(view);\n            }\n        }\n        else {\n            debug$3.error(`no id: ${inputView}`);\n            this.__createView();\n        }\n    }\n    setAbsolute(view) {\n        const { style } = view;\n        style.position = 'absolute';\n        style.top = style.left = '0px';\n    }\n    updateViewSize() {\n        const { width, height, pixelRatio } = this;\n        const { style } = this.view;\n        style.width = width + 'px';\n        style.height = height + 'px';\n        this.view.width = Math.ceil(width * pixelRatio);\n        this.view.height = Math.ceil(height * pixelRatio);\n    }\n    updateClientBounds() {\n        this.clientBounds = this.view.getBoundingClientRect();\n    }\n    startAutoLayout(autoBounds, listener) {\n        this.resizeListener = listener;\n        if (autoBounds) {\n            this.autoBounds = autoBounds;\n            try {\n                this.resizeObserver = new ResizeObserver((entries) => {\n                    this.updateClientBounds();\n                    for (const entry of entries)\n                        this.checkAutoBounds(entry.contentRect);\n                });\n                const parent = this.parentView;\n                if (parent) {\n                    this.resizeObserver.observe(parent);\n                    this.checkAutoBounds(parent.getBoundingClientRect());\n                }\n                else {\n                    this.checkAutoBounds(this.view);\n                    debug$3.warn('no parent');\n                }\n            }\n            catch (_a) {\n                this.imitateResizeObserver();\n            }\n        }\n        else {\n            window.addEventListener('resize', () => {\n                const pixelRatio = Platform.devicePixelRatio;\n                if (this.pixelRatio !== pixelRatio) {\n                    const { width, height } = this;\n                    this.emitResize({ width, height, pixelRatio });\n                }\n            });\n        }\n    }\n    imitateResizeObserver() {\n        if (this.autoLayout) {\n            if (this.parentView)\n                this.checkAutoBounds(this.parentView.getBoundingClientRect());\n            Platform.requestRender(this.imitateResizeObserver.bind(this));\n        }\n    }\n    checkAutoBounds(parentSize) {\n        const view = this.view;\n        const { x, y, width, height } = this.autoBounds.getBoundsFrom(parentSize);\n        const size = { width, height, pixelRatio: Platform.devicePixelRatio };\n        if (!this.isSameSize(size)) {\n            const { style } = view;\n            style.marginLeft = x + 'px';\n            style.marginTop = y + 'px';\n            this.emitResize(size);\n        }\n    }\n    stopAutoLayout() {\n        this.autoLayout = false;\n        this.resizeListener = null;\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n            this.resizeObserver = null;\n        }\n    }\n    emitResize(size) {\n        const oldSize = {};\n        DataHelper.copyAttrs(oldSize, this, canvasSizeAttrs);\n        this.resize(size);\n        if (this.resizeListener && this.width !== undefined)\n            this.resizeListener(new ResizeEvent(size, oldSize));\n    }\n    unrealCanvas() {\n        if (!this.unreal && this.parentView) {\n            const view = this.view;\n            if (view)\n                view.remove();\n            this.view = this.parentView;\n            this.unreal = true;\n        }\n    }\n    destroy() {\n        if (this.view) {\n            this.stopAutoLayout();\n            if (!this.unreal) {\n                const view = this.view;\n                if (view.parentElement)\n                    view.remove();\n            }\n            super.destroy();\n        }\n    }\n}\n\ncanvasPatch(CanvasRenderingContext2D.prototype);\ncanvasPatch(Path2D.prototype);\n\nconst { mineType, fileType } = FileHelper;\nObject.assign(Creator, {\n    canvas: (options, manager) => new LeaferCanvas(options, manager),\n    image: (options) => new LeaferImage(options)\n});\nfunction useCanvas(_canvasType, _power) {\n    Platform.origin = {\n        createCanvas(width, height) {\n            const canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            return canvas;\n        },\n        canvasToDataURL: (canvas, type, quality) => canvas.toDataURL(mineType(type), quality),\n        canvasToBolb: (canvas, type, quality) => new Promise((resolve) => canvas.toBlob(resolve, mineType(type), quality)),\n        canvasSaveAs: (canvas, filename, quality) => {\n            const url = canvas.toDataURL(mineType(fileType(filename)), quality);\n            return Platform.origin.download(url, filename);\n        },\n        download(url, filename) {\n            return new Promise((resolve) => {\n                let el = document.createElement('a');\n                el.href = url;\n                el.download = filename;\n                document.body.appendChild(el);\n                el.click();\n                document.body.removeChild(el);\n                resolve();\n            });\n        },\n        loadImage(src) {\n            return new Promise((resolve, reject) => {\n                const img = new Image();\n                const { crossOrigin } = Platform.image;\n                if (crossOrigin) {\n                    img.setAttribute('crossOrigin', crossOrigin);\n                    img.crossOrigin = crossOrigin;\n                }\n                img.onload = () => { resolve(img); };\n                img.onerror = (e) => { reject(e); };\n                img.src = Platform.image.getRealURL(src);\n            });\n        }\n    };\n    Platform.event = {\n        stopDefault(origin) { origin.preventDefault(); },\n        stopNow(origin) { origin.stopImmediatePropagation(); },\n        stop(origin) { origin.stopPropagation(); }\n    };\n    Platform.canvas = Creator.canvas();\n    Platform.conicGradientSupport = !!Platform.canvas.context.createConicGradient;\n}\nPlatform.name = 'web';\nPlatform.isMobile = 'ontouchstart' in window;\nPlatform.requestRender = function (render) { window.requestAnimationFrame(render); };\ndefineKey(Platform, 'devicePixelRatio', { get() { return Math.max(1, devicePixelRatio); } });\nconst { userAgent } = navigator;\nif (userAgent.indexOf(\"Firefox\") > -1) {\n    Platform.conicGradientRotate90 = true;\n    Platform.intWheelDeltaY = true;\n    Platform.syncDomFont = true;\n}\nelse if (userAgent.indexOf(\"Safari\") > -1 && userAgent.indexOf(\"Chrome\") === -1) {\n    Platform.fullImageShadow = true;\n}\nif (userAgent.indexOf('Windows') > -1) {\n    Platform.os = 'Windows';\n    Platform.intWheelDeltaY = true;\n}\nelse if (userAgent.indexOf('Mac') > -1) {\n    Platform.os = 'Mac';\n}\nelse if (userAgent.indexOf('Linux') > -1) {\n    Platform.os = 'Linux';\n}\n\nclass Watcher {\n    get childrenChanged() { return this.hasAdd || this.hasRemove || this.hasVisible; }\n    get updatedList() {\n        if (this.hasRemove) {\n            const updatedList = new LeafList();\n            this.__updatedList.list.forEach(item => { if (item.leafer)\n                updatedList.add(item); });\n            return updatedList;\n        }\n        else {\n            return this.__updatedList;\n        }\n    }\n    constructor(target, userConfig) {\n        this.totalTimes = 0;\n        this.config = {};\n        this.__updatedList = new LeafList();\n        this.target = target;\n        if (userConfig)\n            this.config = DataHelper.default(userConfig, this.config);\n        this.__listenEvents();\n    }\n    start() {\n        if (this.disabled)\n            return;\n        this.running = true;\n    }\n    stop() {\n        this.running = false;\n    }\n    disable() {\n        this.stop();\n        this.__removeListenEvents();\n        this.disabled = true;\n    }\n    update() {\n        this.changed = true;\n        if (this.running)\n            this.target.emit(RenderEvent.REQUEST);\n    }\n    __onAttrChange(event) {\n        this.__updatedList.add(event.target);\n        this.update();\n    }\n    __onChildEvent(event) {\n        if (event.type === ChildEvent.ADD) {\n            this.hasAdd = true;\n            this.__pushChild(event.child);\n        }\n        else {\n            this.hasRemove = true;\n            this.__updatedList.add(event.parent);\n        }\n        this.update();\n    }\n    __pushChild(child) {\n        this.__updatedList.add(child);\n        if (child.isBranch)\n            this.__loopChildren(child);\n    }\n    __loopChildren(parent) {\n        const { children } = parent;\n        for (let i = 0, len = children.length; i < len; i++)\n            this.__pushChild(children[i]);\n    }\n    __onRquestData() {\n        this.target.emitEvent(new WatchEvent(WatchEvent.DATA, { updatedList: this.updatedList }));\n        this.__updatedList = new LeafList();\n        this.totalTimes++;\n        this.changed = false;\n        this.hasVisible = false;\n        this.hasRemove = false;\n        this.hasAdd = false;\n    }\n    __listenEvents() {\n        const { target } = this;\n        this.__eventIds = [\n            target.on_(PropertyEvent.CHANGE, this.__onAttrChange, this),\n            target.on_([ChildEvent.ADD, ChildEvent.REMOVE], this.__onChildEvent, this),\n            target.on_(WatchEvent.REQUEST, this.__onRquestData, this)\n        ];\n    }\n    __removeListenEvents() {\n        this.target.off_(this.__eventIds);\n    }\n    destroy() {\n        if (this.target) {\n            this.stop();\n            this.__removeListenEvents();\n            this.target = null;\n            this.__updatedList = null;\n        }\n    }\n}\n\nconst { updateAllMatrix: updateAllMatrix$1, updateBounds: updateOneBounds, updateAllWorldOpacity } = LeafHelper;\nconst { pushAllChildBranch, pushAllParent } = BranchHelper;\nfunction updateMatrix(updateList, levelList) {\n    let layout;\n    updateList.list.forEach(leaf => {\n        layout = leaf.__layout;\n        if (levelList.without(leaf) && !layout.proxyZoom) {\n            if (layout.matrixChanged) {\n                updateAllMatrix$1(leaf, true);\n                levelList.add(leaf);\n                if (leaf.isBranch)\n                    pushAllChildBranch(leaf, levelList);\n                pushAllParent(leaf, levelList);\n            }\n            else if (layout.boundsChanged) {\n                levelList.add(leaf);\n                if (leaf.isBranch)\n                    leaf.__tempNumber = 0;\n                pushAllParent(leaf, levelList);\n            }\n        }\n    });\n}\nfunction updateBounds(boundsList) {\n    let list, branch, children;\n    boundsList.sort(true);\n    boundsList.levels.forEach(level => {\n        list = boundsList.levelMap[level];\n        for (let i = 0, len = list.length; i < len; i++) {\n            branch = list[i];\n            if (branch.isBranch && branch.__tempNumber) {\n                children = branch.children;\n                for (let j = 0, jLen = children.length; j < jLen; j++) {\n                    if (!children[j].isBranch) {\n                        updateOneBounds(children[j]);\n                    }\n                }\n            }\n            updateOneBounds(branch);\n        }\n    });\n}\nfunction updateChange(updateList) {\n    let layout;\n    updateList.list.forEach(leaf => {\n        layout = leaf.__layout;\n        if (layout.opacityChanged)\n            updateAllWorldOpacity(leaf);\n        if (layout.stateStyleChanged)\n            setTimeout(() => layout.stateStyleChanged && leaf.updateState());\n        leaf.__updateChange();\n    });\n}\n\nconst { worldBounds } = LeafBoundsHelper;\nconst bigBounds = { x: 0, y: 0, width: 100000, height: 100000 };\nclass LayoutBlockData {\n    constructor(list) {\n        this.updatedBounds = new Bounds();\n        this.beforeBounds = new Bounds();\n        this.afterBounds = new Bounds();\n        if (list instanceof Array)\n            list = new LeafList(list);\n        this.updatedList = list;\n    }\n    setBefore() {\n        this.beforeBounds.setListWithFn(this.updatedList.list, worldBounds);\n    }\n    setAfter() {\n        const { list } = this.updatedList;\n        if (list.some(leaf => leaf.noBounds)) {\n            this.afterBounds.set(bigBounds);\n        }\n        else {\n            this.afterBounds.setListWithFn(list, worldBounds);\n        }\n        this.updatedBounds.setList([this.beforeBounds, this.afterBounds]);\n    }\n    merge(data) {\n        this.updatedList.addList(data.updatedList.list);\n        this.beforeBounds.add(data.beforeBounds);\n        this.afterBounds.add(data.afterBounds);\n        this.updatedBounds.add(data.updatedBounds);\n    }\n    destroy() {\n        this.updatedList = null;\n    }\n}\n\nconst { updateAllMatrix, updateAllChange } = LeafHelper;\nconst debug$2 = Debug.get('Layouter');\nclass Layouter {\n    constructor(target, userConfig) {\n        this.totalTimes = 0;\n        this.config = {};\n        this.__levelList = new LeafLevelList();\n        this.target = target;\n        if (userConfig)\n            this.config = DataHelper.default(userConfig, this.config);\n        this.__listenEvents();\n    }\n    start() {\n        if (this.disabled)\n            return;\n        this.running = true;\n    }\n    stop() {\n        this.running = false;\n    }\n    disable() {\n        this.stop();\n        this.__removeListenEvents();\n        this.disabled = true;\n    }\n    layout() {\n        if (!this.running)\n            return;\n        const { target } = this;\n        this.times = 0;\n        try {\n            target.emit(LayoutEvent.START);\n            this.layoutOnce();\n            target.emitEvent(new LayoutEvent(LayoutEvent.END, this.layoutedBlocks, this.times));\n        }\n        catch (e) {\n            debug$2.error(e);\n        }\n        this.layoutedBlocks = null;\n    }\n    layoutAgain() {\n        if (this.layouting) {\n            this.waitAgain = true;\n        }\n        else {\n            this.layoutOnce();\n        }\n    }\n    layoutOnce() {\n        if (this.layouting)\n            return debug$2.warn('layouting');\n        if (this.times > 3)\n            return debug$2.warn('layout max times');\n        this.times++;\n        this.totalTimes++;\n        this.layouting = true;\n        this.target.emit(WatchEvent.REQUEST);\n        if (this.totalTimes > 1) {\n            this.partLayout();\n        }\n        else {\n            this.fullLayout();\n        }\n        this.layouting = false;\n        if (this.waitAgain) {\n            this.waitAgain = false;\n            this.layoutOnce();\n        }\n    }\n    partLayout() {\n        var _a;\n        if (!((_a = this.__updatedList) === null || _a === void 0 ? void 0 : _a.length))\n            return;\n        const t = Run.start('PartLayout');\n        const { target, __updatedList: updateList } = this;\n        const { BEFORE, LAYOUT, AFTER } = LayoutEvent;\n        const blocks = this.getBlocks(updateList);\n        blocks.forEach(item => item.setBefore());\n        target.emitEvent(new LayoutEvent(BEFORE, blocks, this.times));\n        this.extraBlock = null;\n        updateList.sort();\n        updateMatrix(updateList, this.__levelList);\n        updateBounds(this.__levelList);\n        updateChange(updateList);\n        if (this.extraBlock)\n            blocks.push(this.extraBlock);\n        blocks.forEach(item => item.setAfter());\n        target.emitEvent(new LayoutEvent(LAYOUT, blocks, this.times));\n        target.emitEvent(new LayoutEvent(AFTER, blocks, this.times));\n        this.addBlocks(blocks);\n        this.__levelList.reset();\n        this.__updatedList = null;\n        Run.end(t);\n    }\n    fullLayout() {\n        const t = Run.start('FullLayout');\n        const { target } = this;\n        const { BEFORE, LAYOUT, AFTER } = LayoutEvent;\n        const blocks = this.getBlocks(new LeafList(target));\n        target.emitEvent(new LayoutEvent(BEFORE, blocks, this.times));\n        Layouter.fullLayout(target);\n        blocks.forEach(item => { item.setAfter(); });\n        target.emitEvent(new LayoutEvent(LAYOUT, blocks, this.times));\n        target.emitEvent(new LayoutEvent(AFTER, blocks, this.times));\n        this.addBlocks(blocks);\n        Run.end(t);\n    }\n    static fullLayout(target) {\n        updateAllMatrix(target, true);\n        if (target.isBranch) {\n            BranchHelper.updateBounds(target);\n        }\n        else {\n            LeafHelper.updateBounds(target);\n        }\n        updateAllChange(target);\n    }\n    addExtra(leaf) {\n        if (!this.__updatedList.has(leaf)) {\n            const { updatedList, beforeBounds } = this.extraBlock || (this.extraBlock = new LayoutBlockData([]));\n            updatedList.length ? beforeBounds.add(leaf.__world) : beforeBounds.set(leaf.__world);\n            updatedList.add(leaf);\n        }\n    }\n    createBlock(data) {\n        return new LayoutBlockData(data);\n    }\n    getBlocks(list) {\n        return [this.createBlock(list)];\n    }\n    addBlocks(current) {\n        this.layoutedBlocks ? this.layoutedBlocks.push(...current) : this.layoutedBlocks = current;\n    }\n    __onReceiveWatchData(event) {\n        this.__updatedList = event.data.updatedList;\n    }\n    __listenEvents() {\n        const { target } = this;\n        this.__eventIds = [\n            target.on_(LayoutEvent.REQUEST, this.layout, this),\n            target.on_(LayoutEvent.AGAIN, this.layoutAgain, this),\n            target.on_(WatchEvent.DATA, this.__onReceiveWatchData, this)\n        ];\n    }\n    __removeListenEvents() {\n        this.target.off_(this.__eventIds);\n    }\n    destroy() {\n        if (this.target) {\n            this.stop();\n            this.__removeListenEvents();\n            this.target = this.config = null;\n        }\n    }\n}\n\nconst debug$1 = Debug.get('Renderer');\nclass Renderer {\n    get needFill() { return !!(!this.canvas.allowBackgroundColor && this.config.fill); }\n    constructor(target, canvas, userConfig) {\n        this.FPS = 60;\n        this.totalTimes = 0;\n        this.times = 0;\n        this.config = {\n            usePartRender: true,\n            maxFPS: 60\n        };\n        this.target = target;\n        this.canvas = canvas;\n        if (userConfig)\n            this.config = DataHelper.default(userConfig, this.config);\n        this.__listenEvents();\n        this.__requestRender();\n    }\n    start() {\n        this.running = true;\n    }\n    stop() {\n        this.running = false;\n    }\n    update() {\n        this.changed = true;\n    }\n    requestLayout() {\n        this.target.emit(LayoutEvent.REQUEST);\n    }\n    render(callback) {\n        if (!(this.running && this.canvas.view)) {\n            this.changed = true;\n            return;\n        }\n        const { target } = this;\n        this.times = 0;\n        this.totalBounds = new Bounds();\n        debug$1.log(target.innerName, '--->');\n        try {\n            if (!target.isApp)\n                target.app.emit(RenderEvent.CHILD_START, target);\n            this.emitRender(RenderEvent.START);\n            this.renderOnce(callback);\n            this.emitRender(RenderEvent.END, this.totalBounds);\n            ImageManager.clearRecycled();\n        }\n        catch (e) {\n            this.rendering = false;\n            debug$1.error(e);\n        }\n        debug$1.log('-------------|');\n    }\n    renderAgain() {\n        if (this.rendering) {\n            this.waitAgain = true;\n        }\n        else {\n            this.renderOnce();\n        }\n    }\n    renderOnce(callback) {\n        if (this.rendering)\n            return debug$1.warn('rendering');\n        if (this.times > 3)\n            return debug$1.warn('render max times');\n        this.times++;\n        this.totalTimes++;\n        this.rendering = true;\n        this.changed = false;\n        this.renderBounds = new Bounds();\n        this.renderOptions = {};\n        if (callback) {\n            this.emitRender(RenderEvent.BEFORE);\n            callback();\n        }\n        else {\n            this.requestLayout();\n            if (this.ignore) {\n                this.ignore = this.rendering = false;\n                return;\n            }\n            this.emitRender(RenderEvent.BEFORE);\n            if (this.config.usePartRender && this.totalTimes > 1) {\n                this.partRender();\n            }\n            else {\n                this.fullRender();\n            }\n        }\n        this.emitRender(RenderEvent.RENDER, this.renderBounds, this.renderOptions);\n        this.emitRender(RenderEvent.AFTER, this.renderBounds, this.renderOptions);\n        this.updateBlocks = null;\n        this.rendering = false;\n        if (this.waitAgain) {\n            this.waitAgain = false;\n            this.renderOnce();\n        }\n    }\n    partRender() {\n        const { canvas, updateBlocks: list } = this;\n        if (!list)\n            return debug$1.warn('PartRender: need update attr');\n        this.mergeBlocks();\n        list.forEach(block => { if (canvas.bounds.hit(block) && !block.isEmpty())\n            this.clipRender(block); });\n    }\n    clipRender(block) {\n        const t = Run.start('PartRender');\n        const { canvas } = this;\n        const bounds = block.getIntersect(canvas.bounds);\n        const includes = block.includes(this.target.__world);\n        const realBounds = new Bounds(bounds);\n        canvas.save();\n        if (includes && !Debug.showRepaint) {\n            canvas.clear();\n        }\n        else {\n            bounds.spread(10 + 1 / this.canvas.pixelRatio).ceil();\n            canvas.clearWorld(bounds, true);\n            canvas.clipWorld(bounds, true);\n        }\n        this.__render(bounds, includes, realBounds);\n        canvas.restore();\n        Run.end(t);\n    }\n    fullRender() {\n        const t = Run.start('FullRender');\n        const { canvas } = this;\n        canvas.save();\n        canvas.clear();\n        this.__render(canvas.bounds, true);\n        canvas.restore();\n        Run.end(t);\n    }\n    __render(bounds, includes, realBounds) {\n        const options = bounds.includes(this.target.__world) ? { includes } : { bounds, includes };\n        if (this.needFill)\n            this.canvas.fillWorld(bounds, this.config.fill);\n        if (Debug.showRepaint)\n            this.canvas.strokeWorld(bounds, 'red');\n        this.target.__render(this.canvas, options);\n        this.renderBounds = realBounds = realBounds || bounds;\n        this.renderOptions = options;\n        this.totalBounds.isEmpty() ? this.totalBounds = realBounds : this.totalBounds.add(realBounds);\n        if (Debug.showHitView)\n            this.renderHitView(options);\n        if (Debug.showBoundsView)\n            this.renderBoundsView(options);\n        this.canvas.updateRender(realBounds);\n    }\n    renderHitView(_options) { }\n    renderBoundsView(_options) { }\n    addBlock(block) {\n        if (!this.updateBlocks)\n            this.updateBlocks = [];\n        this.updateBlocks.push(block);\n    }\n    mergeBlocks() {\n        const { updateBlocks: list } = this;\n        if (list) {\n            const bounds = new Bounds();\n            bounds.setList(list);\n            list.length = 0;\n            list.push(bounds);\n        }\n    }\n    __requestRender() {\n        const startTime = Date.now();\n        Platform.requestRender(() => {\n            this.FPS = Math.min(60, Math.ceil(1000 / (Date.now() - startTime)));\n            if (this.running) {\n                if (this.changed && this.canvas.view)\n                    this.render();\n                this.target.emit(RenderEvent.NEXT);\n            }\n            if (this.target)\n                this.__requestRender();\n        });\n    }\n    __onResize(e) {\n        if (this.canvas.unreal)\n            return;\n        if (e.bigger || !e.samePixelRatio) {\n            const { width, height } = e.old;\n            const bounds = new Bounds(0, 0, width, height);\n            if (!bounds.includes(this.target.__world) || this.needFill || !e.samePixelRatio) {\n                this.addBlock(this.canvas.bounds);\n                this.target.forceUpdate('surface');\n                return;\n            }\n        }\n        this.addBlock(new Bounds(0, 0, 1, 1));\n        this.changed = true;\n    }\n    __onLayoutEnd(event) {\n        if (event.data)\n            event.data.map(item => {\n                let empty;\n                if (item.updatedList)\n                    item.updatedList.list.some(leaf => {\n                        empty = (!leaf.__world.width || !leaf.__world.height);\n                        if (empty) {\n                            if (!leaf.isLeafer)\n                                debug$1.tip(leaf.innerName, ': empty');\n                            empty = (!leaf.isBranch || leaf.isBranchLeaf);\n                        }\n                        return empty;\n                    });\n                this.addBlock(empty ? this.canvas.bounds : item.updatedBounds);\n            });\n    }\n    emitRender(type, bounds, options) {\n        this.target.emitEvent(new RenderEvent(type, this.times, bounds, options));\n    }\n    __listenEvents() {\n        const { target } = this;\n        this.__eventIds = [\n            target.on_(RenderEvent.REQUEST, this.update, this),\n            target.on_(LayoutEvent.END, this.__onLayoutEnd, this),\n            target.on_(RenderEvent.AGAIN, this.renderAgain, this),\n            target.on_(ResizeEvent.RESIZE, this.__onResize, this)\n        ];\n    }\n    __removeListenEvents() {\n        this.target.off_(this.__eventIds);\n    }\n    destroy() {\n        if (this.target) {\n            this.stop();\n            this.__removeListenEvents();\n            this.target = this.canvas = this.config = null;\n        }\n    }\n}\n\nconst { hitRadiusPoint } = BoundsHelper;\nclass Picker {\n    constructor(target, selector) {\n        this.target = target;\n        this.selector = selector;\n    }\n    getByPoint(hitPoint, hitRadius, options) {\n        if (!hitRadius)\n            hitRadius = 0;\n        if (!options)\n            options = {};\n        const through = options.through || false;\n        const ignoreHittable = options.ignoreHittable || false;\n        const target = options.target || this.target;\n        this.exclude = options.exclude || null;\n        this.point = { x: hitPoint.x, y: hitPoint.y, radiusX: hitRadius, radiusY: hitRadius };\n        this.findList = new LeafList(options.findList);\n        if (!options.findList)\n            this.hitBranch(target);\n        const { list } = this.findList;\n        const leaf = this.getBestMatchLeaf(list, options.bottomList, ignoreHittable);\n        const path = ignoreHittable ? this.getPath(leaf) : this.getHitablePath(leaf);\n        this.clear();\n        return through ? { path, target: leaf, throughPath: list.length ? this.getThroughPath(list) : path } : { path, target: leaf };\n    }\n    getBestMatchLeaf(list, bottomList, ignoreHittable) {\n        if (list.length) {\n            let find;\n            this.findList = new LeafList();\n            const { x, y } = this.point;\n            const point = { x, y, radiusX: 0, radiusY: 0 };\n            for (let i = 0, len = list.length; i < len; i++) {\n                find = list[i];\n                if (ignoreHittable || LeafHelper.worldHittable(find)) {\n                    this.hitChild(find, point);\n                    if (this.findList.length)\n                        return this.findList.list[0];\n                }\n            }\n        }\n        if (bottomList) {\n            for (let i = 0, len = bottomList.length; i < len; i++) {\n                this.hitChild(bottomList[i].target, this.point, bottomList[i].proxy);\n                if (this.findList.length)\n                    return this.findList.list[0];\n            }\n        }\n        return list[0];\n    }\n    getPath(leaf) {\n        const path = new LeafList();\n        while (leaf) {\n            path.add(leaf);\n            leaf = leaf.parent;\n        }\n        if (this.target)\n            path.add(this.target);\n        return path;\n    }\n    getHitablePath(leaf) {\n        const path = this.getPath(leaf && leaf.hittable ? leaf : null);\n        let item, hittablePath = new LeafList();\n        for (let i = path.list.length - 1; i > -1; i--) {\n            item = path.list[i];\n            if (!item.__.hittable)\n                break;\n            hittablePath.addAt(item, 0);\n            if (!item.__.hitChildren)\n                break;\n        }\n        return hittablePath;\n    }\n    getThroughPath(list) {\n        const throughPath = new LeafList();\n        const pathList = [];\n        for (let i = list.length - 1; i > -1; i--) {\n            pathList.push(this.getPath(list[i]));\n        }\n        let path, nextPath, leaf;\n        for (let i = 0, len = pathList.length; i < len; i++) {\n            path = pathList[i], nextPath = pathList[i + 1];\n            for (let j = 0, jLen = path.length; j < jLen; j++) {\n                leaf = path.list[j];\n                if (nextPath && nextPath.has(leaf))\n                    break;\n                throughPath.add(leaf);\n            }\n        }\n        return throughPath;\n    }\n    hitBranch(branch) {\n        this.eachFind(branch.children, branch.__onlyHitMask);\n    }\n    eachFind(children, hitMask) {\n        let child, hit;\n        const { point } = this, len = children.length;\n        for (let i = len - 1; i > -1; i--) {\n            child = children[i];\n            if (!child.__.visible || (hitMask && !child.__.mask))\n                continue;\n            hit = child.__.hitRadius ? true : hitRadiusPoint(child.__world, point);\n            if (child.isBranch) {\n                if (hit || child.__ignoreHitWorld) {\n                    this.eachFind(child.children, child.__onlyHitMask);\n                    if (child.isBranchLeaf)\n                        this.hitChild(child, point);\n                }\n            }\n            else {\n                if (hit)\n                    this.hitChild(child, point);\n            }\n        }\n    }\n    hitChild(child, point, proxy) {\n        if (this.exclude && this.exclude.has(child))\n            return;\n        if (child.__hitWorld(point)) {\n            const { parent } = child;\n            if (parent && parent.__hasMask && !child.__.mask && !parent.children.some(item => item.__.mask && item.__hitWorld(point)))\n                return;\n            this.findList.add(proxy || child);\n        }\n    }\n    clear() {\n        this.point = null;\n        this.findList = null;\n        this.exclude = null;\n    }\n    destroy() {\n        this.clear();\n    }\n}\n\nconst { Yes, NoAndSkip, YesAndSkip } = Answer;\nconst idCondition = {}, classNameCondition = {}, tagCondition = {};\nclass Selector {\n    constructor(target, userConfig) {\n        this.config = {};\n        this.innerIdMap = {};\n        this.idMap = {};\n        this.methods = {\n            id: (leaf, name) => leaf.id === name ? (this.target && (this.idMap[name] = leaf), 1) : 0,\n            innerId: (leaf, innerId) => leaf.innerId === innerId ? (this.target && (this.innerIdMap[innerId] = leaf), 1) : 0,\n            className: (leaf, name) => leaf.className === name ? 1 : 0,\n            tag: (leaf, name) => leaf.__tag === name ? 1 : 0,\n            tags: (leaf, nameMap) => nameMap[leaf.__tag] ? 1 : 0\n        };\n        this.target = target;\n        if (userConfig)\n            this.config = DataHelper.default(userConfig, this.config);\n        this.picker = new Picker(target, this);\n        if (target)\n            this.__listenEvents();\n    }\n    getBy(condition, branch, one, options) {\n        switch (typeof condition) {\n            case 'number':\n                const leaf = this.getByInnerId(condition, branch);\n                return one ? leaf : (leaf ? [leaf] : []);\n            case 'string':\n                switch (condition[0]) {\n                    case '#':\n                        idCondition.id = condition.substring(1), condition = idCondition;\n                        break;\n                    case '.':\n                        classNameCondition.className = condition.substring(1), condition = classNameCondition;\n                        break;\n                    default:\n                        tagCondition.tag = condition, condition = tagCondition;\n                }\n            case 'object':\n                if (condition.id !== undefined) {\n                    const leaf = this.getById(condition.id, branch);\n                    return one ? leaf : (leaf ? [leaf] : []);\n                }\n                else if (condition.tag) {\n                    const { tag } = condition, isArray = tag instanceof Array;\n                    return this.getByMethod(isArray ? this.methods.tags : this.methods.tag, branch, one, isArray ? DataHelper.toMap(tag) : tag);\n                }\n                else {\n                    return this.getByMethod(this.methods.className, branch, one, condition.className);\n                }\n            case 'function':\n                return this.getByMethod(condition, branch, one, options);\n        }\n    }\n    getByPoint(hitPoint, hitRadius, options) {\n        if (Platform.name === 'node' && this.target)\n            this.target.emit(LayoutEvent.CHECK_UPDATE);\n        return this.picker.getByPoint(hitPoint, hitRadius, options);\n    }\n    getByInnerId(innerId, branch) {\n        const cache = this.innerIdMap[innerId];\n        if (cache)\n            return cache;\n        this.eachFind(this.toChildren(branch), this.methods.innerId, null, innerId);\n        return this.findLeaf;\n    }\n    getById(id, branch) {\n        const cache = this.idMap[id];\n        if (cache && LeafHelper.hasParent(cache, branch || this.target))\n            return cache;\n        this.eachFind(this.toChildren(branch), this.methods.id, null, id);\n        return this.findLeaf;\n    }\n    getByClassName(className, branch) {\n        return this.getByMethod(this.methods.className, branch, false, className);\n    }\n    getByTag(tag, branch) {\n        return this.getByMethod(this.methods.tag, branch, false, tag);\n    }\n    getByMethod(method, branch, one, options) {\n        const list = one ? null : [];\n        this.eachFind(this.toChildren(branch), method, list, options);\n        return list || this.findLeaf;\n    }\n    eachFind(children, method, list, options) {\n        let child, result;\n        for (let i = 0, len = children.length; i < len; i++) {\n            child = children[i];\n            result = method(child, options);\n            if (result === Yes || result === YesAndSkip) {\n                if (list) {\n                    list.push(child);\n                }\n                else {\n                    this.findLeaf = child;\n                    return;\n                }\n            }\n            if (child.isBranch && result < NoAndSkip)\n                this.eachFind(child.children, method, list, options);\n        }\n    }\n    toChildren(branch) {\n        this.findLeaf = null;\n        return [branch || this.target];\n    }\n    __onRemoveChild(event) {\n        const { id, innerId } = event.child;\n        if (this.idMap[id])\n            delete this.idMap[id];\n        if (this.innerIdMap[innerId])\n            delete this.innerIdMap[innerId];\n    }\n    __checkIdChange(event) {\n        if (event.attrName === 'id') {\n            const id = event.oldValue;\n            if (this.idMap[id])\n                delete this.idMap[id];\n        }\n    }\n    __listenEvents() {\n        this.__eventIds = [\n            this.target.on_(ChildEvent.REMOVE, this.__onRemoveChild, this),\n            this.target.on_(PropertyEvent.CHANGE, this.__checkIdChange, this)\n        ];\n    }\n    __removeListenEvents() {\n        this.target.off_(this.__eventIds);\n        this.__eventIds.length = 0;\n    }\n    destroy() {\n        if (this.__eventIds.length) {\n            this.__removeListenEvents();\n            this.picker.destroy();\n            this.findLeaf = null;\n            this.innerIdMap = {};\n            this.idMap = {};\n        }\n    }\n}\n\nObject.assign(Creator, {\n    watcher: (target, options) => new Watcher(target, options),\n    layouter: (target, options) => new Layouter(target, options),\n    renderer: (target, canvas, options) => new Renderer(target, canvas, options),\n    selector: (target, options) => new Selector(target, options)\n});\nPlatform.layout = Layouter.fullLayout;\n\nconst PointerEventHelper = {\n    convert(e, local) {\n        const base = InteractionHelper.getBase(e);\n        const data = Object.assign(Object.assign({}, base), { x: local.x, y: local.y, width: e.width, height: e.height, pointerType: e.pointerType, pressure: e.pressure });\n        if (data.pointerType === 'pen') {\n            data.tangentialPressure = e.tangentialPressure;\n            data.tiltX = e.tiltX;\n            data.tiltY = e.tiltY;\n            data.twist = e.twist;\n        }\n        return data;\n    },\n    convertMouse(e, local) {\n        const base = InteractionHelper.getBase(e);\n        return Object.assign(Object.assign({}, base), { x: local.x, y: local.y, width: 1, height: 1, pointerType: 'mouse', pressure: 0.5 });\n    },\n    convertTouch(e, local) {\n        const touch = PointerEventHelper.getTouch(e);\n        const base = InteractionHelper.getBase(e);\n        return Object.assign(Object.assign({}, base), { x: local.x, y: local.y, width: 1, height: 1, pointerType: 'touch', multiTouch: e.touches.length > 1, pressure: touch.force });\n    },\n    getTouch(e) {\n        return e.targetTouches[0] || e.changedTouches[0];\n    }\n};\n\nconst WheelEventHelper = {\n    getMove(e, config) {\n        let { moveSpeed } = config;\n        let { deltaX, deltaY } = e;\n        if (e.shiftKey && !deltaX) {\n            deltaX = deltaY;\n            deltaY = 0;\n        }\n        if (deltaX > 50)\n            deltaX = Math.max(50, deltaX / 3);\n        if (deltaY > 50)\n            deltaY = Math.max(50, deltaY / 3);\n        return { x: -deltaX * moveSpeed * 2, y: -deltaY * moveSpeed * 2 };\n    },\n    getScale(e, config) {\n        let zoom;\n        let scale = 1;\n        let { zoomMode, zoomSpeed } = config;\n        const delta = e.deltaY || e.deltaX;\n        if (zoomMode) {\n            zoom = (zoomMode === 'mouse') ? true : (!e.deltaX && (Platform.intWheelDeltaY ? Math.abs(delta) > 17 : Math.ceil(delta) !== delta));\n            if (e.shiftKey || e.metaKey || e.ctrlKey)\n                zoom = true;\n        }\n        else {\n            zoom = !e.shiftKey && (e.metaKey || e.ctrlKey);\n        }\n        if (zoom) {\n            zoomSpeed = MathHelper.within(zoomSpeed, 0, 1);\n            const min = e.deltaY ? config.delta.y : config.delta.x;\n            scale = 1 - delta / (min * 4) * zoomSpeed;\n            if (scale < 0.5)\n                scale = 0.5;\n            if (scale >= 1.5)\n                scale = 1.5;\n        }\n        return scale;\n    }\n};\n\nconst KeyEventHelper = {\n    convert(e) {\n        const base = InteractionHelper.getBase(e);\n        const data = Object.assign(Object.assign({}, base), { code: e.code, key: e.key });\n        return data;\n    }\n};\n\nconst { getMoveEventData, getZoomEventData, getRotateEventData, pathCanDrag } = InteractionHelper;\nclass Interaction extends InteractionBase {\n    __listenEvents() {\n        super.__listenEvents();\n        const view = this.view = this.canvas.view;\n        this.viewEvents = {\n            'pointerdown': this.onPointerDown,\n            'mousedown': this.onMouseDown,\n            'touchstart': this.onTouchStart,\n            'contextmenu': this.onContextMenu,\n            'wheel': this.onWheel,\n            'gesturestart': this.onGesturestart,\n            'gesturechange': this.onGesturechange,\n            'gestureend': this.onGestureend\n        };\n        this.windowEvents = {\n            'pointermove': this.onPointerMove,\n            'pointerup': this.onPointerUp,\n            'pointercancel': this.onPointerCancel,\n            'mousemove': this.onMouseMove,\n            'mouseup': this.onMouseUp,\n            'touchmove': this.onTouchMove,\n            'touchend': this.onTouchEnd,\n            'touchcancel': this.onTouchCancel,\n            'keydown': this.onKeyDown,\n            'keyup': this.onKeyUp,\n            'scroll': this.onScroll\n        };\n        const { viewEvents, windowEvents } = this;\n        for (let name in viewEvents) {\n            viewEvents[name] = viewEvents[name].bind(this);\n            view.addEventListener(name, viewEvents[name]);\n        }\n        for (let name in windowEvents) {\n            windowEvents[name] = windowEvents[name].bind(this);\n            window.addEventListener(name, windowEvents[name]);\n        }\n    }\n    __removeListenEvents() {\n        super.__removeListenEvents();\n        const { viewEvents, windowEvents } = this;\n        for (let name in viewEvents) {\n            this.view.removeEventListener(name, viewEvents[name]);\n            this.viewEvents = {};\n        }\n        for (let name in windowEvents) {\n            window.removeEventListener(name, windowEvents[name]);\n            this.windowEvents = {};\n        }\n    }\n    getTouches(touches) {\n        const list = [];\n        for (let i = 0, len = touches.length; i < len; i++) {\n            list.push(touches[i]);\n        }\n        return list;\n    }\n    preventDefaultPointer(e) {\n        const { pointer } = this.config;\n        if (pointer.preventDefault)\n            e.preventDefault();\n    }\n    preventDefaultWheel(e) {\n        const { wheel } = this.config;\n        if (wheel.preventDefault)\n            e.preventDefault();\n    }\n    preventWindowPointer(e) {\n        return !this.downData && e.target !== this.view;\n    }\n    onKeyDown(e) {\n        this.keyDown(KeyEventHelper.convert(e));\n    }\n    onKeyUp(e) {\n        this.keyUp(KeyEventHelper.convert(e));\n    }\n    onContextMenu(e) {\n        if (this.config.pointer.preventDefaultMenu)\n            e.preventDefault();\n        this.menu(PointerEventHelper.convert(e, this.getLocal(e)));\n    }\n    onScroll() {\n        this.canvas.updateClientBounds();\n    }\n    onPointerDown(e) {\n        this.preventDefaultPointer(e);\n        if (this.config.pointer.touch || this.useMultiTouch)\n            return;\n        this.usePointer || (this.usePointer = true);\n        this.pointerDown(PointerEventHelper.convert(e, this.getLocal(e)));\n    }\n    onPointerMove(e) {\n        if (this.config.pointer.touch || this.useMultiTouch || this.preventWindowPointer(e))\n            return;\n        this.usePointer || (this.usePointer = true);\n        this.pointerMove(PointerEventHelper.convert(e, this.getLocal(e, true)));\n    }\n    onPointerUp(e) {\n        if (this.downData)\n            this.preventDefaultPointer(e);\n        if (this.config.pointer.touch || this.useMultiTouch || this.preventWindowPointer(e))\n            return;\n        this.pointerUp(PointerEventHelper.convert(e, this.getLocal(e)));\n    }\n    onPointerCancel() {\n        if (this.useMultiTouch)\n            return;\n        this.pointerCancel();\n    }\n    onMouseDown(e) {\n        this.preventDefaultPointer(e);\n        if (this.useTouch || this.usePointer)\n            return;\n        this.pointerDown(PointerEventHelper.convertMouse(e, this.getLocal(e)));\n    }\n    onMouseMove(e) {\n        if (this.useTouch || this.usePointer || this.preventWindowPointer(e))\n            return;\n        this.pointerMove(PointerEventHelper.convertMouse(e, this.getLocal(e, true)));\n    }\n    onMouseUp(e) {\n        if (this.downData)\n            this.preventDefaultPointer(e);\n        if (this.useTouch || this.usePointer || this.preventWindowPointer(e))\n            return;\n        this.pointerUp(PointerEventHelper.convertMouse(e, this.getLocal(e)));\n    }\n    onMouseCancel() {\n        if (this.useTouch || this.usePointer)\n            return;\n        this.pointerCancel();\n    }\n    onTouchStart(e) {\n        const touch = PointerEventHelper.getTouch(e);\n        const local = this.getLocal(touch, true);\n        const { preventDefault } = this.config.touch;\n        if (preventDefault === true || (preventDefault === 'auto' && pathCanDrag(this.findPath(local))))\n            e.preventDefault();\n        this.multiTouchStart(e);\n        if (this.usePointer)\n            return;\n        if (this.touchTimer) {\n            window.clearTimeout(this.touchTimer);\n            this.touchTimer = 0;\n        }\n        this.useTouch = true;\n        this.pointerDown(PointerEventHelper.convertTouch(e, local));\n    }\n    onTouchMove(e) {\n        this.multiTouchMove(e);\n        if (this.usePointer || this.preventWindowPointer(e))\n            return;\n        const touch = PointerEventHelper.getTouch(e);\n        this.pointerMove(PointerEventHelper.convertTouch(e, this.getLocal(touch)));\n    }\n    onTouchEnd(e) {\n        this.multiTouchEnd();\n        if (this.usePointer || this.preventWindowPointer(e))\n            return;\n        if (this.touchTimer)\n            clearTimeout(this.touchTimer);\n        this.touchTimer = setTimeout(() => {\n            this.useTouch = false;\n        }, 500);\n        const touch = PointerEventHelper.getTouch(e);\n        this.pointerUp(PointerEventHelper.convertTouch(e, this.getLocal(touch)));\n    }\n    onTouchCancel() {\n        if (this.usePointer)\n            return;\n        this.pointerCancel();\n    }\n    multiTouchStart(e) {\n        this.useMultiTouch = (e.touches.length > 1);\n        this.touches = this.useMultiTouch ? this.getTouches(e.touches) : undefined;\n        if (this.useMultiTouch)\n            this.pointerCancel();\n    }\n    multiTouchMove(e) {\n        if (!this.useMultiTouch)\n            return;\n        if (e.touches.length > 1) {\n            const touches = this.getTouches(e.touches);\n            const list = this.getKeepTouchList(this.touches, touches);\n            if (list.length > 1) {\n                this.multiTouch(InteractionHelper.getBase(e), list);\n                this.touches = touches;\n            }\n        }\n    }\n    multiTouchEnd() {\n        this.touches = null;\n        this.useMultiTouch = false;\n        this.transformEnd();\n    }\n    getKeepTouchList(old, touches) {\n        let to;\n        const list = [];\n        old.forEach(from => {\n            to = touches.find(touch => touch.identifier === from.identifier);\n            if (to)\n                list.push({ from: this.getLocal(from), to: this.getLocal(to) });\n        });\n        return list;\n    }\n    getLocalTouchs(points) {\n        return points.map(point => this.getLocal(point));\n    }\n    onWheel(e) {\n        this.preventDefaultWheel(e);\n        const { wheel } = this.config;\n        if (wheel.disabled)\n            return;\n        const scale = wheel.getScale ? wheel.getScale(e, wheel) : WheelEventHelper.getScale(e, wheel);\n        const local = this.getLocal(e);\n        const eventBase = InteractionHelper.getBase(e);\n        scale !== 1 ? this.zoom(getZoomEventData(local, scale, eventBase)) : this.move(getMoveEventData(local, wheel.getMove ? wheel.getMove(e, wheel) : WheelEventHelper.getMove(e, wheel), eventBase));\n    }\n    onGesturestart(e) {\n        if (this.useMultiTouch)\n            return;\n        this.preventDefaultWheel(e);\n        this.lastGestureScale = 1;\n        this.lastGestureRotation = 0;\n    }\n    onGesturechange(e) {\n        if (this.useMultiTouch)\n            return;\n        this.preventDefaultWheel(e);\n        const local = this.getLocal(e);\n        const eventBase = InteractionHelper.getBase(e);\n        const changeScale = e.scale / this.lastGestureScale;\n        const changeAngle = e.rotation - this.lastGestureRotation;\n        let { rotateSpeed } = this.config.wheel;\n        rotateSpeed = MathHelper.within(rotateSpeed, 0, 1);\n        this.zoom(getZoomEventData(local, changeScale * changeScale, eventBase));\n        this.rotate(getRotateEventData(local, changeAngle / Math.PI * 180 * (rotateSpeed / 4 + 0.1), eventBase));\n        this.lastGestureScale = e.scale;\n        this.lastGestureRotation = e.rotation;\n    }\n    onGestureend(e) {\n        if (this.useMultiTouch)\n            return;\n        this.preventDefaultWheel(e);\n        this.transformEnd();\n    }\n    setCursor(cursor) {\n        super.setCursor(cursor);\n        const list = [];\n        this.eachCursor(cursor, list);\n        if (typeof list[list.length - 1] === 'object')\n            list.push('default');\n        this.canvas.view.style.cursor = list.map(item => (typeof item === 'object') ? `url(${item.url}) ${item.x || 0} ${item.y || 0}` : item).join(',');\n    }\n    eachCursor(cursor, list, level = 0) {\n        level++;\n        if (cursor instanceof Array) {\n            cursor.forEach(item => this.eachCursor(item, list, level));\n        }\n        else {\n            const custom = typeof cursor === 'string' && Cursor.get(cursor);\n            if (custom && level < 2) {\n                this.eachCursor(custom, list, level);\n            }\n            else {\n                list.push(cursor);\n            }\n        }\n    }\n    destroy() {\n        if (this.view) {\n            super.destroy();\n            this.view = null;\n            this.touches = null;\n        }\n    }\n}\n\nfunction fillText(ui, canvas) {\n    let row;\n    const { rows, decorationY, decorationHeight } = ui.__.__textDrawData;\n    for (let i = 0, len = rows.length; i < len; i++) {\n        row = rows[i];\n        if (row.text)\n            canvas.fillText(row.text, row.x, row.y);\n        else if (row.data)\n            row.data.forEach(charData => { canvas.fillText(charData.char, charData.x, row.y); });\n        if (decorationY)\n            canvas.fillRect(row.x, row.y + decorationY, row.width, decorationHeight);\n    }\n}\n\nfunction fill(fill, ui, canvas) {\n    canvas.fillStyle = fill;\n    ui.__.__font ? fillText(ui, canvas) : (ui.__.windingRule ? canvas.fill(ui.__.windingRule) : canvas.fill());\n}\nfunction fills(fills, ui, canvas) {\n    let item;\n    const { windingRule, __font } = ui.__;\n    for (let i = 0, len = fills.length; i < len; i++) {\n        item = fills[i];\n        if (item.image && PaintImage.checkImage(ui, canvas, item, !__font))\n            continue;\n        if (item.style) {\n            canvas.fillStyle = item.style;\n            if (item.transform) {\n                canvas.save();\n                canvas.transform(item.transform);\n                if (item.blendMode)\n                    canvas.blendMode = item.blendMode;\n                __font ? fillText(ui, canvas) : (windingRule ? canvas.fill(windingRule) : canvas.fill());\n                canvas.restore();\n            }\n            else {\n                if (item.blendMode) {\n                    canvas.saveBlendMode(item.blendMode);\n                    __font ? fillText(ui, canvas) : (windingRule ? canvas.fill(windingRule) : canvas.fill());\n                    canvas.restoreBlendMode();\n                }\n                else {\n                    __font ? fillText(ui, canvas) : (windingRule ? canvas.fill(windingRule) : canvas.fill());\n                }\n            }\n        }\n    }\n}\n\nfunction strokeText(stroke, ui, canvas) {\n    const { strokeAlign } = ui.__;\n    const isStrokes = typeof stroke !== 'string';\n    switch (strokeAlign) {\n        case 'center':\n            canvas.setStroke(isStrokes ? undefined : stroke, ui.__.strokeWidth, ui.__);\n            isStrokes ? drawStrokesStyle(stroke, true, ui, canvas) : drawTextStroke(ui, canvas);\n            break;\n        case 'inside':\n            drawAlignStroke('inside', stroke, isStrokes, ui, canvas);\n            break;\n        case 'outside':\n            drawAlignStroke('outside', stroke, isStrokes, ui, canvas);\n            break;\n    }\n}\nfunction drawAlignStroke(align, stroke, isStrokes, ui, canvas) {\n    const { __strokeWidth, __font } = ui.__;\n    const out = canvas.getSameCanvas(true, true);\n    out.setStroke(isStrokes ? undefined : stroke, __strokeWidth * 2, ui.__);\n    out.font = __font;\n    isStrokes ? drawStrokesStyle(stroke, true, ui, out) : drawTextStroke(ui, out);\n    out.blendMode = align === 'outside' ? 'destination-out' : 'destination-in';\n    fillText(ui, out);\n    out.blendMode = 'normal';\n    if (ui.__worldFlipped)\n        canvas.copyWorldByReset(out, ui.__nowWorld);\n    else\n        canvas.copyWorldToInner(out, ui.__nowWorld, ui.__layout.renderBounds);\n    out.recycle(ui.__nowWorld);\n}\nfunction drawTextStroke(ui, canvas) {\n    let row;\n    const { rows, decorationY, decorationHeight } = ui.__.__textDrawData;\n    for (let i = 0, len = rows.length; i < len; i++) {\n        row = rows[i];\n        if (row.text)\n            canvas.strokeText(row.text, row.x, row.y);\n        else if (row.data)\n            row.data.forEach(charData => { canvas.strokeText(charData.char, charData.x, row.y); });\n        if (decorationY)\n            canvas.strokeRect(row.x, row.y + decorationY, row.width, decorationHeight);\n    }\n}\nfunction drawStrokesStyle(strokes, isText, ui, canvas) {\n    let item;\n    for (let i = 0, len = strokes.length; i < len; i++) {\n        item = strokes[i];\n        if (item.image && PaintImage.checkImage(ui, canvas, item, false))\n            continue;\n        if (item.style) {\n            canvas.strokeStyle = item.style;\n            if (item.blendMode) {\n                canvas.saveBlendMode(item.blendMode);\n                isText ? drawTextStroke(ui, canvas) : canvas.stroke();\n                canvas.restoreBlendMode();\n            }\n            else {\n                isText ? drawTextStroke(ui, canvas) : canvas.stroke();\n            }\n        }\n    }\n}\n\nfunction stroke(stroke, ui, canvas) {\n    const options = ui.__;\n    const { __strokeWidth, strokeAlign, __font } = options;\n    if (!__strokeWidth)\n        return;\n    if (__font) {\n        strokeText(stroke, ui, canvas);\n    }\n    else {\n        switch (strokeAlign) {\n            case 'center':\n                canvas.setStroke(stroke, __strokeWidth, options);\n                canvas.stroke();\n                break;\n            case 'inside':\n                canvas.save();\n                canvas.setStroke(stroke, __strokeWidth * 2, options);\n                options.windingRule ? canvas.clip(options.windingRule) : canvas.clip();\n                canvas.stroke();\n                canvas.restore();\n                break;\n            case 'outside':\n                const out = canvas.getSameCanvas(true, true);\n                out.setStroke(stroke, __strokeWidth * 2, options);\n                ui.__drawRenderPath(out);\n                out.stroke();\n                options.windingRule ? out.clip(options.windingRule) : out.clip();\n                out.clearWorld(ui.__layout.renderBounds);\n                if (ui.__worldFlipped)\n                    canvas.copyWorldByReset(out, ui.__nowWorld);\n                else\n                    canvas.copyWorldToInner(out, ui.__nowWorld, ui.__layout.renderBounds);\n                out.recycle(ui.__nowWorld);\n                break;\n        }\n    }\n}\nfunction strokes(strokes, ui, canvas) {\n    const options = ui.__;\n    const { __strokeWidth, strokeAlign, __font } = options;\n    if (!__strokeWidth)\n        return;\n    if (__font) {\n        strokeText(strokes, ui, canvas);\n    }\n    else {\n        switch (strokeAlign) {\n            case 'center':\n                canvas.setStroke(undefined, __strokeWidth, options);\n                drawStrokesStyle(strokes, false, ui, canvas);\n                break;\n            case 'inside':\n                canvas.save();\n                canvas.setStroke(undefined, __strokeWidth * 2, options);\n                options.windingRule ? canvas.clip(options.windingRule) : canvas.clip();\n                drawStrokesStyle(strokes, false, ui, canvas);\n                canvas.restore();\n                break;\n            case 'outside':\n                const { renderBounds } = ui.__layout;\n                const out = canvas.getSameCanvas(true, true);\n                ui.__drawRenderPath(out);\n                out.setStroke(undefined, __strokeWidth * 2, options);\n                drawStrokesStyle(strokes, false, ui, out);\n                options.windingRule ? out.clip(options.windingRule) : out.clip();\n                out.clearWorld(renderBounds);\n                if (ui.__worldFlipped)\n                    canvas.copyWorldByReset(out, ui.__nowWorld);\n                else\n                    canvas.copyWorldToInner(out, ui.__nowWorld, renderBounds);\n                out.recycle(ui.__nowWorld);\n                break;\n        }\n    }\n}\n\nconst { getSpread, getOuterOf, getByMove, getIntersectData } = BoundsHelper;\nfunction shape(ui, current, options) {\n    const canvas = current.getSameCanvas();\n    const nowWorld = ui.__nowWorld;\n    let bounds, fitMatrix, shapeBounds, worldCanvas;\n    let { scaleX, scaleY } = nowWorld;\n    if (scaleX < 0)\n        scaleX = -scaleX;\n    if (scaleY < 0)\n        scaleY = -scaleY;\n    if (current.bounds.includes(nowWorld)) {\n        worldCanvas = canvas;\n        bounds = shapeBounds = nowWorld;\n    }\n    else {\n        const { renderShapeSpread: spread } = ui.__layout;\n        const worldClipBounds = getIntersectData(spread ? getSpread(current.bounds, scaleX === scaleY ? spread * scaleX : [spread * scaleY, spread * scaleX]) : current.bounds, nowWorld);\n        fitMatrix = current.bounds.getFitMatrix(worldClipBounds);\n        let { a: fitScaleX, d: fitScaleY } = fitMatrix;\n        if (fitMatrix.a < 1) {\n            worldCanvas = current.getSameCanvas();\n            ui.__renderShape(worldCanvas, options);\n            scaleX *= fitScaleX;\n            scaleY *= fitScaleY;\n        }\n        shapeBounds = getOuterOf(nowWorld, fitMatrix);\n        bounds = getByMove(shapeBounds, -fitMatrix.e, -fitMatrix.f);\n        if (options.matrix) {\n            const { matrix } = options;\n            fitMatrix.multiply(matrix);\n            fitScaleX *= matrix.scaleX;\n            fitScaleY *= matrix.scaleY;\n        }\n        options = Object.assign(Object.assign({}, options), { matrix: fitMatrix.withScale(fitScaleX, fitScaleY) });\n    }\n    ui.__renderShape(canvas, options);\n    return {\n        canvas, matrix: fitMatrix, bounds,\n        worldCanvas, shapeBounds, scaleX, scaleY\n    };\n}\n\nlet recycleMap;\nfunction compute(attrName, ui) {\n    const data = ui.__, leafPaints = [];\n    let paints = data.__input[attrName], hasOpacityPixel;\n    if (!(paints instanceof Array))\n        paints = [paints];\n    recycleMap = PaintImage.recycleImage(attrName, data);\n    for (let i = 0, len = paints.length, item; i < len; i++) {\n        item = getLeafPaint(attrName, paints[i], ui);\n        if (item)\n            leafPaints.push(item);\n    }\n    data['_' + attrName] = leafPaints.length ? leafPaints : undefined;\n    if (leafPaints.length && leafPaints[0].image)\n        hasOpacityPixel = leafPaints[0].image.hasOpacityPixel;\n    attrName === 'fill' ? data.__pixelFill = hasOpacityPixel : data.__pixelStroke = hasOpacityPixel;\n}\nfunction getLeafPaint(attrName, paint, ui) {\n    if (typeof paint !== 'object' || paint.visible === false || paint.opacity === 0)\n        return undefined;\n    const { boxBounds } = ui.__layout;\n    switch (paint.type) {\n        case 'solid':\n            let { type, blendMode, color, opacity } = paint;\n            return { type, blendMode, style: ColorConvert.string(color, opacity) };\n        case 'image':\n            return PaintImage.image(ui, attrName, paint, boxBounds, !recycleMap || !recycleMap[paint.url]);\n        case 'linear':\n            return PaintGradient.linearGradient(paint, boxBounds);\n        case 'radial':\n            return PaintGradient.radialGradient(paint, boxBounds);\n        case 'angular':\n            return PaintGradient.conicGradient(paint, boxBounds);\n        default:\n            return paint.r !== undefined ? { type: 'solid', style: ColorConvert.string(paint) } : undefined;\n    }\n}\n\nconst PaintModule = {\n    compute,\n    fill,\n    fills,\n    fillText,\n    stroke,\n    strokes,\n    strokeText,\n    drawTextStroke,\n    shape\n};\n\nlet origin = {};\nconst { get: get$3, rotateOfOuter: rotateOfOuter$1, translate: translate$1, scaleOfOuter: scaleOfOuter$1, scale: scaleHelper, rotate } = MatrixHelper;\nfunction fillOrFitMode(data, box, x, y, scaleX, scaleY, rotation) {\n    const transform = get$3();\n    translate$1(transform, box.x + x, box.y + y);\n    scaleHelper(transform, scaleX, scaleY);\n    if (rotation)\n        rotateOfOuter$1(transform, { x: box.x + box.width / 2, y: box.y + box.height / 2 }, rotation);\n    data.transform = transform;\n}\nfunction clipMode(data, box, x, y, scaleX, scaleY, rotation) {\n    const transform = get$3();\n    translate$1(transform, box.x + x, box.y + y);\n    if (scaleX)\n        scaleHelper(transform, scaleX, scaleY);\n    if (rotation)\n        rotate(transform, rotation);\n    data.transform = transform;\n}\nfunction repeatMode(data, box, width, height, x, y, scaleX, scaleY, rotation, align) {\n    const transform = get$3();\n    if (rotation) {\n        if (align === 'center') {\n            rotateOfOuter$1(transform, { x: width / 2, y: height / 2 }, rotation);\n        }\n        else {\n            rotate(transform, rotation);\n            switch (rotation) {\n                case 90:\n                    translate$1(transform, height, 0);\n                    break;\n                case 180:\n                    translate$1(transform, width, height);\n                    break;\n                case 270:\n                    translate$1(transform, 0, width);\n                    break;\n            }\n        }\n    }\n    origin.x = box.x + x;\n    origin.y = box.y + y;\n    translate$1(transform, origin.x, origin.y);\n    if (scaleX)\n        scaleOfOuter$1(transform, origin, scaleX, scaleY);\n    data.transform = transform;\n}\n\nconst { get: get$2, translate } = MatrixHelper;\nconst tempBox = new Bounds();\nconst tempPoint = {};\nconst tempScaleData = {};\nfunction createData(leafPaint, image, paint, box) {\n    const { blendMode, sync } = paint;\n    if (blendMode)\n        leafPaint.blendMode = blendMode;\n    if (sync)\n        leafPaint.sync = sync;\n    leafPaint.data = getPatternData(paint, box, image);\n}\nfunction getPatternData(paint, box, image) {\n    let { width, height } = image;\n    if (paint.padding)\n        box = tempBox.set(box).shrink(paint.padding);\n    if (paint.mode === 'strench')\n        paint.mode = 'stretch';\n    const { opacity, mode, align, offset, scale, size, rotation, repeat } = paint;\n    const sameBox = box.width === width && box.height === height;\n    const data = { mode };\n    const swapSize = align !== 'center' && (rotation || 0) % 180 === 90;\n    const swapWidth = swapSize ? height : width, swapHeight = swapSize ? width : height;\n    let x = 0, y = 0, scaleX, scaleY;\n    if (!mode || mode === 'cover' || mode === 'fit') {\n        if (!sameBox || rotation) {\n            const sw = box.width / swapWidth, sh = box.height / swapHeight;\n            scaleX = scaleY = mode === 'fit' ? Math.min(sw, sh) : Math.max(sw, sh);\n            x += (box.width - width * scaleX) / 2, y += (box.height - height * scaleY) / 2;\n        }\n    }\n    else if (scale || size) {\n        MathHelper.getScaleData(scale, size, image, tempScaleData);\n        scaleX = tempScaleData.scaleX;\n        scaleY = tempScaleData.scaleY;\n    }\n    if (align) {\n        const imageBounds = { x, y, width: swapWidth, height: swapHeight };\n        if (scaleX)\n            imageBounds.width *= scaleX, imageBounds.height *= scaleY;\n        AlignHelper.toPoint(align, imageBounds, box, tempPoint, true);\n        x += tempPoint.x, y += tempPoint.y;\n    }\n    if (offset)\n        x += offset.x, y += offset.y;\n    switch (mode) {\n        case 'stretch':\n            if (!sameBox)\n                width = box.width, height = box.height;\n            break;\n        case 'normal':\n        case 'clip':\n            if (x || y || scaleX || rotation)\n                clipMode(data, box, x, y, scaleX, scaleY, rotation);\n            break;\n        case 'repeat':\n            if (!sameBox || scaleX || rotation)\n                repeatMode(data, box, width, height, x, y, scaleX, scaleY, rotation, align);\n            if (!repeat)\n                data.repeat = 'repeat';\n            break;\n        case 'fit':\n        case 'cover':\n        default:\n            if (scaleX)\n                fillOrFitMode(data, box, x, y, scaleX, scaleY, rotation);\n    }\n    if (!data.transform) {\n        if (box.x || box.y) {\n            data.transform = get$2();\n            translate(data.transform, box.x, box.y);\n        }\n    }\n    if (scaleX && mode !== 'stretch') {\n        data.scaleX = scaleX;\n        data.scaleY = scaleY;\n    }\n    data.width = width;\n    data.height = height;\n    if (opacity)\n        data.opacity = opacity;\n    if (repeat)\n        data.repeat = typeof repeat === 'string' ? (repeat === 'x' ? 'repeat-x' : 'repeat-y') : 'repeat';\n    return data;\n}\n\nlet cache, box = new Bounds();\nconst { isSame } = BoundsHelper;\nfunction image(ui, attrName, paint, boxBounds, firstUse) {\n    let leafPaint, event;\n    const image = ImageManager.get(paint);\n    if (cache && paint === cache.paint && isSame(boxBounds, cache.boxBounds)) {\n        leafPaint = cache.leafPaint;\n    }\n    else {\n        leafPaint = { type: paint.type, image };\n        cache = image.use > 1 ? { leafPaint, paint, boxBounds: box.set(boxBounds) } : null;\n    }\n    if (firstUse || image.loading)\n        event = { image, attrName, attrValue: paint };\n    if (image.ready) {\n        checkSizeAndCreateData(ui, attrName, paint, image, leafPaint, boxBounds);\n        if (firstUse) {\n            onLoad(ui, event);\n            onLoadSuccess(ui, event);\n        }\n    }\n    else if (image.error) {\n        if (firstUse)\n            onLoadError(ui, event, image.error);\n    }\n    else {\n        if (firstUse) {\n            ignoreRender(ui, true);\n            onLoad(ui, event);\n        }\n        leafPaint.loadId = image.load(() => {\n            ignoreRender(ui, false);\n            if (!ui.destroyed) {\n                if (checkSizeAndCreateData(ui, attrName, paint, image, leafPaint, boxBounds)) {\n                    if (image.hasOpacityPixel)\n                        ui.__layout.hitCanvasChanged = true;\n                    ui.forceUpdate('surface');\n                }\n                onLoadSuccess(ui, event);\n            }\n            leafPaint.loadId = null;\n        }, (error) => {\n            ignoreRender(ui, false);\n            onLoadError(ui, event, error);\n            leafPaint.loadId = null;\n        });\n    }\n    return leafPaint;\n}\nfunction checkSizeAndCreateData(ui, attrName, paint, image, leafPaint, boxBounds) {\n    if (attrName === 'fill' && !ui.__.__naturalWidth) {\n        const data = ui.__;\n        data.__naturalWidth = image.width / data.pixelRatio;\n        data.__naturalHeight = image.height / data.pixelRatio;\n        if (data.__autoSide) {\n            ui.forceUpdate('width');\n            if (ui.__proxyData) {\n                ui.setProxyAttr('width', data.width);\n                ui.setProxyAttr('height', data.height);\n            }\n            return false;\n        }\n    }\n    if (!leafPaint.data)\n        createData(leafPaint, image, paint, boxBounds);\n    return true;\n}\nfunction onLoad(ui, event) {\n    emit(ui, ImageEvent.LOAD, event);\n}\nfunction onLoadSuccess(ui, event) {\n    emit(ui, ImageEvent.LOADED, event);\n}\nfunction onLoadError(ui, event, error) {\n    event.error = error;\n    ui.forceUpdate('surface');\n    emit(ui, ImageEvent.ERROR, event);\n}\nfunction emit(ui, type, data) {\n    if (ui.hasEvent(type))\n        ui.emitEvent(new ImageEvent(type, data));\n}\nfunction ignoreRender(ui, value) {\n    const { leafer } = ui;\n    if (leafer && leafer.viewReady)\n        leafer.renderer.ignore = value;\n}\n\nconst { get: get$1, scale, copy: copy$1 } = MatrixHelper;\nconst { ceil, abs: abs$1 } = Math;\nfunction createPattern(ui, paint, pixelRatio) {\n    let { scaleX, scaleY } = ImageManager.patternLocked ? ui.__world : ui.__nowWorld;\n    const id = scaleX + '-' + scaleY + '-' + pixelRatio;\n    if (paint.patternId !== id && !ui.destroyed) {\n        scaleX = abs$1(scaleX);\n        scaleY = abs$1(scaleY);\n        const { image, data } = paint;\n        let imageScale, imageMatrix, { width, height, scaleX: sx, scaleY: sy, opacity, transform, repeat } = data;\n        if (sx) {\n            imageMatrix = get$1();\n            copy$1(imageMatrix, transform);\n            scale(imageMatrix, 1 / sx, 1 / sy);\n            scaleX *= sx;\n            scaleY *= sy;\n        }\n        scaleX *= pixelRatio;\n        scaleY *= pixelRatio;\n        width *= scaleX;\n        height *= scaleY;\n        const size = width * height;\n        if (!repeat) {\n            if (size > Platform.image.maxCacheSize)\n                return false;\n        }\n        let maxSize = Platform.image.maxPatternSize;\n        if (!image.isSVG) {\n            const imageSize = image.width * image.height;\n            if (maxSize > imageSize)\n                maxSize = imageSize;\n        }\n        if (size > maxSize)\n            imageScale = Math.sqrt(size / maxSize);\n        if (imageScale) {\n            scaleX /= imageScale;\n            scaleY /= imageScale;\n            width /= imageScale;\n            height /= imageScale;\n        }\n        if (sx) {\n            scaleX /= sx;\n            scaleY /= sy;\n        }\n        if (transform || scaleX !== 1 || scaleY !== 1) {\n            if (!imageMatrix) {\n                imageMatrix = get$1();\n                if (transform)\n                    copy$1(imageMatrix, transform);\n            }\n            scale(imageMatrix, 1 / scaleX, 1 / scaleY);\n        }\n        const canvas = image.getCanvas(ceil(width) || 1, ceil(height) || 1, opacity);\n        const pattern = image.getPattern(canvas, repeat || (Platform.origin.noRepeat || 'no-repeat'), imageMatrix, paint);\n        paint.style = pattern;\n        paint.patternId = id;\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nconst { abs } = Math;\nfunction checkImage(ui, canvas, paint, allowPaint) {\n    const { scaleX, scaleY } = ImageManager.patternLocked ? ui.__world : ui.__nowWorld;\n    const { pixelRatio } = canvas;\n    if (!paint.data || (paint.patternId === scaleX + '-' + scaleY + '-' + pixelRatio && !Export.running)) {\n        return false;\n    }\n    else {\n        const { data } = paint;\n        if (allowPaint) {\n            if (!data.repeat) {\n                let { width, height } = data;\n                width *= abs(scaleX) * pixelRatio;\n                height *= abs(scaleY) * pixelRatio;\n                if (data.scaleX) {\n                    width *= data.scaleX;\n                    height *= data.scaleY;\n                }\n                allowPaint = (width * height > Platform.image.maxCacheSize) || Export.running;\n            }\n            else {\n                allowPaint = false;\n            }\n        }\n        if (allowPaint) {\n            canvas.save();\n            ui.windingRule ? canvas.clip(ui.windingRule) : canvas.clip();\n            if (paint.blendMode)\n                canvas.blendMode = paint.blendMode;\n            if (data.opacity)\n                canvas.opacity *= data.opacity;\n            if (data.transform)\n                canvas.transform(data.transform);\n            canvas.drawImage(paint.image.view, 0, 0, data.width, data.height);\n            canvas.restore();\n            return true;\n        }\n        else {\n            if (!paint.style || paint.sync || Export.running) {\n                createPattern(ui, paint, pixelRatio);\n            }\n            else {\n                if (!paint.patternTask) {\n                    paint.patternTask = ImageManager.patternTasker.add(() => __awaiter(this, void 0, void 0, function* () {\n                        paint.patternTask = null;\n                        if (canvas.bounds.hit(ui.__nowWorld))\n                            createPattern(ui, paint, pixelRatio);\n                        ui.forceUpdate('surface');\n                    }), 300);\n                }\n            }\n            return false;\n        }\n    }\n}\n\nfunction recycleImage(attrName, data) {\n    const paints = data['_' + attrName];\n    if (paints instanceof Array) {\n        let image, recycleMap, input, url;\n        for (let i = 0, len = paints.length; i < len; i++) {\n            image = paints[i].image;\n            url = image && image.url;\n            if (url) {\n                if (!recycleMap)\n                    recycleMap = {};\n                recycleMap[url] = true;\n                ImageManager.recycle(image);\n                if (image.loading) {\n                    if (!input) {\n                        input = (data.__input && data.__input[attrName]) || [];\n                        if (!(input instanceof Array))\n                            input = [input];\n                    }\n                    image.unload(paints[i].loadId, !input.some((item) => item.url === url));\n                }\n            }\n        }\n        return recycleMap;\n    }\n    return null;\n}\n\nconst PaintImageModule = {\n    image,\n    checkImage,\n    createPattern,\n    recycleImage,\n    createData,\n    getPatternData,\n    fillOrFitMode,\n    clipMode,\n    repeatMode\n};\n\nconst { toPoint: toPoint$2 } = AroundHelper;\nconst realFrom$2 = {};\nconst realTo$2 = {};\nfunction linearGradient(paint, box) {\n    let { from, to, type, blendMode, opacity } = paint;\n    toPoint$2(from || 'top', box, realFrom$2);\n    toPoint$2(to || 'bottom', box, realTo$2);\n    const style = Platform.canvas.createLinearGradient(realFrom$2.x, realFrom$2.y, realTo$2.x, realTo$2.y);\n    applyStops(style, paint.stops, opacity);\n    const data = { type, style };\n    if (blendMode)\n        data.blendMode = blendMode;\n    return data;\n}\nfunction applyStops(gradient, stops, opacity) {\n    if (stops) {\n        let stop;\n        for (let i = 0, len = stops.length; i < len; i++) {\n            stop = stops[i];\n            if (typeof stop === 'string') {\n                gradient.addColorStop(i / (len - 1), ColorConvert.string(stop, opacity));\n            }\n            else {\n                gradient.addColorStop(stop.offset, ColorConvert.string(stop.color, opacity));\n            }\n        }\n    }\n}\n\nconst { getAngle, getDistance: getDistance$1 } = PointHelper;\nconst { get, rotateOfOuter, scaleOfOuter } = MatrixHelper;\nconst { toPoint: toPoint$1 } = AroundHelper;\nconst realFrom$1 = {};\nconst realTo$1 = {};\nfunction radialGradient(paint, box) {\n    let { from, to, type, opacity, blendMode, stretch } = paint;\n    toPoint$1(from || 'center', box, realFrom$1);\n    toPoint$1(to || 'bottom', box, realTo$1);\n    const style = Platform.canvas.createRadialGradient(realFrom$1.x, realFrom$1.y, 0, realFrom$1.x, realFrom$1.y, getDistance$1(realFrom$1, realTo$1));\n    applyStops(style, paint.stops, opacity);\n    const data = { type, style };\n    const transform = getTransform(box, realFrom$1, realTo$1, stretch, true);\n    if (transform)\n        data.transform = transform;\n    if (blendMode)\n        data.blendMode = blendMode;\n    return data;\n}\nfunction getTransform(box, from, to, stretch, rotate90) {\n    let transform;\n    const { width, height } = box;\n    if (width !== height || stretch) {\n        const angle = getAngle(from, to);\n        transform = get();\n        if (rotate90) {\n            scaleOfOuter(transform, from, width / height * (stretch || 1), 1);\n            rotateOfOuter(transform, from, angle + 90);\n        }\n        else {\n            scaleOfOuter(transform, from, 1, width / height * (stretch || 1));\n            rotateOfOuter(transform, from, angle);\n        }\n    }\n    return transform;\n}\n\nconst { getDistance } = PointHelper;\nconst { toPoint } = AroundHelper;\nconst realFrom = {};\nconst realTo = {};\nfunction conicGradient(paint, box) {\n    let { from, to, type, opacity, blendMode, stretch } = paint;\n    toPoint(from || 'center', box, realFrom);\n    toPoint(to || 'bottom', box, realTo);\n    const style = Platform.conicGradientSupport ? Platform.canvas.createConicGradient(0, realFrom.x, realFrom.y) : Platform.canvas.createRadialGradient(realFrom.x, realFrom.y, 0, realFrom.x, realFrom.y, getDistance(realFrom, realTo));\n    applyStops(style, paint.stops, opacity);\n    const data = { type, style };\n    const transform = getTransform(box, realFrom, realTo, stretch || 1, Platform.conicGradientRotate90);\n    if (transform)\n        data.transform = transform;\n    if (blendMode)\n        data.blendMode = blendMode;\n    return data;\n}\n\nconst PaintGradientModule = {\n    linearGradient,\n    radialGradient,\n    conicGradient,\n    getTransform\n};\n\nconst { copy, toOffsetOutBounds: toOffsetOutBounds$1 } = BoundsHelper;\nconst tempBounds = {};\nconst offsetOutBounds$1 = {};\nfunction shadow(ui, current, shape) {\n    let copyBounds, spreadScale;\n    const { __nowWorld: nowWorld, __layout } = ui;\n    const { shadow } = ui.__;\n    const { worldCanvas, bounds, shapeBounds, scaleX, scaleY } = shape;\n    const other = current.getSameCanvas();\n    const end = shadow.length - 1;\n    toOffsetOutBounds$1(bounds, offsetOutBounds$1);\n    shadow.forEach((item, index) => {\n        other.setWorldShadow((offsetOutBounds$1.offsetX + item.x * scaleX), (offsetOutBounds$1.offsetY + item.y * scaleY), item.blur * scaleX, item.color);\n        spreadScale = item.spread ? 1 + item.spread * 2 / (__layout.boxBounds.width + (__layout.strokeBoxSpread || 0) * 2) : 0;\n        drawWorldShadow(other, offsetOutBounds$1, spreadScale, shape);\n        copyBounds = bounds;\n        if (item.box) {\n            other.restore();\n            other.save();\n            if (worldCanvas) {\n                other.copyWorld(other, bounds, nowWorld, 'copy');\n                copyBounds = nowWorld;\n            }\n            worldCanvas ? other.copyWorld(worldCanvas, nowWorld, nowWorld, 'destination-out') : other.copyWorld(shape.canvas, shapeBounds, bounds, 'destination-out');\n        }\n        if (ui.__worldFlipped) {\n            current.copyWorldByReset(other, copyBounds, nowWorld, item.blendMode);\n        }\n        else {\n            current.copyWorldToInner(other, copyBounds, __layout.renderBounds, item.blendMode);\n        }\n        if (end && index < end)\n            other.clearWorld(copyBounds, true);\n    });\n    other.recycle(copyBounds);\n}\nfunction drawWorldShadow(canvas, outBounds, spreadScale, shape) {\n    const { bounds, shapeBounds } = shape;\n    if (Platform.fullImageShadow) {\n        copy(tempBounds, canvas.bounds);\n        tempBounds.x += (outBounds.x - shapeBounds.x);\n        tempBounds.y += (outBounds.y - shapeBounds.y);\n        if (spreadScale) {\n            const { matrix } = shape;\n            tempBounds.x -= (bounds.x + (matrix ? matrix.e : 0) + bounds.width / 2) * (spreadScale - 1);\n            tempBounds.y -= (bounds.y + (matrix ? matrix.f : 0) + bounds.height / 2) * (spreadScale - 1);\n            tempBounds.width *= spreadScale;\n            tempBounds.height *= spreadScale;\n        }\n        canvas.copyWorld(shape.canvas, canvas.bounds, tempBounds);\n    }\n    else {\n        if (spreadScale) {\n            copy(tempBounds, outBounds);\n            tempBounds.x -= (outBounds.width / 2) * (spreadScale - 1);\n            tempBounds.y -= (outBounds.height / 2) * (spreadScale - 1);\n            tempBounds.width *= spreadScale;\n            tempBounds.height *= spreadScale;\n        }\n        canvas.copyWorld(shape.canvas, shapeBounds, spreadScale ? tempBounds : outBounds);\n    }\n}\n\nconst { toOffsetOutBounds } = BoundsHelper;\nconst offsetOutBounds = {};\nfunction innerShadow(ui, current, shape) {\n    let copyBounds, spreadScale;\n    const { __nowWorld: nowWorld, __layout: __layout } = ui;\n    const { innerShadow } = ui.__;\n    const { worldCanvas, bounds, shapeBounds, scaleX, scaleY } = shape;\n    const other = current.getSameCanvas();\n    const end = innerShadow.length - 1;\n    toOffsetOutBounds(bounds, offsetOutBounds);\n    innerShadow.forEach((item, index) => {\n        other.save();\n        other.setWorldShadow((offsetOutBounds.offsetX + item.x * scaleX), (offsetOutBounds.offsetY + item.y * scaleY), item.blur * scaleX);\n        spreadScale = item.spread ? 1 - item.spread * 2 / (__layout.boxBounds.width + (__layout.strokeBoxSpread || 0) * 2) : 0;\n        drawWorldShadow(other, offsetOutBounds, spreadScale, shape);\n        other.restore();\n        if (worldCanvas) {\n            other.copyWorld(other, bounds, nowWorld, 'copy');\n            other.copyWorld(worldCanvas, nowWorld, nowWorld, 'source-out');\n            copyBounds = nowWorld;\n        }\n        else {\n            other.copyWorld(shape.canvas, shapeBounds, bounds, 'source-out');\n            copyBounds = bounds;\n        }\n        other.fillWorld(copyBounds, item.color, 'source-in');\n        if (ui.__worldFlipped) {\n            current.copyWorldByReset(other, copyBounds, nowWorld, item.blendMode);\n        }\n        else {\n            current.copyWorldToInner(other, copyBounds, __layout.renderBounds, item.blendMode);\n        }\n        if (end && index < end)\n            other.clearWorld(copyBounds, true);\n    });\n    other.recycle(copyBounds);\n}\n\nfunction blur(ui, current, origin) {\n    const { blur } = ui.__;\n    origin.setWorldBlur(blur * ui.__nowWorld.a);\n    origin.copyWorldToInner(current, ui.__nowWorld, ui.__layout.renderBounds);\n    origin.filter = 'none';\n}\n\nfunction backgroundBlur(_ui, _current, _shape) {\n}\n\nconst EffectModule = {\n    shadow,\n    innerShadow,\n    blur,\n    backgroundBlur\n};\n\nconst { excludeRenderBounds } = LeafBoundsHelper;\nGroup.prototype.__renderMask = function (canvas, options) {\n    let child, maskCanvas, contentCanvas, maskOpacity, currentMask, mask;\n    const { children } = this;\n    for (let i = 0, len = children.length; i < len; i++) {\n        child = children[i], mask = child.__.mask;\n        if (mask) {\n            if (currentMask) {\n                maskEnd(this, currentMask, canvas, contentCanvas, maskCanvas, maskOpacity);\n                maskCanvas = contentCanvas = null;\n            }\n            if (mask === 'path' || mask === 'clipping-path') {\n                if (child.opacity < 1) {\n                    currentMask = 'opacity-path';\n                    maskOpacity = child.opacity;\n                    if (!contentCanvas)\n                        contentCanvas = getCanvas(canvas);\n                }\n                else {\n                    currentMask = 'path';\n                    canvas.save();\n                }\n                child.__clip(contentCanvas || canvas, options);\n            }\n            else {\n                currentMask = mask === 'grayscale' ? 'grayscale' : 'alpha';\n                if (!maskCanvas)\n                    maskCanvas = getCanvas(canvas);\n                if (!contentCanvas)\n                    contentCanvas = getCanvas(canvas);\n                child.__render(maskCanvas, options);\n            }\n            if (!(mask === 'clipping' || mask === 'clipping-path'))\n                continue;\n        }\n        if (excludeRenderBounds(child, options))\n            continue;\n        child.__render(contentCanvas || canvas, options);\n    }\n    maskEnd(this, currentMask, canvas, contentCanvas, maskCanvas, maskOpacity);\n};\nfunction maskEnd(leaf, maskMode, canvas, contentCanvas, maskCanvas, maskOpacity) {\n    switch (maskMode) {\n        case 'grayscale':\n            maskCanvas.useGrayscaleAlpha(leaf.__nowWorld);\n        case 'alpha':\n            usePixelMask(leaf, canvas, contentCanvas, maskCanvas);\n            break;\n        case 'opacity-path':\n            copyContent(leaf, canvas, contentCanvas, maskOpacity);\n            break;\n        case 'path':\n            canvas.restore();\n    }\n}\nfunction getCanvas(canvas) {\n    return canvas.getSameCanvas(false, true);\n}\nfunction usePixelMask(leaf, canvas, content, mask) {\n    const realBounds = leaf.__nowWorld;\n    content.resetTransform();\n    content.opacity = 1;\n    content.useMask(mask, realBounds);\n    mask.recycle(realBounds);\n    copyContent(leaf, canvas, content, 1);\n}\nfunction copyContent(leaf, canvas, content, maskOpacity) {\n    const realBounds = leaf.__nowWorld;\n    canvas.resetTransform();\n    canvas.opacity = maskOpacity;\n    canvas.copyWorld(content, realBounds);\n    content.recycle(realBounds);\n}\n\nconst money = '¥￥＄€£￡¢￠';\nconst letter = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz';\nconst langBefore = '《（「〈『〖【〔｛┌＜‘“＝' + money;\nconst langAfter = '》）」〉』〗】〕｝┐＞’”！？，、。：；‰';\nconst langSymbol = '≮≯≈≠＝…';\nconst langBreak$1 = '—／～｜┆·';\nconst beforeChar = '{[(<\\'\"' + langBefore;\nconst afterChar = '>)]}%!?,.:;\\'\"' + langAfter;\nconst symbolChar = afterChar + '_#~&*+\\\\=|' + langSymbol;\nconst breakChar = '- ' + langBreak$1;\nconst cjkRangeList = [\n    [0x4E00, 0x9FFF],\n    [0x3400, 0x4DBF],\n    [0x20000, 0x2A6DF],\n    [0x2A700, 0x2B73F],\n    [0x2B740, 0x2B81F],\n    [0x2B820, 0x2CEAF],\n    [0x2CEB0, 0x2EBEF],\n    [0x30000, 0x3134F],\n    [0x31350, 0x323AF],\n    [0x2E80, 0x2EFF],\n    [0x2F00, 0x2FDF],\n    [0x2FF0, 0x2FFF],\n    [0x3000, 0x303F],\n    [0x31C0, 0x31EF],\n    [0x3200, 0x32FF],\n    [0x3300, 0x33FF],\n    [0xF900, 0xFAFF],\n    [0xFE30, 0xFE4F],\n    [0x1F200, 0x1F2FF],\n    [0x2F800, 0x2FA1F],\n];\nconst cjkReg = new RegExp(cjkRangeList.map(([start, end]) => `[\\\\u${start.toString(16)}-\\\\u${end.toString(16)}]`).join('|'));\nfunction mapChar(str) {\n    const map = {};\n    str.split('').forEach(char => map[char] = true);\n    return map;\n}\nconst letterMap = mapChar(letter);\nconst beforeMap = mapChar(beforeChar);\nconst afterMap = mapChar(afterChar);\nconst symbolMap = mapChar(symbolChar);\nconst breakMap = mapChar(breakChar);\nvar CharType;\n(function (CharType) {\n    CharType[CharType[\"Letter\"] = 0] = \"Letter\";\n    CharType[CharType[\"Single\"] = 1] = \"Single\";\n    CharType[CharType[\"Before\"] = 2] = \"Before\";\n    CharType[CharType[\"After\"] = 3] = \"After\";\n    CharType[CharType[\"Symbol\"] = 4] = \"Symbol\";\n    CharType[CharType[\"Break\"] = 5] = \"Break\";\n})(CharType || (CharType = {}));\nconst { Letter: Letter$1, Single: Single$1, Before: Before$1, After: After$1, Symbol: Symbol$1, Break: Break$1 } = CharType;\nfunction getCharType(char) {\n    if (letterMap[char]) {\n        return Letter$1;\n    }\n    else if (breakMap[char]) {\n        return Break$1;\n    }\n    else if (beforeMap[char]) {\n        return Before$1;\n    }\n    else if (afterMap[char]) {\n        return After$1;\n    }\n    else if (symbolMap[char]) {\n        return Symbol$1;\n    }\n    else if (cjkReg.test(char)) {\n        return Single$1;\n    }\n    else {\n        return Letter$1;\n    }\n}\n\nconst TextRowHelper = {\n    trimRight(row) {\n        const { words } = row;\n        let trimRight = 0, len = words.length, char;\n        for (let i = len - 1; i > -1; i--) {\n            char = words[i].data[0];\n            if (char.char === ' ') {\n                trimRight++;\n                row.width -= char.width;\n            }\n            else {\n                break;\n            }\n        }\n        if (trimRight)\n            words.splice(len - trimRight, trimRight);\n    }\n};\n\nfunction getTextCase(char, textCase, firstChar) {\n    switch (textCase) {\n        case 'title':\n            return firstChar ? char.toUpperCase() : char;\n        case 'upper':\n            return char.toUpperCase();\n        case 'lower':\n            return char.toLowerCase();\n        default:\n            return char;\n    }\n}\n\nconst { trimRight } = TextRowHelper;\nconst { Letter, Single, Before, After, Symbol, Break } = CharType;\nlet word, row, wordWidth, rowWidth, realWidth;\nlet char, charWidth, startCharSize, charSize, charType, lastCharType, langBreak, afterBreak, paraStart;\nlet textDrawData, rows = [], bounds, findMaxWidth;\nfunction createRows(drawData, content, style) {\n    textDrawData = drawData;\n    rows = drawData.rows;\n    bounds = drawData.bounds;\n    findMaxWidth = !bounds.width && !style.autoSizeAlign;\n    const { __letterSpacing, paraIndent, textCase } = style;\n    const { canvas } = Platform;\n    const { width, height } = bounds;\n    const charMode = width || height || __letterSpacing || (textCase !== 'none');\n    if (charMode) {\n        const wrap = style.textWrap !== 'none';\n        const breakAll = style.textWrap === 'break';\n        paraStart = true;\n        lastCharType = null;\n        startCharSize = charWidth = charSize = wordWidth = rowWidth = 0;\n        word = { data: [] }, row = { words: [] };\n        for (let i = 0, len = content.length; i < len; i++) {\n            char = content[i];\n            if (char === '\\n') {\n                if (wordWidth)\n                    addWord();\n                row.paraEnd = true;\n                addRow();\n                paraStart = true;\n            }\n            else {\n                charType = getCharType(char);\n                if (charType === Letter && textCase !== 'none')\n                    char = getTextCase(char, textCase, !wordWidth);\n                charWidth = canvas.measureText(char).width;\n                if (__letterSpacing) {\n                    if (__letterSpacing < 0)\n                        charSize = charWidth;\n                    charWidth += __letterSpacing;\n                }\n                langBreak = (charType === Single && (lastCharType === Single || lastCharType === Letter)) || (lastCharType === Single && charType !== After);\n                afterBreak = ((charType === Before || charType === Single) && (lastCharType === Symbol || lastCharType === After));\n                realWidth = paraStart && paraIndent ? width - paraIndent : width;\n                if (wrap && (width && rowWidth + wordWidth + charWidth > realWidth)) {\n                    if (breakAll) {\n                        if (wordWidth)\n                            addWord();\n                        if (rowWidth)\n                            addRow();\n                    }\n                    else {\n                        if (!afterBreak)\n                            afterBreak = charType === Letter && lastCharType == After;\n                        if (langBreak || afterBreak || charType === Break || charType === Before || charType === Single || (wordWidth + charWidth > realWidth)) {\n                            if (wordWidth)\n                                addWord();\n                            if (rowWidth)\n                                addRow();\n                        }\n                        else {\n                            if (rowWidth)\n                                addRow();\n                        }\n                    }\n                }\n                if (char === ' ' && paraStart !== true && (rowWidth + wordWidth) === 0) ;\n                else {\n                    if (charType === Break) {\n                        if (char === ' ' && wordWidth)\n                            addWord();\n                        addChar(char, charWidth);\n                        addWord();\n                    }\n                    else if (langBreak || afterBreak) {\n                        if (wordWidth)\n                            addWord();\n                        addChar(char, charWidth);\n                    }\n                    else {\n                        addChar(char, charWidth);\n                    }\n                }\n                lastCharType = charType;\n            }\n        }\n        if (wordWidth)\n            addWord();\n        if (rowWidth)\n            addRow();\n        rows.length > 0 && (rows[rows.length - 1].paraEnd = true);\n    }\n    else {\n        content.split('\\n').forEach(content => {\n            textDrawData.paraNumber++;\n            rowWidth = canvas.measureText(content).width;\n            rows.push({ x: paraIndent || 0, text: content, width: rowWidth, paraStart: true });\n            if (findMaxWidth)\n                setMaxWidth();\n        });\n    }\n}\nfunction addChar(char, width) {\n    if (charSize && !startCharSize)\n        startCharSize = charSize;\n    word.data.push({ char, width });\n    wordWidth += width;\n}\nfunction addWord() {\n    rowWidth += wordWidth;\n    word.width = wordWidth;\n    row.words.push(word);\n    word = { data: [] };\n    wordWidth = 0;\n}\nfunction addRow() {\n    if (paraStart) {\n        textDrawData.paraNumber++;\n        row.paraStart = true;\n        paraStart = false;\n    }\n    if (charSize) {\n        row.startCharSize = startCharSize;\n        row.endCharSize = charSize;\n        startCharSize = 0;\n    }\n    row.width = rowWidth;\n    if (bounds.width)\n        trimRight(row);\n    else if (findMaxWidth)\n        setMaxWidth();\n    rows.push(row);\n    row = { words: [] };\n    rowWidth = 0;\n}\nfunction setMaxWidth() {\n    if (rowWidth > (textDrawData.maxWidth || 0))\n        textDrawData.maxWidth = rowWidth;\n}\n\nconst CharMode = 0;\nconst WordMode = 1;\nconst TextMode = 2;\nfunction layoutChar(drawData, style, width, _height) {\n    const { rows } = drawData;\n    const { textAlign, paraIndent, letterSpacing } = style;\n    let charX, addWordWidth, indentWidth, mode, wordChar;\n    rows.forEach(row => {\n        if (row.words) {\n            indentWidth = paraIndent && row.paraStart ? paraIndent : 0;\n            addWordWidth = (width && textAlign === 'justify' && row.words.length > 1) ? (width - row.width - indentWidth) / (row.words.length - 1) : 0;\n            mode = (letterSpacing || row.isOverflow) ? CharMode : (addWordWidth > 0.01 ? WordMode : TextMode);\n            if (row.isOverflow && !letterSpacing)\n                row.textMode = true;\n            if (mode === TextMode) {\n                row.x += indentWidth;\n                toTextChar$1(row);\n            }\n            else {\n                row.x += indentWidth;\n                charX = row.x;\n                row.data = [];\n                row.words.forEach(word => {\n                    if (mode === WordMode) {\n                        wordChar = { char: '', x: charX };\n                        charX = toWordChar(word.data, charX, wordChar);\n                        if (row.isOverflow || wordChar.char !== ' ')\n                            row.data.push(wordChar);\n                    }\n                    else {\n                        charX = toChar(word.data, charX, row.data, row.isOverflow);\n                    }\n                    if (!row.paraEnd && addWordWidth) {\n                        charX += addWordWidth;\n                        row.width += addWordWidth;\n                    }\n                });\n            }\n            row.words = null;\n        }\n    });\n}\nfunction toTextChar$1(row) {\n    row.text = '';\n    row.words.forEach(word => {\n        word.data.forEach(char => {\n            row.text += char.char;\n        });\n    });\n}\nfunction toWordChar(data, charX, wordChar) {\n    data.forEach(char => {\n        wordChar.char += char.char;\n        charX += char.width;\n    });\n    return charX;\n}\nfunction toChar(data, charX, rowData, isOverflow) {\n    data.forEach(char => {\n        if (isOverflow || char.char !== ' ') {\n            char.x = charX;\n            rowData.push(char);\n        }\n        charX += char.width;\n    });\n    return charX;\n}\n\nfunction layoutText(drawData, style) {\n    const { rows, bounds } = drawData;\n    const { __lineHeight, __baseLine, __letterSpacing, __clipText, textAlign, verticalAlign, paraSpacing, autoSizeAlign } = style;\n    let { x, y, width, height } = bounds, realHeight = __lineHeight * rows.length + (paraSpacing ? paraSpacing * (drawData.paraNumber - 1) : 0);\n    let starY = __baseLine;\n    if (__clipText && realHeight > height) {\n        realHeight = Math.max(height, __lineHeight);\n        drawData.overflow = rows.length;\n    }\n    else if (height || autoSizeAlign) {\n        switch (verticalAlign) {\n            case 'middle':\n                y += (height - realHeight) / 2;\n                break;\n            case 'bottom': y += (height - realHeight);\n        }\n    }\n    starY += y;\n    let row, rowX, rowWidth, layoutWidth = (width || autoSizeAlign) ? width : drawData.maxWidth;\n    for (let i = 0, len = rows.length; i < len; i++) {\n        row = rows[i];\n        row.x = x;\n        if (row.width < width || (row.width > width && !__clipText)) {\n            switch (textAlign) {\n                case 'center':\n                    row.x += (layoutWidth - row.width) / 2;\n                    break;\n                case 'right': row.x += layoutWidth - row.width;\n            }\n        }\n        if (row.paraStart && paraSpacing && i > 0)\n            starY += paraSpacing;\n        row.y = starY;\n        starY += __lineHeight;\n        if (drawData.overflow > i && starY > realHeight) {\n            row.isOverflow = true;\n            drawData.overflow = i + 1;\n        }\n        rowX = row.x;\n        rowWidth = row.width;\n        if (__letterSpacing < 0) {\n            if (row.width < 0) {\n                rowWidth = -row.width + style.fontSize + __letterSpacing;\n                rowX -= rowWidth;\n                rowWidth += style.fontSize;\n            }\n            else {\n                rowWidth -= __letterSpacing;\n            }\n        }\n        if (rowX < bounds.x)\n            bounds.x = rowX;\n        if (rowWidth > bounds.width)\n            bounds.width = rowWidth;\n        if (__clipText && width && width < rowWidth) {\n            row.isOverflow = true;\n            if (!drawData.overflow)\n                drawData.overflow = rows.length;\n        }\n    }\n    bounds.y = y;\n    bounds.height = realHeight;\n}\n\nfunction clipText(drawData, style, x, width) {\n    if (!width)\n        return;\n    const { rows, overflow } = drawData;\n    let { textOverflow } = style;\n    rows.splice(overflow);\n    if (textOverflow && textOverflow !== 'show') {\n        if (textOverflow === 'hide')\n            textOverflow = '';\n        else if (textOverflow === 'ellipsis')\n            textOverflow = '...';\n        let char, charRight;\n        const ellipsisWidth = textOverflow ? Platform.canvas.measureText(textOverflow).width : 0;\n        const right = x + width - ellipsisWidth;\n        const list = style.textWrap === 'none' ? rows : [rows[overflow - 1]];\n        list.forEach(row => {\n            if (row.isOverflow && row.data) {\n                let end = row.data.length - 1;\n                for (let i = end; i > -1; i--) {\n                    char = row.data[i];\n                    charRight = char.x + char.width;\n                    if (i === end && charRight < right) {\n                        break;\n                    }\n                    else if (charRight < right && char.char !== ' ') {\n                        row.data.splice(i + 1);\n                        row.width -= char.width;\n                        break;\n                    }\n                    row.width -= char.width;\n                }\n                row.width += ellipsisWidth;\n                row.data.push({ char: textOverflow, x: charRight });\n                if (row.textMode)\n                    toTextChar(row);\n            }\n        });\n    }\n}\nfunction toTextChar(row) {\n    row.text = '';\n    row.data.forEach(char => {\n        row.text += char.char;\n    });\n    row.data = null;\n}\n\nfunction decorationText(drawData, style) {\n    const { fontSize } = style;\n    drawData.decorationHeight = fontSize / 11;\n    switch (style.textDecoration) {\n        case 'under':\n            drawData.decorationY = fontSize * 0.15;\n            break;\n        case 'delete':\n            drawData.decorationY = -fontSize * 0.35;\n    }\n}\n\nconst { top, right, bottom, left } = Direction4;\nfunction getDrawData(content, style) {\n    if (typeof content !== 'string')\n        content = String(content);\n    let x = 0, y = 0;\n    let width = style.__getInput('width') || 0;\n    let height = style.__getInput('height') || 0;\n    const { textDecoration, __font, __padding: padding } = style;\n    if (padding) {\n        if (width)\n            x = padding[left], width -= (padding[right] + padding[left]);\n        else if (!style.autoSizeAlign)\n            x = padding[left];\n        if (height)\n            y = padding[top], height -= (padding[top] + padding[bottom]);\n        else if (!style.autoSizeAlign)\n            y = padding[top];\n    }\n    const drawData = {\n        bounds: { x, y, width, height },\n        rows: [],\n        paraNumber: 0,\n        font: Platform.canvas.font = __font\n    };\n    createRows(drawData, content, style);\n    if (padding)\n        padAutoText(padding, drawData, style, width, height);\n    layoutText(drawData, style);\n    layoutChar(drawData, style, width);\n    if (drawData.overflow)\n        clipText(drawData, style, x, width);\n    if (textDecoration !== 'none')\n        decorationText(drawData, style);\n    return drawData;\n}\nfunction padAutoText(padding, drawData, style, width, height) {\n    if (!width && style.autoSizeAlign) {\n        switch (style.textAlign) {\n            case 'left':\n                offsetText(drawData, 'x', padding[left]);\n                break;\n            case 'right': offsetText(drawData, 'x', -padding[right]);\n        }\n    }\n    if (!height && style.autoSizeAlign) {\n        switch (style.verticalAlign) {\n            case 'top':\n                offsetText(drawData, 'y', padding[top]);\n                break;\n            case 'bottom': offsetText(drawData, 'y', -padding[bottom]);\n        }\n    }\n}\nfunction offsetText(drawData, attrName, value) {\n    const { bounds, rows } = drawData;\n    bounds[attrName] += value;\n    for (let i = 0; i < rows.length; i++)\n        rows[i][attrName] += value;\n}\n\nconst TextConvertModule = {\n    getDrawData\n};\n\nfunction string(color, opacity) {\n    const doOpacity = typeof opacity === 'number' && opacity !== 1;\n    if (typeof color === 'string') {\n        if (doOpacity && ColorConvert.object)\n            color = ColorConvert.object(color);\n        else\n            return color;\n    }\n    let a = color.a === undefined ? 1 : color.a;\n    if (doOpacity)\n        a *= opacity;\n    const rgb = color.r + ',' + color.g + ',' + color.b;\n    return a === 1 ? 'rgb(' + rgb + ')' : 'rgba(' + rgb + ',' + a + ')';\n}\n\nconst ColorConvertModule = {\n    string\n};\n\nconst { setPoint, addPoint, toBounds } = TwoPointBoundsHelper;\nfunction getTrimBounds(canvas) {\n    const { width, height } = canvas.view;\n    const { data } = canvas.context.getImageData(0, 0, width, height);\n    let x, y, pointBounds, index = 0;\n    for (let i = 0; i < data.length; i += 4) {\n        if (data[i + 3] !== 0) {\n            x = index % width;\n            y = (index - x) / width;\n            pointBounds ? addPoint(pointBounds, x, y) : setPoint(pointBounds = {}, x, y);\n        }\n        index++;\n    }\n    const bounds = new Bounds();\n    toBounds(pointBounds, bounds);\n    return bounds.scale(1 / canvas.pixelRatio).ceil();\n}\n\nconst ExportModule = {\n    export(leaf, filename, options) {\n        this.running = true;\n        const fileType = FileHelper.fileType(filename);\n        const isDownload = filename.includes('.');\n        options = FileHelper.getExportOptions(options);\n        return addTask((success) => new Promise((resolve) => {\n            const over = (result) => {\n                success(result);\n                resolve();\n                this.running = false;\n            };\n            const { toURL } = Platform;\n            const { download } = Platform.origin;\n            if (fileType === 'json') {\n                isDownload && download(toURL(JSON.stringify(leaf.toJSON(options.json)), 'text'), filename);\n                return over({ data: isDownload ? true : leaf.toJSON(options.json) });\n            }\n            if (fileType === 'svg') {\n                isDownload && download(toURL(leaf.toSVG(), 'svg'), filename);\n                return over({ data: isDownload ? true : leaf.toSVG() });\n            }\n            const { leafer } = leaf;\n            if (leafer) {\n                checkLazy(leaf);\n                leafer.waitViewCompleted(() => __awaiter(this, void 0, void 0, function* () {\n                    let renderBounds, trimBounds, scaleX = 1, scaleY = 1;\n                    const { worldTransform, isLeafer, isFrame } = leaf;\n                    const { slice, trim, onCanvas } = options;\n                    const smooth = options.smooth === undefined ? leafer.config.smooth : options.smooth;\n                    const contextSettings = options.contextSettings || leafer.config.contextSettings;\n                    const screenshot = options.screenshot || leaf.isApp;\n                    const fill = (isLeafer && screenshot) ? (options.fill === undefined ? leaf.fill : options.fill) : options.fill;\n                    const needFill = FileHelper.isOpaqueImage(filename) || fill, matrix = new Matrix();\n                    if (screenshot) {\n                        renderBounds = screenshot === true ? (isLeafer ? leafer.canvas.bounds : leaf.worldRenderBounds) : screenshot;\n                    }\n                    else {\n                        let relative = options.relative || (isLeafer ? 'inner' : 'local');\n                        scaleX = worldTransform.scaleX;\n                        scaleY = worldTransform.scaleY;\n                        switch (relative) {\n                            case 'inner':\n                                matrix.set(worldTransform);\n                                break;\n                            case 'local':\n                                matrix.set(worldTransform).divide(leaf.localTransform);\n                                scaleX /= leaf.scaleX;\n                                scaleY /= leaf.scaleY;\n                                break;\n                            case 'world':\n                                scaleX = 1;\n                                scaleY = 1;\n                                break;\n                            case 'page':\n                                relative = leaf.leafer;\n                            default:\n                                matrix.set(worldTransform).divide(leaf.getTransform(relative));\n                                const l = relative.worldTransform;\n                                scaleX /= scaleX / l.scaleX;\n                                scaleY /= scaleY / l.scaleY;\n                        }\n                        renderBounds = leaf.getBounds('render', relative);\n                    }\n                    const scaleData = { scaleX: 1, scaleY: 1 };\n                    MathHelper.getScaleData(options.scale, options.size, renderBounds, scaleData);\n                    let pixelRatio = options.pixelRatio || 1;\n                    if (leaf.isApp) {\n                        scaleData.scaleX *= pixelRatio;\n                        scaleData.scaleY *= pixelRatio;\n                        pixelRatio = leaf.app.pixelRatio;\n                    }\n                    const { x, y, width, height } = new Bounds(renderBounds).scale(scaleData.scaleX, scaleData.scaleY);\n                    const renderOptions = { matrix: matrix.scale(1 / scaleData.scaleX, 1 / scaleData.scaleY).invert().translate(-x, -y).withScale(1 / scaleX * scaleData.scaleX, 1 / scaleY * scaleData.scaleY) };\n                    let canvas = Creator.canvas({ width: Math.round(width), height: Math.round(height), pixelRatio, smooth, contextSettings });\n                    let sliceLeaf;\n                    if (slice) {\n                        sliceLeaf = leaf;\n                        sliceLeaf.__worldOpacity = 0;\n                        leaf = leafer;\n                        renderOptions.bounds = canvas.bounds;\n                    }\n                    canvas.save();\n                    if (isFrame && fill !== undefined) {\n                        const oldFill = leaf.get('fill');\n                        leaf.fill = '';\n                        leaf.__render(canvas, renderOptions);\n                        leaf.fill = oldFill;\n                    }\n                    else {\n                        leaf.__render(canvas, renderOptions);\n                    }\n                    canvas.restore();\n                    if (sliceLeaf)\n                        sliceLeaf.__updateWorldOpacity();\n                    if (trim) {\n                        trimBounds = getTrimBounds(canvas);\n                        const old = canvas, { width, height } = trimBounds;\n                        const config = { x: 0, y: 0, width, height, pixelRatio };\n                        canvas = Creator.canvas(config);\n                        canvas.copyWorld(old, trimBounds, config);\n                    }\n                    if (needFill)\n                        canvas.fillWorld(canvas.bounds, fill || '#FFFFFF', 'destination-over');\n                    if (onCanvas)\n                        onCanvas(canvas);\n                    const data = filename === 'canvas' ? canvas : yield canvas.export(filename, options);\n                    over({ data, width: canvas.pixelWidth, height: canvas.pixelHeight, renderBounds, trimBounds });\n                }));\n            }\n            else {\n                over({ data: false });\n            }\n        }));\n    }\n};\nlet tasker;\nfunction addTask(task) {\n    if (!tasker)\n        tasker = new TaskProcessor();\n    return new Promise((resolve) => {\n        tasker.add(() => __awaiter(this, void 0, void 0, function* () { return yield task(resolve); }), { parallel: false });\n    });\n}\nfunction checkLazy(leaf) {\n    if (leaf.__.__needComputePaint)\n        leaf.__.__computePaint();\n    if (leaf.isBranch)\n        leaf.children.forEach(child => checkLazy(child));\n}\n\nconst canvas = LeaferCanvasBase.prototype;\nconst debug = Debug.get('@leafer-ui/export');\ncanvas.export = function (filename, options) {\n    const { quality, blob } = FileHelper.getExportOptions(options);\n    if (filename.includes('.'))\n        return this.saveAs(filename, quality);\n    else if (blob)\n        return this.toBlob(filename, quality);\n    else\n        return this.toDataURL(filename, quality);\n};\ncanvas.toBlob = function (type, quality) {\n    return new Promise((resolve) => {\n        Platform.origin.canvasToBolb(this.view, type, quality).then((blob) => {\n            resolve(blob);\n        }).catch((e) => {\n            debug.error(e);\n            resolve(null);\n        });\n    });\n};\ncanvas.toDataURL = function (type, quality) {\n    return Platform.origin.canvasToDataURL(this.view, type, quality);\n};\ncanvas.saveAs = function (filename, quality) {\n    return new Promise((resolve) => {\n        Platform.origin.canvasSaveAs(this.view, filename, quality).then(() => {\n            resolve(true);\n        }).catch((e) => {\n            debug.error(e);\n            resolve(false);\n        });\n    });\n};\n\nObject.assign(TextConvert, TextConvertModule);\nObject.assign(ColorConvert, ColorConvertModule);\nObject.assign(Paint, PaintModule);\nObject.assign(PaintImage, PaintImageModule);\nObject.assign(PaintGradient, PaintGradientModule);\nObject.assign(Effect, EffectModule);\nObject.assign(Export, ExportModule);\n\nObject.assign(Creator, {\n    interaction: (target, canvas, selector, options) => new Interaction(target, canvas, selector, options),\n    hitCanvas: (options, manager) => new LeaferCanvas(options, manager),\n    hitCanvasManager: () => new HitCanvasManager()\n});\nuseCanvas();\n\nexport { Interaction, Layouter, LeaferCanvas, Renderer, Selector, Watcher, useCanvas };\n"],
  "mappings": "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",
  "names": ["canvas", "origin", "bounds", "leaf", "cache", "scale", "row", "rows", "fill", "fills", "stroke", "strokes", "box", "image", "canvas", "image", "recycleMap", "box", "shape", "shadow", "bounds", "innerShadow", "origin", "blur", "char", "CharType", "row", "trimRight", "content", "rows", "word", "rowWidth", "right", "fileType", "fill", "width", "height"]
}
