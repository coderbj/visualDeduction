import { ILeafLayout, ILeaf, IBoundsData, ILocationType, IMatrixData, IBoundsType, ILayoutBoundsData, IPointData } from '@leafer/interface';

declare class LeafLayout implements ILeafLayout {
    leaf: ILeaf;
    proxyZoom: boolean;
    get contentBounds(): IBoundsData;
    set contentBounds(bounds: IBoundsData);
    boxBounds: IBoundsData;
    get strokeBounds(): IBoundsData;
    get renderBounds(): IBoundsData;
    _contentBounds: IBoundsData;
    _strokeBounds: IBoundsData;
    _renderBounds: IBoundsData;
    get localContentBounds(): IBoundsData;
    get localStrokeBounds(): IBoundsData;
    get localRenderBounds(): IBoundsData;
    protected _localContentBounds?: IBoundsData;
    protected _localStrokeBounds?: IBoundsData;
    protected _localRenderBounds?: IBoundsData;
    get worldContentBounds(): IBoundsData;
    get worldBoxBounds(): IBoundsData;
    get worldStrokeBounds(): IBoundsData;
    protected _worldContentBounds: IBoundsData;
    protected _worldBoxBounds: IBoundsData;
    protected _worldStrokeBounds: IBoundsData;
    resized: boolean;
    waitAutoLayout: boolean;
    matrixChanged: boolean;
    scaleChanged: boolean;
    rotationChanged: boolean;
    boundsChanged: boolean;
    boxChanged: boolean;
    strokeChanged: boolean;
    renderChanged: boolean;
    localBoxChanged: boolean;
    surfaceChanged: boolean;
    opacityChanged: boolean;
    hitCanvasChanged: boolean;
    childrenSortChanged?: boolean;
    stateStyleChanged?: boolean;
    affectScaleOrRotation: boolean;
    affectRotation: boolean;
    affectChildrenSort?: boolean;
    strokeSpread: number;
    strokeBoxSpread: number;
    renderSpread: number;
    renderShapeSpread: number;
    get a(): number;
    get b(): number;
    get c(): number;
    get d(): number;
    get e(): number;
    get f(): number;
    get x(): number;
    get y(): number;
    get width(): number;
    get height(): number;
    constructor(leaf: ILeaf);
    createLocal(): void;
    update(): void;
    getTransform(relative?: ILocationType | ILeaf): IMatrixData;
    getBounds(type?: IBoundsType, relative?: ILocationType | ILeaf): IBoundsData;
    getInnerBounds(type?: IBoundsType): IBoundsData;
    getLocalBounds(type?: IBoundsType): IBoundsData;
    getWorldBounds(type?: IBoundsType): IBoundsData;
    getLayoutBounds(type?: IBoundsType, relative?: ILocationType | ILeaf, unscale?: boolean): ILayoutBoundsData;
    getLayoutPoints(type?: IBoundsType, relative?: ILocationType | ILeaf): IPointData[];
    shrinkContent(): void;
    spreadStroke(): void;
    spreadRender(): void;
    shrinkContentCancel(): void;
    spreadStrokeCancel(): void;
    spreadRenderCancel(): void;
    boxChange(): void;
    localBoxChange(): void;
    strokeChange(): void;
    renderChange(): void;
    scaleChange(): void;
    rotationChange(): void;
    protected _scaleOrRotationChange(): void;
    matrixChange(): void;
    surfaceChange(): void;
    opacityChange(): void;
    childrenSortChange(): void;
    destroy(): void;
}

export { LeafLayout };
