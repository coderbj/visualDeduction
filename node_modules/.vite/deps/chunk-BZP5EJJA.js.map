{
  "version": 3,
  "sources": ["../../.pnpm/@leafer-ui+core@1.0.10/node_modules/@leafer-ui/core/lib/core.esm.js"],
  "sourcesContent": ["import { Leafer, State, UI, ImageManager, Rect, Box, Group, Platform as Platform$1, Creator as Creator$1 } from '@leafer-ui/draw';\nexport * from '@leafer-ui/draw';\nimport { registerUI, Creator, PropertyEvent, Debug, DataHelper, canvasSizeAttrs, LayoutEvent, RenderEvent, Event, EventCreator, registerUIEvent, LeafList, BoundsHelper, PointHelper, Bounds, ResizeEvent, LeaferEvent, CanvasManager, Leaf, Matrix, Platform, tempBounds, LeaferCanvasBase } from '@leafer/core';\n\n/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise, SuppressedError, Symbol */\r\n\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\ntypeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\r\n    var e = new Error(message);\r\n    return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\r\n};\n\nlet App = class App extends Leafer {\n    get __tag() { return 'App'; }\n    get isApp() { return true; }\n    constructor(userConfig, data) {\n        super(userConfig, data);\n    }\n    init(userConfig, parentApp) {\n        super.init(userConfig, parentApp);\n        if (userConfig) {\n            const { ground, tree, sky, editor } = userConfig;\n            if (ground)\n                this.ground = this.addLeafer(ground);\n            if (tree || editor)\n                this.tree = this.addLeafer(tree);\n            if (sky || editor)\n                this.sky = this.addLeafer(sky || { type: 'draw', usePartRender: false });\n            if (editor)\n                this.sky.add(this.editor = Creator.editor(editor));\n        }\n    }\n    __setApp() {\n        const { canvas } = this;\n        const { realCanvas, view } = this.config;\n        if (realCanvas || view === this.canvas.view || !canvas.parentView)\n            this.realCanvas = true;\n        else\n            canvas.unrealCanvas();\n        this.leafer = this;\n        this.watcher.disable();\n        this.layouter.disable();\n        this.__eventIds.push(this.on_(PropertyEvent.CHANGE, this.__onPropertyChange, this));\n    }\n    start() {\n        super.start();\n        this.children.forEach(leafer => leafer.start());\n    }\n    stop() {\n        this.children.forEach(leafer => leafer.stop());\n        super.stop();\n    }\n    unlockLayout() {\n        super.unlockLayout();\n        this.children.forEach(leafer => leafer.unlockLayout());\n    }\n    lockLayout() {\n        super.lockLayout();\n        this.children.forEach(leafer => leafer.lockLayout());\n    }\n    forceRender(bounds) {\n        this.children.forEach(leafer => leafer.forceRender(bounds));\n    }\n    addLeafer(merge) {\n        const leafer = new Leafer(merge);\n        this.add(leafer);\n        return leafer;\n    }\n    add(leafer, index) {\n        if (!leafer.view) {\n            if (this.realCanvas && !this.canvas.bounds) {\n                setTimeout(() => this.add(leafer, index), 10);\n                return;\n            }\n            leafer.init(this.__getChildConfig(leafer.userConfig), this);\n        }\n        super.add(leafer, index);\n        if (index !== undefined)\n            leafer.canvas.childIndex = index;\n        this.__listenChildEvents(leafer);\n    }\n    __onPropertyChange() {\n        if (Debug.showHitView)\n            this.children.forEach(leafer => leafer.forceUpdate('surface'));\n    }\n    __onCreated() {\n        this.created = this.children.every(child => child.created);\n    }\n    __onReady() {\n        if (this.children.every(child => child.ready))\n            super.__onReady();\n    }\n    __onViewReady() {\n        if (this.children.every(child => child.viewReady))\n            super.__onViewReady();\n    }\n    __onChildRenderEnd(e) {\n        this.renderer.addBlock(e.renderBounds);\n        if (this.viewReady)\n            this.renderer.update();\n    }\n    __render(canvas, options) {\n        if (canvas.context) {\n            const m = options.matrix;\n            if (m)\n                canvas.setTransform(m.a, m.b, m.c, m.d, m.e, m.f);\n            this.children.forEach(leafer => canvas.copyWorld(leafer.canvas));\n        }\n    }\n    __onResize(event) {\n        this.children.forEach(leafer => leafer.resize(event));\n        super.__onResize(event);\n    }\n    __checkUpdateLayout() {\n        this.children.forEach(leafer => leafer.__layout.update());\n    }\n    __getChildConfig(userConfig) {\n        let config = Object.assign({}, this.config);\n        config.hittable = config.realCanvas = undefined;\n        if (userConfig)\n            DataHelper.assign(config, userConfig);\n        if (this.autoLayout)\n            DataHelper.copyAttrs(config, this, canvasSizeAttrs);\n        config.view = this.realCanvas ? undefined : this.view;\n        config.fill = undefined;\n        return config;\n    }\n    __listenChildEvents(leafer) {\n        leafer.once(LayoutEvent.END, () => this.__onReady());\n        leafer.once(RenderEvent.START, () => this.__onCreated());\n        leafer.once(RenderEvent.END, () => this.__onViewReady());\n        if (this.realCanvas)\n            this.__eventIds.push(leafer.on_(RenderEvent.END, this.__onChildRenderEnd, this));\n    }\n};\nApp = __decorate([\n    registerUI()\n], App);\n\nconst downKeyMap = {};\nconst Keyboard = {\n    isHoldSpaceKey() {\n        return Keyboard.isHold('Space');\n    },\n    isHold(code) {\n        return downKeyMap[code];\n    },\n    setDownCode(code) {\n        if (!downKeyMap[code])\n            downKeyMap[code] = true;\n    },\n    setUpCode(code) {\n        downKeyMap[code] = false;\n    }\n};\n\nconst PointerButton = {\n    LEFT: 1,\n    RIGHT: 2,\n    MIDDLE: 4,\n    defaultLeft(event) { if (!event.buttons)\n        event.buttons = 1; },\n    left(event) { return event.buttons === 1; },\n    right(event) { return event.buttons === 2; },\n    middle(event) { return event.buttons === 4; }\n};\n\nclass UIEvent extends Event {\n    get spaceKey() { return Keyboard.isHoldSpaceKey(); }\n    get left() { return PointerButton.left(this); }\n    get right() { return PointerButton.right(this); }\n    get middle() { return PointerButton.middle(this); }\n    constructor(params) {\n        super(params.type);\n        this.bubbles = true;\n        Object.assign(this, params);\n    }\n    getBoxPoint(relative) {\n        return (relative || this.current).getBoxPoint(this);\n    }\n    getInnerPoint(relative) {\n        return (relative || this.current).getInnerPoint(this);\n    }\n    getLocalPoint(relative) {\n        return (relative || this.current).getLocalPoint(this);\n    }\n    getPagePoint() {\n        return this.current.getPagePoint(this);\n    }\n    getInner(relative) { return this.getInnerPoint(relative); }\n    getLocal(relative) { return this.getLocalPoint(relative); }\n    getPage() { return this.getPagePoint(); }\n    static changeName(oldName, newName) {\n        EventCreator.changeName(oldName, newName);\n    }\n}\n\nlet PointerEvent = class PointerEvent extends UIEvent {\n};\nPointerEvent.POINTER = 'pointer';\nPointerEvent.BEFORE_DOWN = 'pointer.before_down';\nPointerEvent.BEFORE_MOVE = 'pointer.before_move';\nPointerEvent.BEFORE_UP = 'pointer.before_up';\nPointerEvent.DOWN = 'pointer.down';\nPointerEvent.MOVE = 'pointer.move';\nPointerEvent.UP = 'pointer.up';\nPointerEvent.OVER = 'pointer.over';\nPointerEvent.OUT = 'pointer.out';\nPointerEvent.ENTER = 'pointer.enter';\nPointerEvent.LEAVE = 'pointer.leave';\nPointerEvent.TAP = 'tap';\nPointerEvent.DOUBLE_TAP = 'double_tap';\nPointerEvent.CLICK = 'click';\nPointerEvent.DOUBLE_CLICK = 'double_click';\nPointerEvent.LONG_PRESS = 'long_press';\nPointerEvent.LONG_TAP = 'long_tap';\nPointerEvent.MENU = 'pointer.menu';\nPointerEvent.MENU_TAP = 'pointer.menu_tap';\nPointerEvent = __decorate([\n    registerUIEvent()\n], PointerEvent);\nconst MyPointerEvent = PointerEvent;\n\nconst tempMove = {};\nlet DragEvent = class DragEvent extends PointerEvent {\n    static setList(data) {\n        this.list = data instanceof LeafList ? data : new LeafList(data);\n    }\n    static setData(data) {\n        this.data = data;\n    }\n    static getValidMove(leaf, start, total) {\n        const { draggable, dragBounds, x, y } = leaf;\n        const move = leaf.getLocalPoint(total, null, true);\n        move.x += start.x - x;\n        move.y += start.y - y;\n        if (dragBounds)\n            this.getMoveInDragBounds(leaf.__local, dragBounds === 'parent' ? leaf.parent.boxBounds : dragBounds, move, true);\n        if (draggable === 'x')\n            move.y = 0;\n        if (draggable === 'y')\n            move.x = 0;\n        return move;\n    }\n    static getMoveInDragBounds(childBox, dragBounds, move, change) {\n        const x = childBox.x + move.x, y = childBox.y + move.y;\n        const right = x + childBox.width, bottom = y + childBox.height;\n        const boundsRight = dragBounds.x + dragBounds.width, boundsBottom = dragBounds.y + dragBounds.height;\n        if (!change)\n            move = Object.assign({}, move);\n        if (BoundsHelper.includes(childBox, dragBounds)) {\n            if (x > dragBounds.x)\n                move.x += dragBounds.x - x;\n            else if (right < boundsRight)\n                move.x += boundsRight - right;\n            if (y > dragBounds.y)\n                move.y += dragBounds.y - y;\n            else if (bottom < boundsBottom)\n                move.y += boundsBottom - bottom;\n        }\n        else {\n            if (x < dragBounds.x)\n                move.x += dragBounds.x - x;\n            else if (right > boundsRight)\n                move.x += boundsRight - right;\n            if (y < dragBounds.y)\n                move.y += dragBounds.y - y;\n            else if (bottom > boundsBottom)\n                move.y += boundsBottom - bottom;\n        }\n        return move;\n    }\n    getPageMove(total) {\n        this.assignMove(total);\n        return this.current.getPagePoint(tempMove, null, true);\n    }\n    getInnerMove(relative, total) {\n        if (!relative)\n            relative = this.current;\n        this.assignMove(total);\n        return relative.getInnerPoint(tempMove, null, true);\n    }\n    getLocalMove(relative, total) {\n        if (!relative)\n            relative = this.current;\n        this.assignMove(total);\n        return relative.getLocalPoint(tempMove, null, true);\n    }\n    getPageTotal() {\n        return this.getPageMove(true);\n    }\n    getInnerTotal(relative) {\n        return this.getInnerMove(relative, true);\n    }\n    getLocalTotal(relative) {\n        return this.getLocalMove(relative, true);\n    }\n    getPageBounds() {\n        const total = this.getPageTotal();\n        const start = this.getPagePoint();\n        const bounds = {};\n        BoundsHelper.set(bounds, start.x - total.x, start.y - total.y, total.x, total.y);\n        BoundsHelper.unsign(bounds);\n        return bounds;\n    }\n    assignMove(total) {\n        tempMove.x = total ? this.totalX : this.moveX;\n        tempMove.y = total ? this.totalY : this.moveY;\n    }\n};\nDragEvent.BEFORE_DRAG = 'drag.before_drag';\nDragEvent.START = 'drag.start';\nDragEvent.DRAG = 'drag';\nDragEvent.END = 'drag.end';\nDragEvent.OVER = 'drag.over';\nDragEvent.OUT = 'drag.out';\nDragEvent.ENTER = 'drag.enter';\nDragEvent.LEAVE = 'drag.leave';\nDragEvent = __decorate([\n    registerUIEvent()\n], DragEvent);\nconst MyDragEvent = DragEvent;\n\nlet DropEvent = class DropEvent extends PointerEvent {\n    static setList(data) {\n        DragEvent.setList(data);\n    }\n    static setData(data) {\n        DragEvent.setData(data);\n    }\n};\nDropEvent.DROP = 'drop';\nDropEvent = __decorate([\n    registerUIEvent()\n], DropEvent);\n\nlet MoveEvent = class MoveEvent extends DragEvent {\n};\nMoveEvent.BEFORE_MOVE = 'move.before_move';\nMoveEvent.START = 'move.start';\nMoveEvent.MOVE = 'move';\nMoveEvent.END = 'move.end';\nMoveEvent = __decorate([\n    registerUIEvent()\n], MoveEvent);\n\nlet RotateEvent = class RotateEvent extends UIEvent {\n};\nRotateEvent.BEFORE_ROTATE = 'rotate.before_rotate';\nRotateEvent.START = 'rotate.start';\nRotateEvent.ROTATE = 'rotate';\nRotateEvent.END = 'rotate.end';\nRotateEvent = __decorate([\n    registerUIEvent()\n], RotateEvent);\n\nlet SwipeEvent = class SwipeEvent extends DragEvent {\n};\nSwipeEvent.SWIPE = 'swipe';\nSwipeEvent.LEFT = 'swipe.left';\nSwipeEvent.RIGHT = 'swipe.right';\nSwipeEvent.UP = 'swipe.up';\nSwipeEvent.DOWN = 'swipe.down';\nSwipeEvent = __decorate([\n    registerUIEvent()\n], SwipeEvent);\n\nlet ZoomEvent = class ZoomEvent extends UIEvent {\n};\nZoomEvent.BEFORE_ZOOM = 'zoom.before_zoom';\nZoomEvent.START = 'zoom.start';\nZoomEvent.ZOOM = 'zoom';\nZoomEvent.END = 'zoom.end';\nZoomEvent = __decorate([\n    registerUIEvent()\n], ZoomEvent);\n\nlet KeyEvent = class KeyEvent extends UIEvent {\n};\nKeyEvent.DOWN = 'key.down';\nKeyEvent.HOLD = 'key.hold';\nKeyEvent.UP = 'key.up';\nKeyEvent = __decorate([\n    registerUIEvent()\n], KeyEvent);\n\nfunction addInteractionWindow(leafer) {\n    if (leafer.isApp)\n        return;\n    leafer.__eventIds.push(leafer.on_(MoveEvent.BEFORE_MOVE, (e) => {\n        leafer.zoomLayer.move(leafer.getValidMove(e.moveX, e.moveY));\n    }), leafer.on_(ZoomEvent.BEFORE_ZOOM, (e) => {\n        const { zoomLayer } = leafer;\n        const changeScale = leafer.getValidScale(e.scale);\n        if (changeScale !== 1) {\n            PointHelper.scaleOf(zoomLayer, e, changeScale);\n            zoomLayer.scale = zoomLayer.__.scaleX * changeScale;\n        }\n    }));\n}\n\nfunction document(leafer) {\n    addInteractionWindow(leafer);\n    const { move, zoom } = leafer.config;\n    move.scroll = 'limit';\n    zoom.min = 1;\n}\n\nfunction block(leafer) {\n    const { config } = leafer;\n    (config.wheel || (config.wheel = {})).preventDefault = false;\n    (config.touch || (config.touch = {})).preventDefault = 'auto';\n}\n\nconst debug$1 = Debug.get('LeaferTypeCreator');\nconst LeaferTypeCreator = {\n    list: {},\n    register(name, fn) {\n        list[name] && debug$1.repeat(name);\n        list[name] = fn;\n    },\n    run(name, leafer) {\n        const fn = list[name];\n        fn && fn(leafer);\n    }\n};\nconst { list, register } = LeaferTypeCreator;\nregister('design', addInteractionWindow);\nregister('document', document);\nregister('block', block);\n\nconst leafer = Leafer.prototype;\nleafer.initType = function (type) {\n    LeaferTypeCreator.run(type, this);\n};\nleafer.getValidMove = function (moveX, moveY) {\n    const { scroll, disabled } = this.app.config.move;\n    if (scroll) {\n        Math.abs(moveX) > Math.abs(moveY) ? moveY = 0 : moveX = 0;\n        if (scroll === 'limit') {\n            const { x, y, width, height } = new Bounds(this.__world).addPoint(this.zoomLayer);\n            const right = x + width - this.width, bottom = y + height - this.height;\n            if (x >= 0 && right <= 0)\n                moveX = 0;\n            else if (moveX > 0) {\n                if (x + moveX > 0)\n                    moveX = -x;\n            }\n            else if (moveX < 0 && right + moveX < 0)\n                moveX = -right;\n            if (y >= 0 && bottom <= 0)\n                moveY = 0;\n            else if (moveY > 0) {\n                if (y + moveY > 0)\n                    moveY = -y;\n            }\n            else if (moveY < 0 && bottom + moveY < 0)\n                moveY = -bottom;\n        }\n    }\n    return { x: disabled ? 0 : moveX, y: disabled ? 0 : moveY };\n};\nleafer.getValidScale = function (changeScale) {\n    const { scaleX } = this.zoomLayer.__, { min, max, disabled } = this.app.config.zoom, absScale = Math.abs(scaleX * changeScale);\n    if (absScale < min)\n        changeScale = min / scaleX;\n    else if (absScale > max)\n        changeScale = max / scaleX;\n    return disabled ? 1 : changeScale;\n};\n\nclass Transformer {\n    get transforming() { return !!(this.moveData || this.zoomData || this.rotateData); }\n    constructor(interaction) {\n        this.interaction = interaction;\n    }\n    move(data) {\n        const { interaction } = this;\n        if (!data.moveType)\n            data.moveType = 'move';\n        if (!this.moveData) {\n            const { path } = interaction.selector.getByPoint(data, interaction.hitRadius);\n            data.path = path;\n            this.moveData = Object.assign(Object.assign({}, data), { moveX: 0, moveY: 0 });\n            interaction.cancelHover();\n            interaction.emit(MoveEvent.START, this.moveData);\n        }\n        data.path = this.moveData.path;\n        interaction.emit(MoveEvent.BEFORE_MOVE, data);\n        interaction.emit(MoveEvent.MOVE, data);\n        this.transformEndWait();\n    }\n    zoom(data) {\n        const { interaction } = this;\n        if (!this.zoomData) {\n            const { path } = interaction.selector.getByPoint(data, interaction.hitRadius);\n            data.path = path;\n            this.zoomData = Object.assign(Object.assign({}, data), { scale: 1 });\n            interaction.cancelHover();\n            interaction.emit(ZoomEvent.START, this.zoomData);\n        }\n        data.path = this.zoomData.path;\n        interaction.emit(ZoomEvent.BEFORE_ZOOM, data);\n        interaction.emit(ZoomEvent.ZOOM, data);\n        this.transformEndWait();\n    }\n    rotate(data) {\n        const { interaction } = this;\n        if (!this.rotateData) {\n            const { path } = interaction.selector.getByPoint(data, interaction.hitRadius);\n            data.path = path;\n            this.rotateData = Object.assign(Object.assign({}, data), { rotation: 0 });\n            interaction.cancelHover();\n            interaction.emit(RotateEvent.START, this.rotateData);\n        }\n        data.path = this.rotateData.path;\n        interaction.emit(RotateEvent.BEFORE_ROTATE, data);\n        interaction.emit(RotateEvent.ROTATE, data);\n        this.transformEndWait();\n    }\n    transformEndWait() {\n        clearTimeout(this.transformTimer);\n        this.transformTimer = setTimeout(() => {\n            this.transformEnd();\n        }, this.interaction.config.pointer.transformTime);\n    }\n    transformEnd() {\n        this.moveEnd();\n        this.zoomEnd();\n        this.rotateEnd();\n    }\n    moveEnd() {\n        if (this.moveData) {\n            this.interaction.emit(MoveEvent.END, this.moveData);\n            this.moveData = null;\n        }\n    }\n    zoomEnd() {\n        if (this.zoomData) {\n            this.interaction.emit(ZoomEvent.END, this.zoomData);\n            this.zoomData = null;\n        }\n    }\n    rotateEnd() {\n        if (this.rotateData) {\n            this.interaction.emit(RotateEvent.END, this.rotateData);\n            this.rotateData = null;\n        }\n    }\n    destroy() {\n        this.zoomData = this.moveData = this.rotateData = null;\n    }\n}\n\nconst InteractionHelper = {\n    getMoveEventData(center, move, event) {\n        return Object.assign(Object.assign({}, event), { x: center.x, y: center.y, moveX: move.x, moveY: move.y });\n    },\n    getRotateEventData(center, angle, event) {\n        return Object.assign(Object.assign({}, event), { x: center.x, y: center.y, rotation: angle });\n    },\n    getZoomEventData(center, scale, event) {\n        return Object.assign(Object.assign({}, event), { x: center.x, y: center.y, scale });\n    },\n    getDragEventData(startPoint, lastPoint, event) {\n        return Object.assign(Object.assign({}, event), { x: event.x, y: event.y, moveX: event.x - lastPoint.x, moveY: event.y - lastPoint.y, totalX: event.x - startPoint.x, totalY: event.y - startPoint.y });\n    },\n    getDropEventData(event, list, data) {\n        return Object.assign(Object.assign({}, event), { list,\n            data });\n    },\n    getSwipeDirection(angle) {\n        if (angle < -45 && angle > -135) {\n            return SwipeEvent.UP;\n        }\n        else if (angle > 45 && angle < 135) {\n            return SwipeEvent.DOWN;\n        }\n        else if (angle <= 45 && angle >= -45) {\n            return SwipeEvent.RIGHT;\n        }\n        else {\n            return SwipeEvent.LEFT;\n        }\n    },\n    getSwipeEventData(startPoint, lastDragData, event) {\n        return Object.assign(Object.assign({}, event), { moveX: lastDragData.moveX, moveY: lastDragData.moveY, totalX: event.x - startPoint.x, totalY: event.y - startPoint.y, type: I.getSwipeDirection(PointHelper.getAngle(startPoint, event)) });\n    },\n    getBase(e) {\n        const pointerUpButtons = e.button === 1 ? 4 : e.button;\n        return {\n            altKey: e.altKey,\n            ctrlKey: e.ctrlKey,\n            shiftKey: e.shiftKey,\n            metaKey: e.metaKey,\n            buttons: e.buttons === undefined ? 1 : (e.buttons === 0 ? pointerUpButtons : e.buttons),\n            origin: e\n        };\n    },\n    pathHasEventType(path, type) {\n        const { list } = path;\n        for (let i = 0, len = list.length; i < len; i++) {\n            if (list[i].hasEvent(type))\n                return true;\n        }\n        return false;\n    },\n    filterPathByEventType(path, type) {\n        const find = new LeafList();\n        const { list } = path;\n        for (let i = 0, len = list.length; i < len; i++) {\n            if (list[i].hasEvent(type))\n                find.add(list[i]);\n        }\n        return find;\n    },\n    pathCanDrag(path) {\n        return path && path.list.some(item => item.draggable || item.editable || (!item.isLeafer && item.hasEvent(DragEvent.DRAG)));\n    },\n    pathHasOutside(path) {\n        return path && path.list.some(item => item.isOutside);\n    },\n};\nconst I = InteractionHelper;\n\nconst emptyList = new LeafList();\nconst { getDragEventData, getDropEventData, getSwipeEventData } = InteractionHelper;\nclass Dragger {\n    constructor(interaction) {\n        this.interaction = interaction;\n    }\n    setDragData(data) {\n        if (this.animateWait)\n            this.dragEndReal();\n        this.downData = this.interaction.downData;\n        this.dragData = getDragEventData(data, data, data);\n        this.canAnimate = this.canDragOut = true;\n    }\n    getList(realDraggable, hover) {\n        const { proxy } = this.interaction.selector;\n        const hasProxyList = proxy && proxy.list.length, dragList = DragEvent.list || this.draggableList || emptyList;\n        return this.dragging && (hasProxyList ? (realDraggable ? emptyList : new LeafList(hover ? [...proxy.list, ...proxy.dragHoverExclude] : proxy.list)) : dragList);\n    }\n    checkDrag(data, canDrag) {\n        const { interaction } = this;\n        if (this.moving && data.buttons < 1) {\n            this.canAnimate = false;\n            interaction.pointerCancel();\n            return;\n        }\n        if (!this.moving && canDrag) {\n            if (this.moving = interaction.canMove(this.downData) || interaction.isHoldRightKey || interaction.isMobileDragEmpty) {\n                this.dragData.moveType = 'drag';\n                interaction.emit(MoveEvent.START, this.dragData);\n            }\n        }\n        if (!this.moving) {\n            this.dragStart(data, canDrag);\n        }\n        this.drag(data);\n    }\n    dragStart(data, canDrag) {\n        if (!this.dragging) {\n            this.dragging = canDrag && PointerButton.left(data);\n            if (this.dragging) {\n                this.interaction.emit(DragEvent.START, this.dragData);\n                this.getDraggableList(this.dragData.path);\n                this.setDragStartPoints(this.realDraggableList = this.getList(true));\n            }\n        }\n    }\n    setDragStartPoints(list) {\n        this.dragStartPoints = {};\n        list.forEach(leaf => this.dragStartPoints[leaf.innerId] = { x: leaf.x, y: leaf.y });\n    }\n    getDraggableList(path) {\n        let leaf;\n        for (let i = 0, len = path.length; i < len; i++) {\n            leaf = path.list[i];\n            if ((leaf.draggable || leaf.editable) && leaf.hitSelf && !leaf.locked) {\n                this.draggableList = new LeafList(leaf);\n                break;\n            }\n        }\n    }\n    drag(data) {\n        const { interaction, dragData, downData } = this;\n        const { path, throughPath } = downData;\n        this.dragData = getDragEventData(downData, dragData, data);\n        if (throughPath)\n            this.dragData.throughPath = throughPath;\n        this.dragData.path = path;\n        if (this.moving) {\n            this.dragData.moveType = 'drag';\n            interaction.emit(MoveEvent.BEFORE_MOVE, this.dragData);\n            interaction.emit(MoveEvent.MOVE, this.dragData);\n        }\n        else if (this.dragging) {\n            this.dragReal();\n            interaction.emit(DragEvent.BEFORE_DRAG, this.dragData);\n            interaction.emit(DragEvent.DRAG, this.dragData);\n        }\n    }\n    dragReal() {\n        const { running } = this.interaction;\n        const list = this.realDraggableList;\n        if (list.length && running) {\n            const { totalX, totalY } = this.dragData;\n            list.forEach(leaf => leaf.draggable && leaf.move(DragEvent.getValidMove(leaf, this.dragStartPoints[leaf.innerId], { x: totalX, y: totalY })));\n        }\n    }\n    dragOverOrOut(data) {\n        const { interaction } = this;\n        const { dragOverPath } = this;\n        const { path } = data;\n        this.dragOverPath = path;\n        if (dragOverPath) {\n            if (path.indexAt(0) !== dragOverPath.indexAt(0)) {\n                interaction.emit(DragEvent.OUT, data, dragOverPath);\n                interaction.emit(DragEvent.OVER, data, path);\n            }\n        }\n        else\n            interaction.emit(DragEvent.OVER, data, path);\n    }\n    dragEnterOrLeave(data) {\n        const { interaction } = this;\n        const { dragEnterPath } = this;\n        const { path } = data;\n        interaction.emit(DragEvent.LEAVE, data, dragEnterPath, path);\n        interaction.emit(DragEvent.ENTER, data, path, dragEnterPath);\n        this.dragEnterPath = path;\n    }\n    dragEnd(data, speed) {\n        if (!this.dragging && !this.moving)\n            return;\n        const { moveX, moveY } = this.dragData;\n        if (this.interaction.config.move.dragAnimate && this.canAnimate && this.moving && (Math.abs(moveX) > 1 || Math.abs(moveY) > 1)) {\n            data = Object.assign({}, data);\n            speed = (speed || (data.pointerType === 'touch' ? 2 : 1)) * 0.9;\n            PointHelper.move(data, moveX * speed, moveY * speed);\n            this.drag(data);\n            this.animate(() => { this.dragEnd(data, 1); });\n        }\n        else\n            this.dragEndReal(data);\n    }\n    dragEndReal(data) {\n        const { interaction, downData, dragData } = this;\n        if (!data)\n            data = dragData;\n        const { path, throughPath } = downData;\n        const endDragData = getDragEventData(downData, data, data);\n        if (throughPath)\n            endDragData.throughPath = throughPath;\n        endDragData.path = path;\n        if (this.moving) {\n            this.moving = false;\n            endDragData.moveType = 'drag';\n            interaction.emit(MoveEvent.END, endDragData);\n        }\n        if (this.dragging) {\n            const dropList = this.getList();\n            this.dragging = false;\n            interaction.emit(DragEvent.END, endDragData);\n            this.swipe(data, downData, dragData, endDragData);\n            this.drop(data, dropList, this.dragEnterPath);\n        }\n        this.autoMoveCancel();\n        this.dragReset();\n        this.animate(null, 'off');\n    }\n    animate(func, off) {\n        const animateWait = func || this.animateWait;\n        if (animateWait)\n            this.interaction.target.nextRender(animateWait, null, off);\n        this.animateWait = func;\n    }\n    swipe(data, downData, dragData, endDragData) {\n        const { interaction } = this;\n        if (PointHelper.getDistance(downData, data) > interaction.config.pointer.swipeDistance) {\n            const swipeData = getSwipeEventData(downData, dragData, endDragData);\n            this.interaction.emit(swipeData.type, swipeData);\n        }\n    }\n    drop(data, dropList, dragEnterPath) {\n        const dropData = getDropEventData(data, dropList, DragEvent.data);\n        dropData.path = dragEnterPath;\n        this.interaction.emit(DropEvent.DROP, dropData);\n        this.interaction.emit(DragEvent.LEAVE, data, dragEnterPath);\n    }\n    dragReset() {\n        DragEvent.list = DragEvent.data = this.draggableList = this.dragData = this.downData = this.dragOverPath = this.dragEnterPath = null;\n    }\n    checkDragOut(data) {\n        const { interaction } = this;\n        this.autoMoveCancel();\n        if (this.dragging && !interaction.shrinkCanvasBounds.hitPoint(data))\n            this.autoMoveOnDragOut(data);\n    }\n    autoMoveOnDragOut(data) {\n        const { interaction, downData, canDragOut } = this;\n        const { autoDistance, dragOut } = interaction.config.move;\n        if (!dragOut || !canDragOut || !autoDistance)\n            return;\n        const bounds = interaction.shrinkCanvasBounds;\n        const { x, y } = bounds;\n        const right = BoundsHelper.maxX(bounds);\n        const bottom = BoundsHelper.maxY(bounds);\n        const moveX = data.x < x ? autoDistance : (right < data.x ? -autoDistance : 0);\n        const moveY = data.y < y ? autoDistance : (bottom < data.y ? -autoDistance : 0);\n        let totalX = 0, totalY = 0;\n        this.autoMoveTimer = setInterval(() => {\n            totalX += moveX;\n            totalY += moveY;\n            PointHelper.move(downData, moveX, moveY);\n            PointHelper.move(this.dragData, moveX, moveY);\n            interaction.move(Object.assign(Object.assign({}, data), { moveX, moveY, totalX, totalY, moveType: 'drag' }));\n            interaction.pointerMoveReal(data);\n        }, 10);\n    }\n    autoMoveCancel() {\n        if (this.autoMoveTimer) {\n            clearInterval(this.autoMoveTimer);\n            this.autoMoveTimer = 0;\n        }\n    }\n    destroy() {\n        this.dragReset();\n    }\n}\n\nconst debug = Debug.get('emit');\nfunction emit(type, data, path, excludePath) {\n    if (!path && !data.path)\n        return;\n    let leaf;\n    data.type = type;\n    if (path) {\n        data = Object.assign(Object.assign({}, data), { path });\n    }\n    else {\n        path = data.path;\n    }\n    data.target = path.indexAt(0);\n    try {\n        for (let i = path.length - 1; i > -1; i--) {\n            leaf = path.list[i];\n            if (emitEvent(leaf, type, data, true, excludePath))\n                return;\n            if (leaf.isApp)\n                emitAppChildren(leaf, type, data, true, excludePath);\n        }\n        for (let i = 0, len = path.length; i < len; i++) {\n            leaf = path.list[i];\n            if (leaf.isApp)\n                emitAppChildren(leaf, type, data, false, excludePath);\n            if (emitEvent(leaf, type, data, false, excludePath))\n                return;\n        }\n    }\n    catch (e) {\n        debug.error(e);\n    }\n}\nconst allowTypes = ['move', 'zoom', 'rotate', 'key'];\nfunction emitAppChildren(leaf, type, data, capture, excludePath) {\n    if (allowTypes.some(name => type.startsWith(name)) && leaf.__.hitChildren && !exclude(leaf, excludePath)) {\n        let child;\n        for (let i = 0, len = leaf.children.length; i < len; i++) {\n            child = leaf.children[i];\n            if (!data.path.has(child) && child.__.hittable)\n                emitEvent(child, type, data, capture, excludePath);\n        }\n    }\n}\nfunction emitEvent(leaf, type, data, capture, excludePath) {\n    if (leaf.destroyed)\n        return false;\n    if (leaf.__.hitSelf && !exclude(leaf, excludePath)) {\n        if (State.updateEventStyle && !capture)\n            State.updateEventStyle(leaf, type);\n        if (leaf.hasEvent(type, capture)) {\n            data.phase = capture ? 1 : ((leaf === data.target) ? 2 : 3);\n            const event = EventCreator.get(type, data);\n            leaf.emitEvent(event, capture);\n            if (event.isStop)\n                return true;\n        }\n    }\n    return false;\n}\nfunction exclude(leaf, excludePath) {\n    return excludePath && excludePath.has(leaf);\n}\n\nconst MultiTouchHelper = {\n    getData(list) {\n        const a = list[0];\n        const b = list[1];\n        const lastCenter = PointHelper.getCenter(a.from, b.from);\n        const center = PointHelper.getCenter(a.to, b.to);\n        const move = { x: center.x - lastCenter.x, y: center.y - lastCenter.y };\n        const lastDistance = PointHelper.getDistance(a.from, b.from);\n        const distance = PointHelper.getDistance(a.to, b.to);\n        const scale = distance / lastDistance;\n        const angle = PointHelper.getRotation(a.from, b.from, a.to, b.to);\n        return { move, scale, angle, center };\n    }\n};\n\nconst config = {\n    wheel: {\n        zoomSpeed: 0.5,\n        moveSpeed: 0.5,\n        rotateSpeed: 0.5,\n        delta: { x: 80 / 4, y: 8.0 },\n        preventDefault: true\n    },\n    pointer: {\n        hitRadius: 5,\n        tapTime: 120,\n        longPressTime: 800,\n        transformTime: 500,\n        hover: true,\n        dragHover: true,\n        dragDistance: 2,\n        swipeDistance: 20,\n        preventDefaultMenu: true\n    },\n    touch: {\n        preventDefault: true\n    },\n    multiTouch: {},\n    cursor: true,\n    keyEvent: true\n};\n\nconst { pathHasEventType, getMoveEventData, getZoomEventData, getRotateEventData, pathCanDrag, pathHasOutside } = InteractionHelper;\nclass InteractionBase {\n    get dragging() { return this.dragger.dragging; }\n    get transforming() { return this.transformer.transforming; }\n    get moveMode() { return this.m.drag === true || this.isHoldSpaceKey || this.isHoldMiddleKey || (this.isHoldRightKey && this.dragger.moving) || this.isDragEmpty; }\n    get canHover() { return this.p.hover && !this.config.mobile; }\n    get isDragEmpty() { return this.m.dragEmpty && this.isRootPath(this.hoverData) && (!this.downData || this.isRootPath(this.downData)); }\n    get isMobileDragEmpty() { return this.m.dragEmpty && !this.canHover && this.downData && this.isTreePath(this.downData); }\n    get isHoldMiddleKey() { return this.m.holdMiddleKey && this.downData && PointerButton.middle(this.downData); }\n    get isHoldRightKey() { return this.m.holdRightKey && this.downData && PointerButton.right(this.downData); }\n    get isHoldSpaceKey() { return this.m.holdSpaceKey && Keyboard.isHoldSpaceKey(); }\n    get m() { return this.config.move; }\n    get p() { return this.config.pointer; }\n    get hitRadius() { return this.p.hitRadius; }\n    constructor(target, canvas, selector, userConfig) {\n        this.config = DataHelper.clone(config);\n        this.tapCount = 0;\n        this.downKeyMap = {};\n        this.target = target;\n        this.canvas = canvas;\n        this.selector = selector;\n        this.defaultPath = new LeafList(target);\n        this.transformer = new Transformer(this);\n        this.dragger = new Dragger(this);\n        if (userConfig)\n            this.config = DataHelper.default(userConfig, this.config);\n        this.__listenEvents();\n    }\n    start() {\n        this.running = true;\n    }\n    stop() {\n        this.running = false;\n    }\n    receive(_event) { }\n    pointerDown(data, useDefaultPath) {\n        if (!data)\n            data = this.hoverData;\n        if (!data)\n            return;\n        PointerButton.defaultLeft(data);\n        this.updateDownData(data);\n        this.checkPath(data, useDefaultPath);\n        this.downTime = Date.now();\n        this.emit(PointerEvent.BEFORE_DOWN, data);\n        this.emit(PointerEvent.DOWN, data);\n        if (PointerButton.left(data)) {\n            this.tapWait();\n            this.longPressWait(data);\n        }\n        this.waitRightTap = PointerButton.right(data);\n        this.dragger.setDragData(data);\n        if (!this.isHoldRightKey)\n            this.updateCursor(data);\n    }\n    pointerMove(data) {\n        if (!data)\n            data = this.hoverData;\n        if (!data)\n            return;\n        const { downData } = this;\n        if (downData)\n            PointerButton.defaultLeft(data);\n        const hit = this.canvas.bounds.hitPoint(data);\n        if (hit || downData) {\n            this.pointerMoveReal(data);\n            if (downData)\n                this.dragger.checkDragOut(data);\n        }\n    }\n    pointerMoveReal(data) {\n        const { dragHover, dragDistance } = this.p;\n        this.emit(PointerEvent.BEFORE_MOVE, data, this.defaultPath);\n        if (this.downData) {\n            const canDrag = PointHelper.getDistance(this.downData, data) > dragDistance;\n            if (canDrag) {\n                if (this.waitTap)\n                    this.pointerWaitCancel();\n                this.waitRightTap = false;\n            }\n            this.dragger.checkDrag(data, canDrag);\n        }\n        if (!this.dragger.moving) {\n            this.updateHoverData(data);\n            this.checkPath(data);\n            this.emit(PointerEvent.MOVE, data);\n            if (!(this.dragging && !dragHover))\n                this.pointerHover(data);\n            if (this.dragger.dragging) {\n                this.dragger.dragOverOrOut(data);\n                this.dragger.dragEnterOrLeave(data);\n            }\n        }\n        this.updateCursor(this.downData || data);\n    }\n    pointerUp(data) {\n        const { downData } = this;\n        if (!data)\n            data = downData;\n        if (!downData)\n            return;\n        PointerButton.defaultLeft(data);\n        data.multiTouch = downData.multiTouch;\n        this.findPath(data);\n        const upData = Object.assign(Object.assign({}, data), { path: data.path.clone() });\n        data.path.addList(downData.path.list);\n        this.checkPath(data);\n        this.downData = null;\n        this.emit(PointerEvent.BEFORE_UP, data);\n        this.emit(PointerEvent.UP, data);\n        this.touchLeave(data);\n        if (!data.isCancel) {\n            this.tap(data);\n            this.menuTap(data);\n        }\n        this.dragger.dragEnd(data);\n        this.updateCursor(upData);\n    }\n    pointerCancel() {\n        const data = Object.assign({}, this.dragger.dragData);\n        data.isCancel = true;\n        this.pointerUp(data);\n    }\n    multiTouch(data, list) {\n        if (this.config.multiTouch.disabled)\n            return;\n        const { move, angle, scale, center } = MultiTouchHelper.getData(list);\n        this.rotate(getRotateEventData(center, angle, data));\n        this.zoom(getZoomEventData(center, scale, data));\n        this.move(getMoveEventData(center, move, data));\n    }\n    menu(data) {\n        this.findPath(data);\n        this.emit(PointerEvent.MENU, data);\n        this.waitMenuTap = true;\n        if (!this.downData && this.waitRightTap)\n            this.menuTap(data);\n    }\n    menuTap(data) {\n        if (this.waitRightTap && this.waitMenuTap) {\n            this.emit(PointerEvent.MENU_TAP, data);\n            this.waitRightTap = this.waitMenuTap = false;\n        }\n    }\n    move(data) {\n        this.transformer.move(data);\n    }\n    zoom(data) {\n        this.transformer.zoom(data);\n    }\n    rotate(data) {\n        this.transformer.rotate(data);\n    }\n    transformEnd() {\n        this.transformer.transformEnd();\n    }\n    keyDown(data) {\n        if (!this.config.keyEvent)\n            return;\n        const { code } = data;\n        if (!this.downKeyMap[code]) {\n            this.downKeyMap[code] = true;\n            Keyboard.setDownCode(code);\n            this.emit(KeyEvent.HOLD, data, this.defaultPath);\n            if (this.moveMode) {\n                this.cancelHover();\n                this.updateCursor();\n            }\n        }\n        this.emit(KeyEvent.DOWN, data, this.defaultPath);\n    }\n    keyUp(data) {\n        if (!this.config.keyEvent)\n            return;\n        const { code } = data;\n        this.downKeyMap[code] = false;\n        Keyboard.setUpCode(code);\n        this.emit(KeyEvent.UP, data, this.defaultPath);\n        if (this.cursor === 'grab')\n            this.updateCursor();\n    }\n    pointerHover(data) {\n        if (this.canHover) {\n            this.pointerOverOrOut(data);\n            this.pointerEnterOrLeave(data);\n        }\n    }\n    pointerOverOrOut(data) {\n        const { path } = data;\n        const { overPath } = this;\n        this.overPath = path;\n        if (overPath) {\n            if (path.indexAt(0) !== overPath.indexAt(0)) {\n                this.emit(PointerEvent.OUT, data, overPath);\n                this.emit(PointerEvent.OVER, data, path);\n            }\n        }\n        else {\n            this.emit(PointerEvent.OVER, data, path);\n        }\n    }\n    pointerEnterOrLeave(data) {\n        let { path } = data;\n        if (this.downData && !this.moveMode) {\n            path = path.clone();\n            this.downData.path.forEach(leaf => path.add(leaf));\n        }\n        const { enterPath } = this;\n        this.enterPath = path;\n        this.emit(PointerEvent.LEAVE, data, enterPath, path);\n        this.emit(PointerEvent.ENTER, data, path, enterPath);\n    }\n    touchLeave(data) {\n        if (data.pointerType === 'touch') {\n            if (this.enterPath) {\n                this.emit(PointerEvent.LEAVE, data);\n                if (this.dragger.dragging)\n                    this.emit(DropEvent.LEAVE, data);\n            }\n        }\n    }\n    tap(data) {\n        const { pointer } = this.config;\n        const hasLong = this.longTap(data);\n        if (!pointer.tapMore && hasLong)\n            return;\n        if (!this.waitTap)\n            return;\n        if (pointer.tapMore)\n            this.emitTap(data);\n        const useTime = Date.now() - this.downTime;\n        const hasDouble = [PointerEvent.DOUBLE_TAP, PointerEvent.DOUBLE_CLICK].some(type => pathHasEventType(data.path, type));\n        if (useTime < pointer.tapTime + 50 && hasDouble) {\n            this.tapCount++;\n            if (this.tapCount === 2) {\n                this.tapWaitCancel();\n                this.emitDoubleTap(data);\n            }\n            else {\n                clearTimeout(this.tapTimer);\n                this.tapTimer = setTimeout(() => {\n                    if (!pointer.tapMore) {\n                        this.tapWaitCancel();\n                        this.emitTap(data);\n                    }\n                }, pointer.tapTime);\n            }\n        }\n        else {\n            if (!pointer.tapMore) {\n                this.tapWaitCancel();\n                this.emitTap(data);\n            }\n        }\n    }\n    findPath(data, options) {\n        const { hitRadius, through } = this.p;\n        const { bottomList } = this;\n        const find = this.selector.getByPoint(data, hitRadius, Object.assign({ bottomList, name: data.type }, (options || { through })));\n        if (find.throughPath)\n            data.throughPath = find.throughPath;\n        data.path = find.path;\n        return find.path;\n    }\n    isRootPath(data) {\n        return data && data.path.list[0].isLeafer;\n    }\n    isTreePath(data) {\n        const app = this.target.app;\n        if (!app || !app.isApp)\n            return false;\n        return app.editor && (!data.path.has(app.editor) && data.path.has(app.tree) && !data.target.syncEventer);\n    }\n    checkPath(data, useDefaultPath) {\n        if (useDefaultPath || (this.moveMode && !pathHasOutside(data.path)))\n            data.path = this.defaultPath;\n    }\n    canMove(data) {\n        return data && (this.moveMode || (this.m.drag === 'auto' && !pathCanDrag(data.path))) && !pathHasOutside(data.path);\n    }\n    isDrag(leaf) {\n        return this.dragger.getList().has(leaf);\n    }\n    isPress(leaf) {\n        return this.downData && this.downData.path.has(leaf);\n    }\n    isHover(leaf) {\n        return this.enterPath && this.enterPath.has(leaf);\n    }\n    isFocus(leaf) {\n        return this.focusData === leaf;\n    }\n    cancelHover() {\n        const { hoverData } = this;\n        if (hoverData) {\n            hoverData.path = this.defaultPath;\n            this.pointerHover(hoverData);\n        }\n    }\n    updateDownData(data, options, merge) {\n        const { downData } = this;\n        if (!data && downData)\n            data = downData;\n        if (!data)\n            return;\n        this.findPath(data, options);\n        if (merge && downData)\n            data.path.addList(downData.path.list);\n        this.downData = data;\n    }\n    updateHoverData(data) {\n        if (!data)\n            data = this.hoverData;\n        if (!data)\n            return;\n        this.findPath(data, { exclude: this.dragger.getList(false, true), name: PointerEvent.MOVE });\n        this.hoverData = data;\n    }\n    updateCursor(data) {\n        if (!this.config.cursor || !this.canHover)\n            return;\n        if (!data) {\n            this.updateHoverData();\n            data = this.downData || this.hoverData;\n        }\n        if (this.dragger.moving) {\n            return this.setCursor('grabbing');\n        }\n        else if (this.canMove(data)) {\n            return this.setCursor(this.downData ? 'grabbing' : 'grab');\n        }\n        else if (!data)\n            return;\n        let leaf, cursor;\n        const { path } = data;\n        for (let i = 0, len = path.length; i < len; i++) {\n            leaf = path.list[i];\n            cursor = (leaf.syncEventer && leaf.syncEventer.cursor) || leaf.cursor;\n            if (cursor)\n                break;\n        }\n        this.setCursor(cursor);\n    }\n    setCursor(cursor) {\n        this.cursor = cursor;\n    }\n    getLocal(clientPoint, updateClient) {\n        const clientBounds = this.canvas.getClientBounds(updateClient);\n        return { x: clientPoint.clientX - clientBounds.x, y: clientPoint.clientY - clientBounds.y };\n    }\n    emitTap(data) {\n        this.emit(PointerEvent.TAP, data);\n        this.emit(PointerEvent.CLICK, data);\n    }\n    emitDoubleTap(data) {\n        this.emit(PointerEvent.DOUBLE_TAP, data);\n        this.emit(PointerEvent.DOUBLE_CLICK, data);\n    }\n    pointerWaitCancel() {\n        this.tapWaitCancel();\n        this.longPressWaitCancel();\n    }\n    tapWait() {\n        clearTimeout(this.tapTimer);\n        this.waitTap = true;\n    }\n    tapWaitCancel() {\n        clearTimeout(this.tapTimer);\n        this.waitTap = false;\n        this.tapCount = 0;\n    }\n    longPressWait(data) {\n        clearTimeout(this.longPressTimer);\n        this.longPressTimer = setTimeout(() => {\n            this.longPressed = true;\n            this.emit(PointerEvent.LONG_PRESS, data);\n        }, this.p.longPressTime);\n    }\n    longTap(data) {\n        let hasLong;\n        if (this.longPressed) {\n            this.emit(PointerEvent.LONG_TAP, data);\n            if (pathHasEventType(data.path, PointerEvent.LONG_TAP) || pathHasEventType(data.path, PointerEvent.LONG_PRESS))\n                hasLong = true;\n        }\n        this.longPressWaitCancel();\n        return hasLong;\n    }\n    longPressWaitCancel() {\n        clearTimeout(this.longPressTimer);\n        this.longPressed = false;\n    }\n    __onResize() {\n        this.shrinkCanvasBounds = new Bounds(this.canvas.bounds);\n        this.shrinkCanvasBounds.spread(-2);\n    }\n    __listenEvents() {\n        const { target } = this;\n        this.__eventIds = [target.on_(ResizeEvent.RESIZE, this.__onResize, this)];\n        target.once(LeaferEvent.READY, () => this.__onResize());\n    }\n    __removeListenEvents() {\n        this.target.off_(this.__eventIds);\n        this.__eventIds.length = 0;\n    }\n    emit(type, data, path, excludePath) {\n        if (this.running)\n            emit(type, data, path, excludePath);\n    }\n    destroy() {\n        if (this.__eventIds.length) {\n            this.stop();\n            this.__removeListenEvents();\n            this.dragger.destroy();\n            this.transformer.destroy();\n            this.downData = this.overPath = this.enterPath = null;\n        }\n    }\n}\n\nclass Cursor {\n    static set(name, value) {\n        this.custom[name] = value;\n    }\n    static get(name) {\n        return this.custom[name];\n    }\n}\nCursor.custom = {};\n\nclass HitCanvasManager extends CanvasManager {\n    constructor() {\n        super(...arguments);\n        this.maxTotal = 1000;\n        this.pathList = new LeafList();\n        this.pixelList = new LeafList();\n    }\n    getPixelType(leaf, config) {\n        this.__autoClear();\n        this.pixelList.add(leaf);\n        return Creator.hitCanvas(config);\n    }\n    getPathType(leaf) {\n        this.__autoClear();\n        this.pathList.add(leaf);\n        return Creator.hitCanvas();\n    }\n    clearImageType() {\n        this.__clearLeafList(this.pixelList);\n    }\n    clearPathType() {\n        this.__clearLeafList(this.pathList);\n    }\n    __clearLeafList(leafList) {\n        if (leafList.length) {\n            leafList.forEach(leaf => {\n                if (leaf.__hitCanvas) {\n                    leaf.__hitCanvas.destroy();\n                    leaf.__hitCanvas = null;\n                }\n            });\n            leafList.reset();\n        }\n    }\n    __autoClear() {\n        if (this.pathList.length + this.pixelList.length > this.maxTotal)\n            this.clear();\n    }\n    clear() {\n        this.clearPathType();\n        this.clearImageType();\n    }\n}\n\nconst { toInnerRadiusPointOf, copy, setRadius } = PointHelper;\nconst inner = {};\nconst leaf = Leaf.prototype;\nleaf.__hitWorld = function (point) {\n    if (!this.__.hitSelf)\n        return false;\n    if (this.__.hitRadius) {\n        copy(inner, point), point = inner;\n        setRadius(point, this.__.hitRadius);\n    }\n    toInnerRadiusPointOf(point, this.__world, inner);\n    const { width, height } = this.__world;\n    const isSmall = width < 10 && height < 10;\n    if (this.__.hitBox || isSmall) {\n        if (BoundsHelper.hitRadiusPoint(this.__layout.boxBounds, inner))\n            return true;\n        if (isSmall)\n            return false;\n    }\n    if (this.__layout.hitCanvasChanged || !this.__hitCanvas) {\n        this.__updateHitCanvas();\n        if (!this.__layout.boundsChanged)\n            this.__layout.hitCanvasChanged = false;\n    }\n    return this.__hit(inner);\n};\nleaf.__hitFill = function (inner) { var _a; return (_a = this.__hitCanvas) === null || _a === void 0 ? void 0 : _a.hitFill(inner, this.__.windingRule); };\nleaf.__hitStroke = function (inner, strokeWidth) { var _a; return (_a = this.__hitCanvas) === null || _a === void 0 ? void 0 : _a.hitStroke(inner, strokeWidth); };\nleaf.__hitPixel = function (inner) { var _a; return (_a = this.__hitCanvas) === null || _a === void 0 ? void 0 : _a.hitPixel(inner, this.__layout.renderBounds, this.__hitCanvas.hitScale); };\nleaf.__drawHitPath = function (canvas) { if (canvas)\n    this.__drawRenderPath(canvas); };\n\nconst matrix = new Matrix();\nconst ui$2 = UI.prototype;\nui$2.__updateHitCanvas = function () {\n    const data = this.__, { hitCanvasManager } = this.leafer;\n    const isHitPixelFill = (data.__pixelFill || data.__isCanvas) && data.hitFill === 'pixel';\n    const isHitPixelStroke = data.__pixelStroke && data.hitStroke === 'pixel';\n    const isHitPixel = isHitPixelFill || isHitPixelStroke;\n    if (!this.__hitCanvas)\n        this.__hitCanvas = isHitPixel ? hitCanvasManager.getPixelType(this, { contextSettings: { willReadFrequently: true } }) : hitCanvasManager.getPathType(this);\n    const h = this.__hitCanvas;\n    if (isHitPixel) {\n        const { renderBounds } = this.__layout;\n        const size = Platform.image.hitCanvasSize;\n        const scale = h.hitScale = tempBounds.set(0, 0, size, size).getFitMatrix(renderBounds).a;\n        const { x, y, width, height } = tempBounds.set(renderBounds).scale(scale);\n        h.resize({ width, height, pixelRatio: 1 });\n        h.clear();\n        ImageManager.patternLocked = true;\n        this.__renderShape(h, { matrix: matrix.setWith(this.__world).scaleWith(1 / scale).invertWith().translate(-x, -y) }, !isHitPixelFill, !isHitPixelStroke);\n        ImageManager.patternLocked = false;\n        h.resetTransform();\n        data.__isHitPixel = true;\n    }\n    else {\n        data.__isHitPixel && (data.__isHitPixel = false);\n    }\n    this.__drawHitPath(h);\n    h.setStrokeOptions(data);\n};\nui$2.__hit = function (inner) {\n    if (Platform.name === 'miniapp')\n        this.__drawHitPath(this.__hitCanvas);\n    const data = this.__;\n    if (data.__isHitPixel && this.__hitPixel(inner))\n        return true;\n    const { hitFill } = data;\n    const needHitFillPath = ((data.fill || data.__isCanvas) && (hitFill === 'path' || (hitFill === 'pixel' && !(data.__pixelFill || data.__isCanvas)))) || hitFill === 'all';\n    if (needHitFillPath && this.__hitFill(inner))\n        return true;\n    const { hitStroke, __strokeWidth } = data;\n    const needHitStrokePath = (data.stroke && (hitStroke === 'path' || (hitStroke === 'pixel' && !data.__pixelStroke))) || hitStroke === 'all';\n    if (!needHitFillPath && !needHitStrokePath)\n        return false;\n    const radiusWidth = inner.radiusX * 2;\n    let hitWidth = radiusWidth;\n    if (needHitStrokePath) {\n        switch (data.strokeAlign) {\n            case 'inside':\n                hitWidth += __strokeWidth * 2;\n                if (!needHitFillPath && this.__hitFill(inner) && this.__hitStroke(inner, hitWidth))\n                    return true;\n                hitWidth = radiusWidth;\n                break;\n            case 'center':\n                hitWidth += __strokeWidth;\n                break;\n            case 'outside':\n                hitWidth += __strokeWidth * 2;\n                if (!needHitFillPath) {\n                    if (!this.__hitFill(inner) && this.__hitStroke(inner, hitWidth))\n                        return true;\n                    hitWidth = radiusWidth;\n                }\n                break;\n        }\n    }\n    return hitWidth ? this.__hitStroke(inner, hitWidth) : false;\n};\n\nconst ui$1 = UI.prototype, rect = Rect.prototype, box = Box.prototype;\nrect.__updateHitCanvas = box.__updateHitCanvas = function () {\n    if (this.stroke || this.cornerRadius || ((this.fill || this.__.__isCanvas) && this.hitFill === 'pixel') || this.hitStroke === 'all')\n        ui$1.__updateHitCanvas.call(this);\n    else if (this.__hitCanvas)\n        this.__hitCanvas = null;\n};\nrect.__hitFill = box.__hitFill = function (inner) {\n    return this.__hitCanvas ? ui$1.__hitFill.call(this, inner) : BoundsHelper.hitRadiusPoint(this.__layout.boxBounds, inner);\n};\n\nconst ui = UI.prototype, group = Group.prototype;\nfunction getSelector(ui) {\n    return ui.leafer ? ui.leafer.selector : (Platform$1.selector || (Platform$1.selector = Creator$1.selector()));\n}\nui.find = function (condition, options) {\n    return getSelector(this).getBy(condition, this, false, options);\n};\nui.findOne = function (condition, options) {\n    return getSelector(this).getBy(condition, this, true, options);\n};\ngroup.pick = function (hitPoint, options) {\n    this.__layout.update();\n    if (!options)\n        options = {};\n    return getSelector(this).getByPoint(hitPoint, options.hitRadius || 0, Object.assign(Object.assign({}, options), { target: this }));\n};\n\nconst canvas = LeaferCanvasBase.prototype;\ncanvas.hitFill = function (point, fillRule) {\n    return fillRule ? this.context.isPointInPath(point.x, point.y, fillRule) : this.context.isPointInPath(point.x, point.y);\n};\ncanvas.hitStroke = function (point, strokeWidth) {\n    this.strokeWidth = strokeWidth;\n    return this.context.isPointInStroke(point.x, point.y);\n};\ncanvas.hitPixel = function (radiusPoint, offset, scale = 1) {\n    let { x, y, radiusX, radiusY } = radiusPoint;\n    if (offset)\n        x -= offset.x, y -= offset.y;\n    tempBounds.set(x - radiusX, y - radiusY, radiusX * 2, radiusY * 2).scale(scale).ceil();\n    const { data } = this.context.getImageData(tempBounds.x, tempBounds.y, tempBounds.width || 1, tempBounds.height || 1);\n    for (let i = 0, len = data.length; i < len; i += 4) {\n        if (data[i + 3] > 0)\n            return true;\n    }\n    return data[3] > 0;\n};\n\nexport { App, Cursor, DragEvent, DropEvent, HitCanvasManager, InteractionBase, InteractionHelper, KeyEvent, Keyboard, LeaferTypeCreator, MoveEvent, MultiTouchHelper, MyDragEvent, MyPointerEvent, PointerButton, PointerEvent, RotateEvent, SwipeEvent, UIEvent, ZoomEvent, addInteractionWindow };\n"],
  "mappings": "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",
  "names": ["App", "canvas", "leafer", "config", "PointerEvent", "DragEvent", "leaf", "DropEvent", "MoveEvent", "RotateEvent", "SwipeEvent", "ZoomEvent", "KeyEvent", "list", "inner", "ui"]
}
