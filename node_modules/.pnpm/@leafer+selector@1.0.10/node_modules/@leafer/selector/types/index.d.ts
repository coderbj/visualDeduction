import { ILeaf, ISelector, ILeafList, IRadiusPointData, IPointData, IPickOptions, IPickResult, IPickBottom, ISelectorProxy, ISelectorConfig, ILeafMap, IBooleanMap, IEventListenerId, IFindCondition, IFindMethod } from '@leafer/interface';
import { LeafList, ChildEvent, PropertyEvent } from '@leafer/core';

declare class Picker {
    protected target?: ILeaf;
    protected selector: ISelector;
    protected findList: ILeafList;
    protected exclude: ILeafList;
    protected point: IRadiusPointData;
    constructor(target: ILeaf, selector: ISelector);
    getByPoint(hitPoint: IPointData, hitRadius: number, options?: IPickOptions): IPickResult;
    getBestMatchLeaf(list: ILeaf[], bottomList: IPickBottom[], ignoreHittable: boolean): ILeaf;
    getPath(leaf: ILeaf): LeafList;
    getHitablePath(leaf: ILeaf): LeafList;
    getThroughPath(list: ILeaf[]): LeafList;
    protected hitBranch(branch: ILeaf): void;
    protected eachFind(children: ILeaf[], hitMask: boolean): void;
    protected hitChild(child: ILeaf, point: IRadiusPointData, proxy?: ILeaf): void;
    protected clear(): void;
    destroy(): void;
}

declare class Selector implements ISelector {
    target?: ILeaf;
    proxy?: ISelectorProxy;
    config: ISelectorConfig;
    protected picker: Picker;
    protected innerIdMap: ILeafMap;
    protected idMap: ILeafMap;
    protected findLeaf: ILeaf;
    protected methods: {
        id: (leaf: ILeaf, name: string) => 1 | 0;
        innerId: (leaf: ILeaf, innerId: number) => 1 | 0;
        className: (leaf: ILeaf, name: string) => 1 | 0;
        tag: (leaf: ILeaf, name: string) => 1 | 0;
        tags: (leaf: ILeaf, nameMap: IBooleanMap) => 1 | 0;
    };
    protected __eventIds: IEventListenerId[];
    constructor(target: ILeaf, userConfig?: ISelectorConfig);
    getBy(condition: number | string | IFindCondition | IFindMethod, branch?: ILeaf, one?: boolean, options?: any): ILeaf | ILeaf[];
    getByPoint(hitPoint: IPointData, hitRadius: number, options?: IPickOptions): IPickResult;
    getByInnerId(innerId: number, branch?: ILeaf): ILeaf;
    getById(id: string, branch?: ILeaf): ILeaf;
    getByClassName(className: string, branch?: ILeaf): ILeaf[];
    getByTag(tag: string, branch?: ILeaf): ILeaf[];
    getByMethod(method: IFindMethod, branch?: ILeaf, one?: boolean, options?: any): ILeaf[] | ILeaf;
    protected eachFind(children: ILeaf[], method: IFindMethod, list?: ILeaf[], options?: any): void;
    protected toChildren(branch: ILeaf): ILeaf[];
    protected __onRemoveChild(event: ChildEvent): void;
    protected __checkIdChange(event: PropertyEvent): void;
    protected __listenEvents(): void;
    protected __removeListenEvents(): void;
    destroy(): void;
}

export { Selector };
