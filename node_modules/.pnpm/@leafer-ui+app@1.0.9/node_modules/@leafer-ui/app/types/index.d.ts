import { IBoundsData, ILeaferConfig, ILeaferCanvas, IRenderOptions, IResizeEvent, ILeaferBase } from '@leafer/interface';
import { RenderEvent } from '@leafer/core';
import { IApp, ILeafer, IAppConfig, IAppInputData } from '@leafer-ui/interface';
import { Leafer } from '@leafer-ui/draw';

declare class App extends Leafer implements IApp {
    get __tag(): string;
    get isApp(): boolean;
    children: ILeafer[];
    realCanvas: boolean;
    ground: ILeafer;
    tree: ILeafer;
    sky: ILeafer;
    constructor(userConfig?: IAppConfig, data?: IAppInputData);
    init(userConfig?: IAppConfig, parentApp?: IApp): void;
    protected __setApp(): void;
    start(): void;
    stop(): void;
    unlockLayout(): void;
    lockLayout(): void;
    forceRender(bounds?: IBoundsData): void;
    addLeafer(merge?: ILeaferConfig): Leafer;
    add(leafer: ILeafer, index?: number): void;
    protected __onPropertyChange(): void;
    protected __onCreated(): void;
    protected __onReady(): void;
    protected __onViewReady(): void;
    protected __onChildRenderEnd(e: RenderEvent): void;
    __render(canvas: ILeaferCanvas, options: IRenderOptions): void;
    __onResize(event: IResizeEvent): void;
    protected __checkUpdateLayout(): void;
    protected __getChildConfig(userConfig?: ILeaferConfig): ILeaferConfig;
    protected __listenChildEvents(leafer: ILeaferBase): void;
}

export { App };
